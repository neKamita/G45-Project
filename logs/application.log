2025-01-29 13:09:27 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 249117 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 13:09:27 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 13:09:27 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 13:09:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 13:09:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 13:09:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 107 ms. Found 13 JPA repository interfaces.
2025-01-29 13:09:29 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 13:09:29 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 13:09:29 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-29 13:09:28 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 13:09:29 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 13:09:29 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 13:09:29 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 13:09:29 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 13:09:29 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1126 ms
2025-01-29 13:09:29 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 13:09:29 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 13:09:29 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 13:09:29 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 13:09:29 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 13:09:32 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@31d8352e
2025-01-29 13:09:32 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 13:09:32 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 13:09:33 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 13:09:35 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        id bigserial not null,
        active boolean not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-29 13:09:35 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add column category_id bigint
2025-01-29 13:09:35 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 13:09:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 13:09:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists categories 
       drop constraint if exists UK_t8o6pivur7nn124jehx7cygw5
2025-01-29 13:09:36 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-29 13:09:36 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "uk_t8o6pivur7nn124jehx7cygw5" of relation "categories" does not exist, skipping
2025-01-29 13:09:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists categories 
       add constraint UK_t8o6pivur7nn124jehx7cygw5 unique (name)
2025-01-29 13:09:37 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists idx_user_email
2025-01-29 13:09:38 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-29 13:09:38 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_user_email" of relation "users" does not exist, skipping
2025-01-29 13:09:38 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint idx_user_email unique (email)
2025-01-29 13:09:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-29 13:09:56 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 13:09:56 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 13:09:58 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 13:09:58 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 13:09:58 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 13:09:58 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 13:09:59 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 13:09:59 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 13:09:59 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@87c9b75, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@93438d0, org.springframework.security.web.context.SecurityContextHolderFilter@1981016e, org.springframework.security.web.header.HeaderWriterFilter@350b3c06, org.springframework.web.filter.CorsFilter@3a908e5b, org.springframework.security.web.authentication.logout.LogoutFilter@5a28a17, uz.pdp.config.filtr.MyFilter@182dcd2b, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@89a513a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@49376a7c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@dcba368, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5668b3a5, org.springframework.security.web.access.ExceptionTranslationFilter@2f00c2dd, org.springframework.security.web.access.intercept.AuthorizationFilter@4987e6f9]
2025-01-29 13:10:00 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 13:10:00 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 32.452 seconds (process running for 33.402)
2025-01-29 13:10:00 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:10:00 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 13:10:01 [RMI TCP Connection(4)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 13:10:01 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 13:10:01 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-29 13:10:48 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 639 ms
2025-01-29 13:11:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:11:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        upper(c1_0.name)=upper(?)
2025-01-29 13:11:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 13:13:09 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 13:13:09 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 13:13:11 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 13:13:13 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 268120 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 13:13:13 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 13:13:13 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 13:13:13 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 13:13:13 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 13:13:14 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 111 ms. Found 13 JPA repository interfaces.
2025-01-29 13:13:14 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 13:13:14 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 13:13:14 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-29 13:13:14 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 13:13:15 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 13:13:15 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 13:13:15 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 13:13:15 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 13:13:15 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1925 ms
2025-01-29 13:13:15 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 13:13:15 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 13:13:15 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 13:13:16 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 13:13:16 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 13:13:19 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@47462daf
2025-01-29 13:13:19 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 13:13:19 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 13:13:20 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 13:13:22 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 13:13:22 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 13:13:41 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 13:13:42 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 13:13:43 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 13:13:44 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 13:13:44 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 13:13:44 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 13:13:44 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 13:13:44 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 13:13:44 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@712c8e89, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4ace740d, org.springframework.security.web.context.SecurityContextHolderFilter@39ae44bc, org.springframework.security.web.header.HeaderWriterFilter@1fb68a8f, org.springframework.web.filter.CorsFilter@792f56a1, org.springframework.security.web.authentication.logout.LogoutFilter@595aed34, uz.pdp.config.filtr.MyFilter@50f13494, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@35946da7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@70161ca1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@289dcf23, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2e74e565, org.springframework.security.web.access.ExceptionTranslationFilter@7da5b21d, org.springframework.security.web.access.intercept.AuthorizationFilter@11aafd0f]
2025-01-29 13:13:45 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 13:13:45 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 32.593 seconds (process running for 32.895)
2025-01-29 13:13:45 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:13:46 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 13:13:47 [RMI TCP Connection(4)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 13:13:47 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 13:13:47 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-29 13:15:44 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 653 ms
2025-01-29 13:15:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:15:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.active
2025-01-29 13:16:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:16:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.id=?
2025-01-29 13:16:44 [http-nio-8080-exec-7] ERROR u.p.exception.GlobalExceptionHandler - Unexpected error occurred
uz.pdp.exception.ResourceNotFoundException: Category not found with id: 5
	at uz.pdp.service.CategoryService.lambda$4(CategoryService.java:91)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at uz.pdp.service.CategoryService.getCategoryById(CategoryService.java:91)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at uz.pdp.service.CategoryService$$SpringCGLIB$$0.getCategoryById(<generated>)
	at uz.pdp.controller.CategoryController.getCategory(CategoryController.java:92)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at uz.pdp.controller.CategoryController$$SpringCGLIB$$0.getCategory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:262)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:213)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-01-29 13:18:30 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 13:18:30 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 13:18:32 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 13:18:34 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 295111 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 13:18:34 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 13:18:34 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 13:18:34 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 13:18:34 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 13:18:34 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 76 ms. Found 13 JPA repository interfaces.
2025-01-29 13:18:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 13:18:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 13:18:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-29 13:18:35 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 13:18:35 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 13:18:35 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 13:18:35 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 13:18:35 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 13:18:35 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1491 ms
2025-01-29 13:18:36 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 13:18:36 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 13:18:36 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 13:18:36 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 13:18:36 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 13:18:39 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5cb64b9c
2025-01-29 13:18:39 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 13:18:39 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 13:18:40 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 13:18:41 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 13:18:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 13:19:01 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 13:19:01 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 13:19:02 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 13:19:03 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 13:19:03 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 13:19:03 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 13:19:03 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 13:19:03 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 13:19:03 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@42cbc080, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@26f7995f, org.springframework.security.web.context.SecurityContextHolderFilter@37590514, org.springframework.security.web.header.HeaderWriterFilter@7bb3532c, org.springframework.web.filter.CorsFilter@57f648a7, org.springframework.security.web.authentication.logout.LogoutFilter@5658d44c, uz.pdp.config.filtr.MyFilter@1238a074, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@6d648bd7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2ae9ba95, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@31c80bb7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4378a083, org.springframework.security.web.access.ExceptionTranslationFilter@5c05cfdc, org.springframework.security.web.access.intercept.AuthorizationFilter@2417a963]
2025-01-29 13:19:04 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 13:19:04 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 30.553 seconds (process running for 30.843)
2025-01-29 13:19:04 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:19:05 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 13:19:06 [RMI TCP Connection(1)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 13:19:06 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 13:19:06 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-29 13:19:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:19:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.id=?
2025-01-29 13:19:10 [http-nio-8080-exec-1] WARN  u.pdp.controller.CategoryController - Category not found: 5
uz.pdp.exception.ResourceNotFoundException: Category not found with id: 5
	at uz.pdp.service.CategoryService.lambda$4(CategoryService.java:91)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at uz.pdp.service.CategoryService.getCategoryById(CategoryService.java:91)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at uz.pdp.service.CategoryService$$SpringCGLIB$$0.getCategoryById(<generated>)
	at uz.pdp.controller.CategoryController.getCategory(CategoryController.java:141)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at uz.pdp.controller.CategoryController$$SpringCGLIB$$0.getCategory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:262)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:213)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-01-29 13:19:13 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 613 ms
2025-01-29 13:22:44 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 13:22:44 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 13:22:46 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 13:22:48 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 316222 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 13:22:48 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 13:22:48 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 13:22:48 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 13:22:48 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 13:22:49 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 82 ms. Found 13 JPA repository interfaces.
2025-01-29 13:22:49 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 13:22:49 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 13:22:49 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-29 13:22:49 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 13:22:50 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 13:22:50 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 13:22:50 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 13:22:50 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 13:22:50 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1879 ms
2025-01-29 13:22:50 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 13:22:50 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 13:22:50 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 13:22:51 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 13:22:51 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 13:22:53 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1d208795
2025-01-29 13:22:53 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 13:22:54 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 13:22:55 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 13:22:57 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 13:22:57 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 13:23:16 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 13:23:18 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 13:23:20 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 13:23:21 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 13:23:21 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 13:23:21 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 13:23:22 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 13:23:22 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 13:23:22 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6118a8cc, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4c8082b7, org.springframework.security.web.context.SecurityContextHolderFilter@4458e8ff, org.springframework.security.web.header.HeaderWriterFilter@3c68c714, org.springframework.web.filter.CorsFilter@2489a791, org.springframework.security.web.authentication.logout.LogoutFilter@691aaaa0, uz.pdp.config.filtr.MyFilter@182fd26b, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@3d964579, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@59b625b3, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2035bc41, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@76e1dbe2, org.springframework.security.web.access.ExceptionTranslationFilter@3cf4a2bf, org.springframework.security.web.access.intercept.AuthorizationFilter@3eb0be61]
2025-01-29 13:23:24 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 13:23:24 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 36.119 seconds (process running for 36.383)
2025-01-29 13:23:24 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:23:24 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 13:23:25 [RMI TCP Connection(3)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 13:23:25 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 13:23:25 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-29 13:23:27 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 665 ms
2025-01-29 13:23:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:23:39 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.active
2025-01-29 13:23:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:23:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.id=?
2025-01-29 13:23:52 [http-nio-8080-exec-8] WARN  u.pdp.controller.CategoryController - Attempt to delete non-existent category: 2
uz.pdp.exception.ResourceNotFoundException: Category not found with id: 2
	at uz.pdp.service.CategoryService.lambda$6(CategoryService.java:115)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at uz.pdp.service.CategoryService.deleteCategory(CategoryService.java:115)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at uz.pdp.service.CategoryService$$SpringCGLIB$$0.deleteCategory(<generated>)
	at uz.pdp.controller.CategoryController.deleteCategory(CategoryController.java:254)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at uz.pdp.controller.CategoryController$$SpringCGLIB$$0.deleteCategory(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:262)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:213)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-01-29 13:24:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:24:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:24:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        b1_0.id,
        b1_0.user_id 
    from
        basket b1_0 
    left join
        users u1_0 
            on u1_0.id=b1_0.user_id 
    where
        u1_0.id=?
2025-01-29 13:24:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        basket
        (user_id) 
    values
        (?)
2025-01-29 13:24:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.article,
        m1_0.description,
        m1_0.price,
        m1_0.price_overall,
        m1_0.quantity,
        m1_0.size,
        m1_0.title,
        m1_0.user_id 
    from
        moulding m1_0 
    where
        m1_0.id=?
2025-01-29 13:24:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 13:24:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        basket_item
        (basket_id, image, item_id, name, price, quantity, type, version) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 13:24:23 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:24:23 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:24:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        b1_0.id,
        b1_0.user_id 
    from
        basket b1_0 
    left join
        users u1_0 
            on u1_0.id=b1_0.user_id 
    where
        u1_0.id=?
2025-01-29 13:24:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.article,
        m1_0.description,
        m1_0.price,
        m1_0.price_overall,
        m1_0.quantity,
        m1_0.size,
        m1_0.title,
        m1_0.user_id 
    from
        moulding m1_0 
    where
        m1_0.id=?
2025-01-29 13:24:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 13:24:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.basket_id,
        i1_0.id,
        i1_0.image,
        i1_0.item_id,
        i1_0.name,
        i1_0.price,
        i1_0.quantity,
        i1_0.type,
        i1_0.version 
    from
        basket_item i1_0 
    where
        i1_0.basket_id=?
2025-01-29 13:24:25 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        basket_item
        (basket_id, image, item_id, name, price, quantity, type, version) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 13:24:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:24:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:24:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        b1_0.id,
        b1_0.user_id 
    from
        basket b1_0 
    left join
        users u1_0 
            on u1_0.id=b1_0.user_id 
    where
        u1_0.id=?
2025-01-29 13:24:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.article,
        m1_0.description,
        m1_0.price,
        m1_0.price_overall,
        m1_0.quantity,
        m1_0.size,
        m1_0.title,
        m1_0.user_id 
    from
        moulding m1_0 
    where
        m1_0.id=?
2025-01-29 13:24:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 13:24:29 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.basket_id,
        i1_0.id,
        i1_0.image,
        i1_0.item_id,
        i1_0.name,
        i1_0.price,
        i1_0.quantity,
        i1_0.type,
        i1_0.version 
    from
        basket_item i1_0 
    where
        i1_0.basket_id=?
2025-01-29 13:24:29 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        basket_item
        (basket_id, image, item_id, name, price, quantity, type, version) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 13:24:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:24:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 13:24:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        b1_0.id,
        b1_0.user_id 
    from
        basket b1_0 
    left join
        users u1_0 
            on u1_0.id=b1_0.user_id 
    where
        u1_0.id=?
2025-01-29 13:24:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        bi1_0.id,
        bi1_0.basket_id,
        bi1_0.image,
        bi1_0.item_id,
        bi1_0.name,
        bi1_0.price,
        bi1_0.quantity,
        bi1_0.type,
        bi1_0.version 
    from
        basket_item bi1_0 
    where
        bi1_0.id in (?, ?)
2025-01-29 13:24:56 [http-nio-8080-exec-4] INFO  uz.pdp.service.BasketService - Processing checkout for 2 items, total amount: $278.79
2025-01-29 13:24:56 [http-nio-8080-exec-4] INFO  uz.pdp.service.BasketService - Successfully checked out 2 items from basket 1
2025-01-29 13:24:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        basket_item 
    where
        id=? 
        and version=?
2025-01-29 13:24:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        basket_item 
    where
        id=? 
        and version=?
2025-01-29 13:25:19 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 13:25:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 13:25:20 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 15:03:31 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 153653 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 15:03:31 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 15:03:31 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 15:03:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:03:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 15:03:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 134 ms. Found 13 JPA repository interfaces.
2025-01-29 15:03:33 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:03:33 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 15:03:33 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-01-29 15:03:33 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 15:03:34 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 15:03:34 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 15:03:34 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 15:03:34 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 15:03:34 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2367 ms
2025-01-29 15:03:34 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 15:03:34 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 15:03:34 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 15:03:35 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 15:03:35 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 15:03:37 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@15ade272
2025-01-29 15:03:37 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 15:03:38 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 15:03:39 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 15:03:40 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 15:03:41 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 15:03:59 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:04:01 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 15:04:03 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 15:04:03 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 15:04:03 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 15:04:03 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 15:04:04 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 15:04:04 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 15:04:04 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@653dbf34, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1573ee1b, org.springframework.security.web.context.SecurityContextHolderFilter@421f392e, org.springframework.security.web.header.HeaderWriterFilter@7f3ca861, org.springframework.web.filter.CorsFilter@768f4c02, org.springframework.security.web.authentication.logout.LogoutFilter@6d648bd7, uz.pdp.config.filtr.MyFilter@374ba492, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@2e9680e2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@350b3c06, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@ff75e38, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@76264392, org.springframework.security.web.access.ExceptionTranslationFilter@400882d9, org.springframework.security.web.access.intercept.AuthorizationFilter@2c9403ae]
2025-01-29 15:04:05 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 15:04:05 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 34.041 seconds (process running for 34.636)
2025-01-29 15:04:05 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:04:06 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 15:04:07 [RMI TCP Connection(5)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 15:04:07 [RMI TCP Connection(5)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 15:04:07 [RMI TCP Connection(5)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 6 ms
2025-01-29 15:04:10 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 1113 ms
2025-01-29 15:04:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:04:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:04:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        b1_0.id,
        b1_0.user_id 
    from
        basket b1_0 
    left join
        users u1_0 
            on u1_0.id=b1_0.user_id 
    where
        u1_0.id=?
2025-01-29 15:04:26 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.basket_id,
        i1_0.id,
        i1_0.image,
        i1_0.item_id,
        i1_0.name,
        i1_0.price,
        i1_0.quantity,
        i1_0.type,
        i1_0.version 
    from
        basket_item i1_0 
    where
        i1_0.basket_id=?
2025-01-29 15:17:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:17:25 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:17:25 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        b1_0.id,
        b1_0.user_id 
    from
        basket b1_0 
    left join
        users u1_0 
            on u1_0.id=b1_0.user_id 
    where
        u1_0.id=?
2025-01-29 15:17:26 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.basket_id,
        i1_0.id,
        i1_0.image,
        i1_0.item_id,
        i1_0.name,
        i1_0.price,
        i1_0.quantity,
        i1_0.type,
        i1_0.version 
    from
        basket_item i1_0 
    where
        i1_0.basket_id=?
2025-01-29 15:18:38 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:18:38 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 15:18:39 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 15:25:45 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 260765 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 15:25:45 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 15:25:45 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 15:25:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:25:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 15:25:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 97 ms. Found 13 JPA repository interfaces.
2025-01-29 15:25:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:25:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 15:25:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-29 15:25:47 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 15:25:47 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 15:25:47 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 15:25:47 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 15:25:47 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 15:25:47 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1854 ms
2025-01-29 15:25:47 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 15:25:47 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 15:25:47 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 15:25:48 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 15:25:48 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 15:25:50 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1ae26c59
2025-01-29 15:25:50 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 15:25:51 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 15:25:52 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 15:25:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 15:25:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 15:26:13 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:26:13 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 15:26:16 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 15:26:16 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 15:26:16 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 15:26:16 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 15:26:17 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 15:26:17 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 15:26:17 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@509d77ee, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5be2850c, org.springframework.security.web.context.SecurityContextHolderFilter@ccae68f, org.springframework.security.web.header.HeaderWriterFilter@75001f9f, org.springframework.web.filter.CorsFilter@2c59de30, org.springframework.security.web.authentication.logout.LogoutFilter@28a9f2b8, uz.pdp.config.filtr.MyFilter@6a562255, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@436b4a36, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2e4d24d6, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@768f4c02, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@11aafd0f, org.springframework.security.web.access.ExceptionTranslationFilter@3b678480, org.springframework.security.web.access.intercept.AuthorizationFilter@61df4db7]
2025-01-29 15:26:19 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 15:26:19 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 34.345 seconds (process running for 34.748)
2025-01-29 15:26:19 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:26:20 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 15:26:20 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 15:26:21 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 15:26:22 [RMI TCP Connection(3)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 15:26:22 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 15:26:22 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 5 ms
2025-01-29 15:26:40 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 1241 ms
2025-01-29 15:27:03 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:27:03 [http-nio-8080-exec-6] INFO  uz.pdp.controller.ContactController - Fetching store addresses for user: etadoor
2025-01-29 15:27:03 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:27:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.city,
        a1_0.email,
        a1_0.is_default,
        a1_0.location_id,
        a1_0.name,
        a1_0.phone_number,
        a1_0.street,
        a1_0.user_id,
        a1_0.working_hours 
    from
        addresses a1_0
2025-01-29 15:27:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        l1_0.id,
        a1_0.id,
        a1_0.city,
        a1_0.email,
        a1_0.is_default,
        a1_0.name,
        a1_0.phone_number,
        a1_0.street,
        a1_0.user_id,
        a1_0.working_hours,
        l1_0.latitude,
        l1_0.longitude,
        l1_0.marker_title 
    from
        locations l1_0 
    left join
        addresses a1_0 
            on l1_0.id=a1_0.location_id 
    where
        l1_0.id=?
2025-01-29 15:27:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        l1_0.id,
        a1_0.id,
        a1_0.city,
        a1_0.email,
        a1_0.is_default,
        a1_0.name,
        a1_0.phone_number,
        a1_0.street,
        a1_0.user_id,
        a1_0.working_hours,
        l1_0.latitude,
        l1_0.longitude,
        l1_0.marker_title 
    from
        locations l1_0 
    left join
        addresses a1_0 
            on l1_0.id=a1_0.location_id 
    where
        l1_0.id=?
2025-01-29 15:27:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        l1_0.id,
        a1_0.id,
        a1_0.city,
        a1_0.email,
        a1_0.is_default,
        a1_0.name,
        a1_0.phone_number,
        a1_0.street,
        a1_0.user_id,
        a1_0.working_hours,
        l1_0.latitude,
        l1_0.longitude,
        l1_0.marker_title 
    from
        locations l1_0 
    left join
        addresses a1_0 
            on l1_0.id=a1_0.location_id 
    where
        l1_0.id=?
2025-01-29 15:27:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        l1_0.id,
        a1_0.id,
        a1_0.city,
        a1_0.email,
        a1_0.is_default,
        a1_0.name,
        a1_0.phone_number,
        a1_0.street,
        a1_0.user_id,
        a1_0.working_hours,
        l1_0.latitude,
        l1_0.longitude,
        l1_0.marker_title 
    from
        locations l1_0 
    left join
        addresses a1_0 
            on l1_0.id=a1_0.location_id 
    where
        l1_0.id=?
2025-01-29 15:27:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        l1_0.id,
        a1_0.id,
        a1_0.city,
        a1_0.email,
        a1_0.is_default,
        a1_0.name,
        a1_0.phone_number,
        a1_0.street,
        a1_0.user_id,
        a1_0.working_hours,
        l1_0.latitude,
        l1_0.longitude,
        l1_0.marker_title 
    from
        locations l1_0 
    left join
        addresses a1_0 
            on l1_0.id=a1_0.location_id 
    where
        l1_0.id=?
2025-01-29 15:27:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        l1_0.id,
        a1_0.id,
        a1_0.city,
        a1_0.email,
        a1_0.is_default,
        a1_0.name,
        a1_0.phone_number,
        a1_0.street,
        a1_0.user_id,
        a1_0.working_hours,
        l1_0.latitude,
        l1_0.longitude,
        l1_0.marker_title 
    from
        locations l1_0 
    left join
        addresses a1_0 
            on l1_0.id=a1_0.location_id 
    where
        l1_0.id=?
2025-01-29 15:27:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        l1_0.id,
        a1_0.id,
        a1_0.city,
        a1_0.email,
        a1_0.is_default,
        a1_0.name,
        a1_0.phone_number,
        a1_0.street,
        a1_0.user_id,
        a1_0.working_hours,
        l1_0.latitude,
        l1_0.longitude,
        l1_0.marker_title 
    from
        locations l1_0 
    left join
        addresses a1_0 
            on l1_0.id=a1_0.location_id 
    where
        l1_0.id=?
2025-01-29 15:27:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        l1_0.id,
        a1_0.id,
        a1_0.city,
        a1_0.email,
        a1_0.is_default,
        a1_0.name,
        a1_0.phone_number,
        a1_0.street,
        a1_0.user_id,
        a1_0.working_hours,
        l1_0.latitude,
        l1_0.longitude,
        l1_0.marker_title 
    from
        locations l1_0 
    left join
        addresses a1_0 
            on l1_0.id=a1_0.location_id 
    where
        l1_0.id=?
2025-01-29 15:27:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        l1_0.id,
        a1_0.id,
        a1_0.city,
        a1_0.email,
        a1_0.is_default,
        a1_0.name,
        a1_0.phone_number,
        a1_0.street,
        a1_0.user_id,
        a1_0.working_hours,
        l1_0.latitude,
        l1_0.longitude,
        l1_0.marker_title 
    from
        locations l1_0 
    left join
        addresses a1_0 
            on l1_0.id=a1_0.location_id 
    where
        l1_0.id=?
2025-01-29 15:27:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        l1_0.id,
        a1_0.id,
        a1_0.city,
        a1_0.email,
        a1_0.is_default,
        a1_0.name,
        a1_0.phone_number,
        a1_0.street,
        a1_0.user_id,
        a1_0.working_hours,
        l1_0.latitude,
        l1_0.longitude,
        l1_0.marker_title 
    from
        locations l1_0 
    left join
        addresses a1_0 
            on l1_0.id=a1_0.location_id 
    where
        l1_0.id=?
2025-01-29 15:27:07 [http-nio-8080-exec-6] INFO  uz.pdp.service.AddressService - Admin user retrieved all 10 addresses
2025-01-29 15:27:07 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        sl1_0.address_id,
        sl1_0.social_type,
        sl1_0.link 
    from
        address_social_links sl1_0 
    where
        sl1_0.address_id=?
2025-01-29 15:27:07 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        sl1_0.address_id,
        sl1_0.social_type,
        sl1_0.link 
    from
        address_social_links sl1_0 
    where
        sl1_0.address_id=?
2025-01-29 15:27:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        sl1_0.address_id,
        sl1_0.social_type,
        sl1_0.link 
    from
        address_social_links sl1_0 
    where
        sl1_0.address_id=?
2025-01-29 15:27:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        sl1_0.address_id,
        sl1_0.social_type,
        sl1_0.link 
    from
        address_social_links sl1_0 
    where
        sl1_0.address_id=?
2025-01-29 15:27:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        sl1_0.address_id,
        sl1_0.social_type,
        sl1_0.link 
    from
        address_social_links sl1_0 
    where
        sl1_0.address_id=?
2025-01-29 15:27:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        sl1_0.address_id,
        sl1_0.social_type,
        sl1_0.link 
    from
        address_social_links sl1_0 
    where
        sl1_0.address_id=?
2025-01-29 15:27:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        sl1_0.address_id,
        sl1_0.social_type,
        sl1_0.link 
    from
        address_social_links sl1_0 
    where
        sl1_0.address_id=?
2025-01-29 15:27:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        sl1_0.address_id,
        sl1_0.social_type,
        sl1_0.link 
    from
        address_social_links sl1_0 
    where
        sl1_0.address_id=?
2025-01-29 15:27:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        sl1_0.address_id,
        sl1_0.social_type,
        sl1_0.link 
    from
        address_social_links sl1_0 
    where
        sl1_0.address_id=?
2025-01-29 15:27:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        sl1_0.address_id,
        sl1_0.social_type,
        sl1_0.link 
    from
        address_social_links sl1_0 
    where
        sl1_0.address_id=?
2025-01-29 15:27:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:27:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.active
2025-01-29 15:27:32 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:27:32 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 15:27:33 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 15:27:35 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 270182 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 15:27:35 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 15:27:35 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 15:27:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:27:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 15:27:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 94 ms. Found 13 JPA repository interfaces.
2025-01-29 15:27:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:27:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 15:27:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-01-29 15:27:37 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 15:27:37 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 15:27:37 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 15:27:37 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 15:27:37 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 15:27:37 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1861 ms
2025-01-29 15:27:37 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 15:27:37 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 15:27:37 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 15:27:37 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 15:27:37 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 15:27:40 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@15ade272
2025-01-29 15:27:40 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 15:27:40 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 15:27:41 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 15:27:41 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-29 15:27:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-29 15:27:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-29 15:27:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       drop constraint if exists FK810a8gq30miyp6j1eub97qm6k
2025-01-29 15:27:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       drop constraint if exists FKara19f2xv7ml3a24f50v6bsk2
2025-01-29 15:27:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-29 15:27:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-29 15:27:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-29 15:27:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-29 15:27:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-29 15:27:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-29 15:27:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-29 15:27:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-29 15:27:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-29 15:27:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-29 15:27:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-29 15:27:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       drop constraint if exists FKkieeklwkgvfbf39kekutcssax
2025-01-29 15:27:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       drop constraint if exists FKgtkn0xv5nd1nfc0qd8vjfxxlx
2025-01-29 15:27:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-29 15:27:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-29 15:27:47 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-29 15:27:48 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-29 15:27:48 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket cascade
2025-01-29 15:27:48 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_item cascade
2025-01-29 15:27:48 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade
2025-01-29 15:27:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-29 15:27:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-29 15:27:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-29 15:27:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_available_colors cascade
2025-01-29 15:27:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-29 15:27:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-29 15:27:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-29 15:27:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-29 15:27:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-29 15:27:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-29 15:27:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-29 15:27:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding cascade
2025-01-29 15:27:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding_images cascade
2025-01-29 15:27:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-29 15:27:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-29 15:27:53 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-29 15:27:53 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-29 15:27:53 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-29 15:27:54 [main] DEBUG org.hibernate.SQL - 
    create table basket (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-29 15:27:54 [main] DEBUG org.hibernate.SQL - 
    create table basket_item (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version bigint not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')),
        primary key (id)
    )
2025-01-29 15:27:54 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        active boolean not null,
        id bigserial not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-29 15:27:54 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-29 15:27:55 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-29 15:27:55 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-29 15:27:55 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM'))
    )
2025-01-29 15:27:55 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-29 15:27:56 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-29 15:27:56 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_base_model boolean,
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        base_model_id bigint,
        category_id bigint,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')),
        custom_color_code varchar(255),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-29 15:27:56 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-29 15:27:56 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-29 15:27:57 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-29 15:27:57 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-29 15:27:57 [main] DEBUG org.hibernate.SQL - 
    create table moulding (
        price DECIMAL(10,2) not null,
        price_overall DECIMAL(10,2),
        quantity integer not null,
        id bigserial not null,
        user_id bigint not null,
        title varchar(100) not null,
        description varchar(1000),
        article varchar(255) not null unique,
        size varchar(255) not null,
        primary key (id)
    )
2025-01-29 15:27:58 [main] DEBUG org.hibernate.SQL - 
    create table moulding_images (
        moulding_id bigint not null,
        image_url varchar(255)
    )
2025-01-29 15:27:58 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-29 15:27:59 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-29 15:27:59 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-29 15:27:59 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-29 15:27:59 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-29 15:28:00 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-29 15:28:00 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-29 15:28:00 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-29 15:28:00 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-29 15:28:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-29 15:28:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-29 15:28:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-29 15:28:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-29 15:28:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-29 15:28:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-29 15:28:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-29 15:28:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-29 15:28:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-29 15:28:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint FK810a8gq30miyp6j1eub97qm6k 
       foreign key (user_id) 
       references users
2025-01-29 15:28:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       add constraint FKara19f2xv7ml3a24f50v6bsk2 
       foreign key (basket_id) 
       references basket
2025-01-29 15:28:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-29 15:28:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-29 15:28:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-29 15:28:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-29 15:28:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-29 15:28:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-29 15:28:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-29 15:28:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-29 15:28:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-29 15:28:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-29 15:28:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-29 15:28:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       add constraint FKkieeklwkgvfbf39kekutcssax 
       foreign key (user_id) 
       references users
2025-01-29 15:28:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       add constraint FKgtkn0xv5nd1nfc0qd8vjfxxlx 
       foreign key (moulding_id) 
       references moulding
2025-01-29 15:28:08 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-29 15:28:08 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-29 15:28:08 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:28:09 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 15:28:11 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 15:28:12 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 15:28:12 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 15:28:12 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 15:28:12 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 15:28:12 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 15:28:12 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@50cc77f0, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4cd979f9, org.springframework.security.web.context.SecurityContextHolderFilter@70161ca1, org.springframework.security.web.header.HeaderWriterFilter@5365c33b, org.springframework.web.filter.CorsFilter@3d76a548, org.springframework.security.web.authentication.logout.LogoutFilter@2de7efef, uz.pdp.config.filtr.MyFilter@581d5b33, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@712c8e89, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@38bbeba1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4351e452, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@37b45722, org.springframework.security.web.access.ExceptionTranslationFilter@2f7e303e, org.springframework.security.web.access.intercept.AuthorizationFilter@3ab99b86]
2025-01-29 15:28:13 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 15:28:13 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 38.633 seconds (process running for 39.038)
2025-01-29 15:28:13 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:28:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:28:14 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 15:28:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:28:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:28:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:28:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:28:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:28:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:28:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:28:17 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 15:28:18 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:28:18 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:28:18 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:28:18 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:28:19 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:28:19 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.role=?
2025-01-29 15:28:19 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-29 15:28:19 [main] ERROR o.s.boot.SpringApplication - Application run failed
jakarta.validation.ConstraintViolationException: Validation failed for classes [uz.pdp.entity.User] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='Phone number is required', propertyPath=phone, rootBeanClass=class uz.pdp.entity.User, messageTemplate='Phone number is required'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:758)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy2/jdk.proxy2.$Proxy210.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:249)
	at jdk.proxy2/jdk.proxy2.$Proxy226.save(Unknown Source)
	at uz.pdp.config.DataInitializer.lambda$createDefaultDoors$2(DataInitializer.java:743)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at uz.pdp.config.DataInitializer.createDefaultDoors(DataInitializer.java:737)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:158)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:798)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:806)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:797)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:782)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:782)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
2025-01-29 15:28:19 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:28:19 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 15:28:21 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 15:28:35 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 275691 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 15:28:35 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 15:28:35 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 15:28:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:28:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 15:28:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 86 ms. Found 13 JPA repository interfaces.
2025-01-29 15:28:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:28:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 15:28:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-01-29 15:28:37 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 15:28:37 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 15:28:37 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1749 ms
2025-01-29 15:28:37 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 15:28:37 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 15:28:37 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 15:28:38 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 15:28:38 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 15:28:43 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 276130 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 15:28:43 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 15:28:43 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 15:28:43 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:28:43 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 15:28:43 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 80 ms. Found 13 JPA repository interfaces.
2025-01-29 15:28:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:28:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 15:28:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-29 15:28:44 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 15:28:44 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 15:28:44 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 15:28:44 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 15:28:44 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 15:28:44 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1647 ms
2025-01-29 15:28:45 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 15:28:45 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 15:28:45 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 15:28:45 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 15:28:45 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 15:28:47 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@47a90d2a
2025-01-29 15:28:47 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 15:28:48 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 15:28:49 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 15:28:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-29 15:28:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-29 15:28:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-29 15:28:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       drop constraint if exists FK810a8gq30miyp6j1eub97qm6k
2025-01-29 15:28:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       drop constraint if exists FKara19f2xv7ml3a24f50v6bsk2
2025-01-29 15:28:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-29 15:28:51 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-29 15:28:51 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-29 15:28:51 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-29 15:28:51 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-29 15:28:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-29 15:28:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-29 15:28:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-29 15:28:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-29 15:28:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-29 15:28:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-29 15:28:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       drop constraint if exists FKkieeklwkgvfbf39kekutcssax
2025-01-29 15:28:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       drop constraint if exists FKgtkn0xv5nd1nfc0qd8vjfxxlx
2025-01-29 15:28:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-29 15:28:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-29 15:28:54 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-29 15:28:55 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-29 15:28:55 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket cascade
2025-01-29 15:28:55 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_item cascade
2025-01-29 15:28:55 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade
2025-01-29 15:28:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-29 15:28:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-29 15:28:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-29 15:28:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_available_colors cascade
2025-01-29 15:28:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-29 15:28:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-29 15:28:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-29 15:28:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-29 15:28:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-29 15:28:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-29 15:28:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-29 15:28:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding cascade
2025-01-29 15:28:59 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding_images cascade
2025-01-29 15:28:59 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-29 15:28:59 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-29 15:29:00 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-29 15:29:00 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-29 15:29:00 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-29 15:29:00 [main] DEBUG org.hibernate.SQL - 
    create table basket (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-29 15:29:01 [main] DEBUG org.hibernate.SQL - 
    create table basket_item (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version bigint not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')),
        primary key (id)
    )
2025-01-29 15:29:01 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        active boolean not null,
        id bigserial not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-29 15:29:01 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-29 15:29:01 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-29 15:29:02 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-29 15:29:02 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM'))
    )
2025-01-29 15:29:02 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-29 15:29:03 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-29 15:29:03 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_base_model boolean,
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        base_model_id bigint,
        category_id bigint,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')),
        custom_color_code varchar(255),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-29 15:29:03 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-29 15:29:03 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-29 15:29:04 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-29 15:29:04 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-29 15:29:04 [main] DEBUG org.hibernate.SQL - 
    create table moulding (
        price DECIMAL(10,2) not null,
        price_overall DECIMAL(10,2),
        quantity integer not null,
        id bigserial not null,
        user_id bigint not null,
        title varchar(100) not null,
        description varchar(1000),
        article varchar(255) not null unique,
        size varchar(255) not null,
        primary key (id)
    )
2025-01-29 15:29:04 [main] DEBUG org.hibernate.SQL - 
    create table moulding_images (
        moulding_id bigint not null,
        image_url varchar(255)
    )
2025-01-29 15:29:05 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-29 15:29:05 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-29 15:29:05 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-29 15:29:06 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-29 15:29:06 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-29 15:29:06 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-29 15:29:06 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-29 15:29:07 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-29 15:29:07 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-29 15:29:07 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-29 15:29:08 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-29 15:29:08 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-29 15:29:08 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-29 15:29:08 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-29 15:29:09 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-29 15:29:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-29 15:29:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-29 15:29:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-29 15:29:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint FK810a8gq30miyp6j1eub97qm6k 
       foreign key (user_id) 
       references users
2025-01-29 15:29:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       add constraint FKara19f2xv7ml3a24f50v6bsk2 
       foreign key (basket_id) 
       references basket
2025-01-29 15:29:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-29 15:29:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-29 15:29:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-29 15:29:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-29 15:29:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-29 15:29:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-29 15:29:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-29 15:29:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-29 15:29:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-29 15:29:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-29 15:29:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-29 15:29:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       add constraint FKkieeklwkgvfbf39kekutcssax 
       foreign key (user_id) 
       references users
2025-01-29 15:29:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       add constraint FKgtkn0xv5nd1nfc0qd8vjfxxlx 
       foreign key (moulding_id) 
       references moulding
2025-01-29 15:29:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-29 15:29:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-29 15:29:14 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:29:15 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 15:29:17 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 15:29:18 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 15:29:18 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 15:29:18 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 15:29:18 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 15:29:18 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 15:29:18 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1fe8b5ec, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5dcd1bc2, org.springframework.security.web.context.SecurityContextHolderFilter@4a78a61b, org.springframework.security.web.header.HeaderWriterFilter@2bd3faf0, org.springframework.web.filter.CorsFilter@6fc36160, org.springframework.security.web.authentication.logout.LogoutFilter@1ee7e8a4, uz.pdp.config.filtr.MyFilter@2e1e7bc6, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@607057b8, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@42edcb56, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5658d44c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3fa603df, org.springframework.security.web.access.ExceptionTranslationFilter@66c4bbff, org.springframework.security.web.access.intercept.AuthorizationFilter@7c53390f]
2025-01-29 15:29:19 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 15:29:19 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 37.131 seconds (process running for 37.589)
2025-01-29 15:29:19 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:29:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:29:21 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 15:29:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:29:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:29:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:29:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:29:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:29:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:29:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:29:23 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 15:29:24 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:29:24 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:29:24 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:29:25 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:29:25 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:29:25 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.role=?
2025-01-29 15:29:26 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-29 15:29:26 [main] ERROR o.s.boot.SpringApplication - Application run failed
jakarta.validation.ConstraintViolationException: Validation failed for classes [uz.pdp.entity.User] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='Phone number is required', propertyPath=phone, rootBeanClass=class uz.pdp.entity.User, messageTemplate='Phone number is required'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:758)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy2/jdk.proxy2.$Proxy210.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:249)
	at jdk.proxy2/jdk.proxy2.$Proxy226.save(Unknown Source)
	at uz.pdp.config.DataInitializer.lambda$createDefaultDoors$2(DataInitializer.java:743)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at uz.pdp.config.DataInitializer.createDefaultDoors(DataInitializer.java:737)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:158)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:798)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:806)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:797)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:782)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:782)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
2025-01-29 15:29:26 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:29:26 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 15:29:27 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 15:30:10 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 283669 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 15:30:10 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 15:30:10 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 15:30:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:30:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 15:30:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 106 ms. Found 13 JPA repository interfaces.
2025-01-29 15:30:12 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:30:12 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 15:30:12 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-29 15:30:12 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 15:30:12 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 15:30:12 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1949 ms
2025-01-29 15:30:13 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 15:30:13 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 15:30:13 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 15:30:13 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 15:30:13 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 15:30:16 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 284107 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 15:30:16 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 15:30:16 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 15:30:16 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:30:16 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 15:30:16 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 82 ms. Found 13 JPA repository interfaces.
2025-01-29 15:30:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:30:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 15:30:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-29 15:30:17 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 15:30:17 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 15:30:17 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 15:30:17 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 15:30:17 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 15:30:17 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1706 ms
2025-01-29 15:30:18 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 15:30:18 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 15:30:18 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 15:30:18 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 15:30:18 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 15:30:21 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1d82d35c
2025-01-29 15:30:21 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 15:30:21 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 15:30:23 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 15:30:23 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-29 15:30:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-29 15:30:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-29 15:30:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       drop constraint if exists FK810a8gq30miyp6j1eub97qm6k
2025-01-29 15:30:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       drop constraint if exists FKara19f2xv7ml3a24f50v6bsk2
2025-01-29 15:30:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-29 15:30:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-29 15:30:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-29 15:30:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-29 15:30:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-29 15:30:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-29 15:30:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-29 15:30:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-29 15:30:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-29 15:30:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-29 15:30:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-29 15:30:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       drop constraint if exists FKkieeklwkgvfbf39kekutcssax
2025-01-29 15:30:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       drop constraint if exists FKgtkn0xv5nd1nfc0qd8vjfxxlx
2025-01-29 15:30:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-29 15:30:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-29 15:30:29 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-29 15:30:29 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-29 15:30:30 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket cascade
2025-01-29 15:30:30 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_item cascade
2025-01-29 15:30:30 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade
2025-01-29 15:30:30 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-29 15:30:31 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-29 15:30:31 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-29 15:30:31 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_available_colors cascade
2025-01-29 15:30:32 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-29 15:30:32 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-29 15:30:32 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-29 15:30:33 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-29 15:30:33 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-29 15:30:33 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-29 15:30:33 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-29 15:30:34 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding cascade
2025-01-29 15:30:34 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding_images cascade
2025-01-29 15:30:34 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-29 15:30:34 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-29 15:30:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-29 15:30:35 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-29 15:30:35 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-29 15:30:36 [main] DEBUG org.hibernate.SQL - 
    create table basket (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-29 15:30:36 [main] DEBUG org.hibernate.SQL - 
    create table basket_item (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version bigint not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')),
        primary key (id)
    )
2025-01-29 15:30:36 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        active boolean not null,
        id bigserial not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-29 15:30:37 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-29 15:30:37 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-29 15:30:37 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-29 15:30:38 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM'))
    )
2025-01-29 15:30:38 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-29 15:30:38 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-29 15:30:39 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_base_model boolean,
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        base_model_id bigint,
        category_id bigint,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')),
        custom_color_code varchar(255),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-29 15:30:39 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-29 15:30:39 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-29 15:30:39 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-29 15:30:40 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-29 15:30:40 [main] DEBUG org.hibernate.SQL - 
    create table moulding (
        price DECIMAL(10,2) not null,
        price_overall DECIMAL(10,2),
        quantity integer not null,
        id bigserial not null,
        user_id bigint not null,
        title varchar(100) not null,
        description varchar(1000),
        article varchar(255) not null unique,
        size varchar(255) not null,
        primary key (id)
    )
2025-01-29 15:30:40 [main] DEBUG org.hibernate.SQL - 
    create table moulding_images (
        moulding_id bigint not null,
        image_url varchar(255)
    )
2025-01-29 15:30:40 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-29 15:30:41 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-29 15:30:41 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-29 15:30:41 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-29 15:30:42 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-29 15:30:42 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-29 15:30:42 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-29 15:30:42 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-29 15:30:43 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-29 15:30:43 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-29 15:30:43 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-29 15:30:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-29 15:30:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-29 15:30:44 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-29 15:30:45 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-29 15:30:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-29 15:30:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-29 15:30:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-29 15:30:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint FK810a8gq30miyp6j1eub97qm6k 
       foreign key (user_id) 
       references users
2025-01-29 15:30:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       add constraint FKara19f2xv7ml3a24f50v6bsk2 
       foreign key (basket_id) 
       references basket
2025-01-29 15:30:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-29 15:30:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-29 15:30:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-29 15:30:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-29 15:30:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-29 15:30:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-29 15:30:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-29 15:30:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-29 15:30:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-29 15:30:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-29 15:30:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-29 15:30:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       add constraint FKkieeklwkgvfbf39kekutcssax 
       foreign key (user_id) 
       references users
2025-01-29 15:30:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       add constraint FKgtkn0xv5nd1nfc0qd8vjfxxlx 
       foreign key (moulding_id) 
       references moulding
2025-01-29 15:30:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-29 15:30:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-29 15:30:50 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:30:51 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 15:30:53 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 15:30:54 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 15:30:54 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 15:30:54 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 15:30:54 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 15:30:54 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 15:30:54 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@30057fbe, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@439aa007, org.springframework.security.web.context.SecurityContextHolderFilter@4adf6a2, org.springframework.security.web.header.HeaderWriterFilter@57f648a7, org.springframework.web.filter.CorsFilter@296f614c, org.springframework.security.web.authentication.logout.LogoutFilter@4050b1ba, uz.pdp.config.filtr.MyFilter@4c3d72fd, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@2b1e626, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@11c1f62d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@25d2edc6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5c2d5596, org.springframework.security.web.access.ExceptionTranslationFilter@48b5e658, org.springframework.security.web.access.intercept.AuthorizationFilter@8601ff7]
2025-01-29 15:30:55 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 15:30:55 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 40.105 seconds (process running for 40.449)
2025-01-29 15:30:55 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:30:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:30:57 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 15:30:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:30:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:30:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:30:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:30:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:30:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:30:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:31:00 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 15:31:00 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:31:00 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:31:01 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:31:01 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:31:01 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:31:02 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.role=?
2025-01-29 15:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:31:08 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 15:31:09 [RMI TCP Connection(1)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 15:31:09 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 15:31:09 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-01-29 15:31:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:31:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.active
2025-01-29 15:31:24 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:31:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.id=?
2025-01-29 15:31:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:31:34 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.id=?
2025-01-29 15:31:34 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        categories 
    set
        active=?,
        name=? 
    where
        id=?
2025-01-29 15:31:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:31:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.active
2025-01-29 15:31:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:31:54 [http-nio-8080-exec-9] ERROR u.p.exception.GlobalExceptionHandler - Validation exception occurred: name: Category name cannot be empty
2025-01-29 15:32:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:32:05 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.id=?
2025-01-29 15:32:05 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        upper(c1_0.name)=upper(?)
2025-01-29 15:32:05 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    update
        categories 
    set
        active=?,
        name=? 
    where
        id=?
2025-01-29 15:34:40 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:34:40 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 15:34:41 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 15:34:44 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 305634 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 15:34:44 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 15:34:44 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 15:34:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:34:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 15:34:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 87 ms. Found 13 JPA repository interfaces.
2025-01-29 15:34:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:34:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 15:34:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-29 15:34:45 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 15:34:46 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 15:34:46 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 15:34:46 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 15:34:46 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 15:34:46 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1905 ms
2025-01-29 15:34:46 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 15:34:46 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 15:34:46 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 15:34:46 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 15:34:46 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 15:34:49 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1cb7f2fe
2025-01-29 15:34:49 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 15:34:50 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 15:34:51 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 15:34:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 15:34:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 15:34:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists idx_user_email
2025-01-29 15:34:54 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-29 15:34:54 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_user_email" of relation "users" does not exist, skipping
2025-01-29 15:34:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint idx_user_email unique (email)
2025-01-29 15:35:13 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:35:14 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 15:35:16 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 15:35:16 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 15:35:16 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 15:35:16 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 15:35:17 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 15:35:17 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 15:35:17 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@28a9f2b8, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@11d93a62, org.springframework.security.web.context.SecurityContextHolderFilter@58aa9ca5, org.springframework.security.web.header.HeaderWriterFilter@49007cbe, org.springframework.web.filter.CorsFilter@33c5fd44, org.springframework.security.web.authentication.logout.LogoutFilter@7f654df6, uz.pdp.config.filtr.MyFilter@640a6d4b, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@458ab796, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2a2c0559, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@62c42bc0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4351e452, org.springframework.security.web.access.ExceptionTranslationFilter@28d28e0d, org.springframework.security.web.access.intercept.AuthorizationFilter@613e88a4]
2025-01-29 15:35:18 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 15:35:18 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 34.481 seconds (process running for 34.836)
2025-01-29 15:35:18 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:35:18 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 15:35:19 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 15:35:20 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 15:35:21 [RMI TCP Connection(4)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 15:35:21 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 15:35:21 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-29 15:54:41 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:54:41 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 15:54:42 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 15:54:44 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 399620 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 15:54:44 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 15:54:44 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 15:54:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:54:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 15:54:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 119 ms. Found 13 JPA repository interfaces.
2025-01-29 15:54:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:54:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 15:54:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-29 15:54:46 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 15:54:46 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 15:54:46 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 15:54:46 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 15:54:46 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 15:54:46 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2034 ms
2025-01-29 15:54:47 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 15:54:47 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 15:54:47 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 15:54:47 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 15:54:47 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 15:54:50 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@43fdef43
2025-01-29 15:54:50 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 15:54:50 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 15:54:51 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 15:54:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 15:54:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 15:55:12 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:55:13 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 15:55:16 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 15:55:16 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 15:55:16 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 15:55:16 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 15:55:17 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 15:55:17 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 15:55:17 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2ca5d640, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3fc3adea, org.springframework.security.web.context.SecurityContextHolderFilter@5973d4c8, org.springframework.security.web.header.HeaderWriterFilter@65db569d, org.springframework.web.filter.CorsFilter@1c2a2d71, org.springframework.security.web.authentication.logout.LogoutFilter@50ce30a, uz.pdp.config.filtr.MyFilter@73c09a98, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@234e2652, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@26b6fc1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2d46b2c3, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@458ab796, org.springframework.security.web.access.ExceptionTranslationFilter@22b5f4d, org.springframework.security.web.access.intercept.AuthorizationFilter@57aaf079]
2025-01-29 15:55:18 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 15:55:18 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 34.325 seconds (process running for 34.957)
2025-01-29 15:55:18 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:55:19 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 15:55:19 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 15:55:20 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 15:55:21 [RMI TCP Connection(4)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 15:55:21 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 15:55:21 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-29 15:55:24 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:55:24 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-29 15:55:34 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:55:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-29 15:55:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(fd1_0.id) 
    from
        furniture_doors fd1_0
2025-01-29 15:55:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:55:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-29 15:57:07 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:57:07 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-29 15:58:31 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:58:31 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 15:58:33 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 15:58:34 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 418039 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 15:58:34 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 15:58:34 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 15:58:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:58:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 15:58:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 92 ms. Found 13 JPA repository interfaces.
2025-01-29 15:58:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 15:58:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 15:58:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-29 15:58:36 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 15:58:36 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 15:58:36 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 15:58:36 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 15:58:36 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 15:58:36 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1935 ms
2025-01-29 15:58:37 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 15:58:37 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 15:58:37 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 15:58:37 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 15:58:37 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 15:58:40 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@2f006edf
2025-01-29 15:58:40 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 15:58:40 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 15:58:41 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 15:58:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-29 15:58:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-29 15:58:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-29 15:58:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       drop constraint if exists FK810a8gq30miyp6j1eub97qm6k
2025-01-29 15:58:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       drop constraint if exists FKara19f2xv7ml3a24f50v6bsk2
2025-01-29 15:58:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-29 15:58:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-29 15:58:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-29 15:58:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-29 15:58:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-29 15:58:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-29 15:58:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-29 15:58:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-29 15:58:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-29 15:58:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-29 15:58:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-29 15:58:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       drop constraint if exists FKkieeklwkgvfbf39kekutcssax
2025-01-29 15:58:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       drop constraint if exists FKgtkn0xv5nd1nfc0qd8vjfxxlx
2025-01-29 15:58:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-29 15:58:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-29 15:58:47 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-29 15:58:47 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-29 15:58:47 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket cascade
2025-01-29 15:58:48 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_item cascade
2025-01-29 15:58:48 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade
2025-01-29 15:58:48 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-29 15:58:48 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-29 15:58:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-29 15:58:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_available_colors cascade
2025-01-29 15:58:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-29 15:58:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-29 15:58:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-29 15:58:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-29 15:58:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-29 15:58:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-29 15:58:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-29 15:58:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding cascade
2025-01-29 15:58:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding_images cascade
2025-01-29 15:58:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-29 15:58:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-29 15:58:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-29 15:58:53 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-29 15:58:53 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-29 15:58:53 [main] DEBUG org.hibernate.SQL - 
    create table basket (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-29 15:58:53 [main] DEBUG org.hibernate.SQL - 
    create table basket_item (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version bigint not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')),
        primary key (id)
    )
2025-01-29 15:58:54 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        active boolean not null,
        id bigserial not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-29 15:58:54 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-29 15:58:54 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-29 15:58:54 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-29 15:58:55 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM'))
    )
2025-01-29 15:58:55 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-29 15:58:55 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-29 15:58:56 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_base_model boolean,
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        base_model_id bigint,
        category_id bigint,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')),
        custom_color_code varchar(255),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-29 15:58:56 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-29 15:58:56 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-29 15:58:56 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-29 15:58:57 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-29 15:58:57 [main] DEBUG org.hibernate.SQL - 
    create table moulding (
        price DECIMAL(10,2) not null,
        price_overall DECIMAL(10,2),
        quantity integer not null,
        id bigserial not null,
        user_id bigint not null,
        title varchar(100) not null,
        description varchar(1000),
        article varchar(255) not null unique,
        size varchar(255) not null,
        primary key (id)
    )
2025-01-29 15:58:57 [main] DEBUG org.hibernate.SQL - 
    create table moulding_images (
        moulding_id bigint not null,
        image_url varchar(255)
    )
2025-01-29 15:58:58 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-29 15:58:58 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-29 15:58:58 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-29 15:58:58 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-29 15:58:59 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-29 15:58:59 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-29 15:58:59 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-29 15:58:59 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-29 15:59:00 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-29 15:59:00 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-29 15:59:00 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-29 15:59:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-29 15:59:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-29 15:59:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-29 15:59:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-29 15:59:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-29 15:59:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-29 15:59:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-29 15:59:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint FK810a8gq30miyp6j1eub97qm6k 
       foreign key (user_id) 
       references users
2025-01-29 15:59:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       add constraint FKara19f2xv7ml3a24f50v6bsk2 
       foreign key (basket_id) 
       references basket
2025-01-29 15:59:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-29 15:59:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-29 15:59:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-29 15:59:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-29 15:59:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-29 15:59:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-29 15:59:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-29 15:59:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-29 15:59:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-29 15:59:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-29 15:59:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-29 15:59:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       add constraint FKkieeklwkgvfbf39kekutcssax 
       foreign key (user_id) 
       references users
2025-01-29 15:59:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       add constraint FKgtkn0xv5nd1nfc0qd8vjfxxlx 
       foreign key (moulding_id) 
       references moulding
2025-01-29 15:59:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-29 15:59:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-29 15:59:07 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 15:59:08 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 15:59:10 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 15:59:10 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 15:59:10 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 15:59:10 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 15:59:11 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 15:59:11 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 15:59:11 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3a908e5b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5668b3a5, org.springframework.security.web.context.SecurityContextHolderFilter@305737a1, org.springframework.security.web.header.HeaderWriterFilter@2d08438d, org.springframework.web.filter.CorsFilter@3a233d2e, org.springframework.security.web.authentication.logout.LogoutFilter@4adf6a2, uz.pdp.config.filtr.MyFilter@5dc120ab, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@17800db0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7f8c3326, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@50ddafaf, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@12797002, org.springframework.security.web.access.ExceptionTranslationFilter@6e25ca3a, org.springframework.security.web.access.intercept.AuthorizationFilter@1fb68a8f]
2025-01-29 15:59:12 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 15:59:12 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 37.901 seconds (process running for 38.273)
2025-01-29 15:59:12 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:59:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:13 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 15:59:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:59:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:59:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:59:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:59:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:59:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:59:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 15:59:16 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 15:59:16 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:59:17 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:59:17 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:59:17 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:59:18 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 15:59:18 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.role=?
2025-01-29 15:59:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 15:59:24 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 15:59:24 [RMI TCP Connection(5)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 15:59:24 [RMI TCP Connection(5)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 15:59:24 [RMI TCP Connection(5)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-01-29 15:59:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 15:59:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-29 16:07:12 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:07:12 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 16:07:13 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 16:15:25 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 498868 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 16:15:25 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 16:15:25 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 16:15:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:15:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 16:15:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 99 ms. Found 13 JPA repository interfaces.
2025-01-29 16:15:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:15:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 16:15:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-29 16:15:27 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 16:15:27 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 16:15:27 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 16:15:27 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 16:15:27 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 16:15:27 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1763 ms
2025-01-29 16:15:27 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 16:15:27 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 16:15:28 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 16:15:28 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 16:15:28 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 16:15:30 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5ab29866
2025-01-29 16:15:30 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 16:15:31 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 16:15:32 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 16:15:34 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 16:15:34 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 16:15:35 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists idx_user_email
2025-01-29 16:15:35 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-29 16:15:35 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_user_email" of relation "users" does not exist, skipping
2025-01-29 16:15:35 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint idx_user_email unique (email)
2025-01-29 16:15:52 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 501210 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 16:15:52 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 16:15:52 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 16:15:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:15:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 16:15:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 157 ms. Found 13 JPA repository interfaces.
2025-01-29 16:15:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:15:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 16:15:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-29 16:15:53 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 16:15:54 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 16:15:54 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 16:15:54 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 16:15:54 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 16:15:54 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2247 ms
2025-01-29 16:15:54 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 16:15:54 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 16:15:54 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 16:15:54 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 16:15:54 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 16:15:57 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5cb64b9c
2025-01-29 16:15:57 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 16:15:57 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 16:15:59 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 16:15:59 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-29 16:16:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-29 16:16:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-29 16:16:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       drop constraint if exists FK810a8gq30miyp6j1eub97qm6k
2025-01-29 16:16:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       drop constraint if exists FKara19f2xv7ml3a24f50v6bsk2
2025-01-29 16:16:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-29 16:16:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-29 16:16:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-29 16:16:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-29 16:16:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-29 16:16:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-29 16:16:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-29 16:16:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-29 16:16:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-29 16:16:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-29 16:16:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-29 16:16:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       drop constraint if exists FKkieeklwkgvfbf39kekutcssax
2025-01-29 16:16:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       drop constraint if exists FKgtkn0xv5nd1nfc0qd8vjfxxlx
2025-01-29 16:16:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-29 16:16:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-29 16:16:05 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-29 16:16:05 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-29 16:16:05 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket cascade
2025-01-29 16:16:05 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_item cascade
2025-01-29 16:16:06 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade
2025-01-29 16:16:06 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-29 16:16:06 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-29 16:16:06 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-29 16:16:07 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_available_colors cascade
2025-01-29 16:16:07 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-29 16:16:07 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-29 16:16:07 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-29 16:16:08 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-29 16:16:08 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-29 16:16:08 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-29 16:16:09 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-29 16:16:09 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding cascade
2025-01-29 16:16:09 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding_images cascade
2025-01-29 16:16:09 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-29 16:16:10 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-29 16:16:10 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-29 16:16:10 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-29 16:16:10 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-29 16:16:11 [main] DEBUG org.hibernate.SQL - 
    create table basket (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-29 16:16:11 [main] DEBUG org.hibernate.SQL - 
    create table basket_item (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version bigint not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')),
        primary key (id)
    )
2025-01-29 16:16:11 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        active boolean not null,
        id bigserial not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-29 16:16:12 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-29 16:16:12 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-29 16:16:12 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-29 16:16:12 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM'))
    )
2025-01-29 16:16:13 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-29 16:16:13 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-29 16:16:13 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_base_model boolean,
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        base_model_id bigint,
        category_id bigint,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')),
        custom_color_code varchar(255),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-29 16:16:13 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-29 16:16:14 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-29 16:16:14 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-29 16:16:14 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-29 16:16:14 [main] DEBUG org.hibernate.SQL - 
    create table moulding (
        price DECIMAL(10,2) not null,
        price_overall DECIMAL(10,2),
        quantity integer not null,
        id bigserial not null,
        user_id bigint not null,
        title varchar(100) not null,
        description varchar(1000),
        article varchar(255) not null unique,
        size varchar(255) not null,
        primary key (id)
    )
2025-01-29 16:16:15 [main] DEBUG org.hibernate.SQL - 
    create table moulding_images (
        moulding_id bigint not null,
        image_url varchar(255)
    )
2025-01-29 16:16:15 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-29 16:16:15 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-29 16:16:16 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-29 16:16:16 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-29 16:16:16 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-29 16:16:16 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-29 16:16:17 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-29 16:16:17 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-29 16:16:17 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-29 16:16:17 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-29 16:16:18 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-29 16:16:18 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-29 16:16:18 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-29 16:16:19 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-29 16:16:19 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-29 16:16:19 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-29 16:16:19 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-29 16:16:20 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-29 16:16:20 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint FK810a8gq30miyp6j1eub97qm6k 
       foreign key (user_id) 
       references users
2025-01-29 16:16:20 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       add constraint FKara19f2xv7ml3a24f50v6bsk2 
       foreign key (basket_id) 
       references basket
2025-01-29 16:16:21 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-29 16:16:21 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-29 16:16:21 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-29 16:16:21 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-29 16:16:22 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-29 16:16:22 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-29 16:16:22 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-29 16:16:22 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-29 16:16:23 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-29 16:16:23 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-29 16:16:23 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-29 16:16:23 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       add constraint FKkieeklwkgvfbf39kekutcssax 
       foreign key (user_id) 
       references users
2025-01-29 16:16:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       add constraint FKgtkn0xv5nd1nfc0qd8vjfxxlx 
       foreign key (moulding_id) 
       references moulding
2025-01-29 16:16:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-29 16:16:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-29 16:16:25 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:16:26 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 16:16:27 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 16:16:28 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 16:16:28 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 16:16:28 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 16:16:29 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 16:16:29 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 16:16:29 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3edc3c2e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5ca7fab9, org.springframework.security.web.context.SecurityContextHolderFilter@66109995, org.springframework.security.web.header.HeaderWriterFilter@5c015cc0, org.springframework.web.filter.CorsFilter@448b53d5, org.springframework.security.web.authentication.logout.LogoutFilter@683b7061, uz.pdp.config.filtr.MyFilter@1238a074, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@55d60d3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6f0d9606, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6a3c63d2, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@8116822, org.springframework.security.web.access.ExceptionTranslationFilter@6fe8dde8, org.springframework.security.web.access.intercept.AuthorizationFilter@1eb6b526]
2025-01-29 16:16:30 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 16:16:30 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 38.521 seconds (process running for 38.938)
2025-01-29 16:16:30 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:16:30 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:16:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:31 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 16:16:32 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 16:16:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 16:16:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 16:16:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 16:16:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 16:16:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 16:16:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 16:16:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 16:16:34 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 16:16:35 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 16:16:35 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 16:16:36 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 16:16:36 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 16:16:36 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 16:16:36 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-29 16:16:37 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.role=?
2025-01-29 16:16:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:42 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 16:16:43 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 16:16:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:44 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 16:16:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:48 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:16:48 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:16:49 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:16:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:16:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:16:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:16:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:16:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:52 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:16:52 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:16:52 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:16:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:16:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:16:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:16:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:55 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:16:56 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:16:56 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:16:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:16:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:16:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:16:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:16:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:16:59 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:17:00 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:17:00 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:17:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:04 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:17:04 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:17:04 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:17:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:08 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:17:08 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:17:08 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:17:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:13 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:17:13 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:17:13 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:17:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:18 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:17:18 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:17:19 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:17:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:23 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:17:24 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:17:24 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:17:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:28 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:17:28 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:17:28 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:17:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:17:33 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:17:33 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:17:34 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:17:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-29 16:17:35 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-29 16:17:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:40 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-29 16:17:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-29 16:17:47 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-29 16:17:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-29 16:17:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-29 16:17:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-29 16:17:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-29 16:17:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-29 16:17:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-29 16:17:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-29 16:17:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-29 16:17:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-29 16:17:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-29 16:17:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 16:17:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-29 16:17:59 [RMI TCP Connection(5)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 16:17:59 [RMI TCP Connection(5)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 16:17:59 [RMI TCP Connection(5)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-01-29 16:18:44 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:18:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-29 16:18:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:18:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:19:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:19:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 16:19:31 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:19:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:19:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 16:19:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:19:51 [http-nio-8080-exec-7] ERROR uz.pdp.service.ImageStorageService - Failed to extract key from URL: https://images.unsplash.com/photo-1526887520775-4b14b8aed897?q=80&fm=jpg&w=800&h=600&fit=crop
2025-01-29 16:19:51 [http-nio-8080-exec-7] WARN  u.pdp.controller.AccessoryController - Failed to delete old images: Invalid S3 URL: Invalid S3 URL format: missing amazonaws.com domain
2025-01-29 16:19:51 [http-nio-8080-exec-7] ERROR u.p.exception.GlobalExceptionHandler - Unexpected error occurred
java.lang.RuntimeException: Failed to delete old images
	at uz.pdp.controller.AccessoryController.uploadImage(AccessoryController.java:155)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at uz.pdp.controller.AccessoryController$$SpringCGLIB$$0.uploadImage(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:262)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:213)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.lang.IllegalArgumentException: Invalid S3 URL: Invalid S3 URL format: missing amazonaws.com domain
	at uz.pdp.service.ImageStorageService.extractKeyFromUrl(ImageStorageService.java:221)
	at uz.pdp.service.ImageStorageService.deleteImage(ImageStorageService.java:179)
	at uz.pdp.controller.AccessoryController.uploadImage(AccessoryController.java:151)
	... 149 common frames omitted
2025-01-29 16:24:19 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:24:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 16:24:20 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 16:24:24 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 542123 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 16:24:24 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 16:24:24 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 16:24:24 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:24:24 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 16:24:25 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 102 ms. Found 13 JPA repository interfaces.
2025-01-29 16:24:25 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:24:25 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 16:24:25 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-01-29 16:24:26 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 16:24:26 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 16:24:26 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 16:24:26 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 16:24:26 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 16:24:26 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2590 ms
2025-01-29 16:24:27 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 16:24:27 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 16:24:27 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 16:24:27 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 16:24:27 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 16:24:30 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@78d52d4c
2025-01-29 16:24:30 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 16:24:30 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 16:24:31 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 16:24:33 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 16:24:33 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 16:24:34 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists idx_user_email
2025-01-29 16:24:34 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-29 16:24:34 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_user_email" of relation "users" does not exist, skipping
2025-01-29 16:24:34 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint idx_user_email unique (email)
2025-01-29 16:24:52 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:24:53 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 16:24:55 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 16:24:56 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 16:24:56 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 16:24:56 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 16:24:56 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 16:24:56 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 16:24:56 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@32059a7e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@624a369, org.springframework.security.web.context.SecurityContextHolderFilter@6d092268, org.springframework.security.web.header.HeaderWriterFilter@1d9c0b84, org.springframework.web.filter.CorsFilter@517cb4f5, org.springframework.security.web.authentication.logout.LogoutFilter@f96c1fd, uz.pdp.config.filtr.MyFilter@abf1816, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@5feede1f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@41f8ddc1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@50bd611e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6aec0b01, org.springframework.security.web.access.ExceptionTranslationFilter@80949d1, org.springframework.security.web.access.intercept.AuthorizationFilter@1c0b6d3c]
2025-01-29 16:24:57 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 16:24:57 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 33.885 seconds (process running for 34.273)
2025-01-29 16:24:57 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:24:58 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 16:24:59 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 16:24:59 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 16:24:59 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 16:25:00 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 16:25:00 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-29 16:25:01 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-29 16:25:01 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-29 16:25:02 [RMI TCP Connection(2)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 16:25:02 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 16:25:02 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-29 16:25:13 [http-nio-8080-exec-10] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 1209 ms
2025-01-29 16:25:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:25:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 16:25:23 [http-nio-8080-exec-4] INFO  uz.pdp.service.ImageStorageService - Uploading image to doors/: 0014413c-77aa-4830-be2f-74065b823087.jpg
2025-01-29 16:25:24 [http-nio-8080-exec-4] WARN  com.amazonaws.util.Base64 - JAXB is unavailable. Will fallback to SDK implementation which may be less performant.If you are using Java 9+, you will need to include javax.xml.bind:jaxb-api as a dependency.
2025-01-29 16:25:24 [http-nio-8080-exec-4] INFO  uz.pdp.service.ImageStorageService - Successfully uploaded image to doors/: 0014413c-77aa-4830-be2f-74065b823087.jpg
2025-01-29 16:25:24 [http-nio-8080-exec-4] INFO  u.pdp.controller.AccessoryController - Successfully uploaded new image: https://etadoor.s3.eu-north-1.amazonaws.com/doors/0014413c-77aa-4830-be2f-74065b823087.jpg
2025-01-29 16:25:24 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:25:24 [http-nio-8080-exec-4] INFO  uz.pdp.service.ImageStorageService - External URL detected, skipping deletion: https://images.unsplash.com/photo-1526887520775-4b14b8aed897?q=80&fm=jpg&w=800&h=600&fit=crop
2025-01-29 16:25:24 [http-nio-8080-exec-4] INFO  uz.pdp.service.ImageStorageService - External URL detected, skipping deletion: https://images.unsplash.com/photo-1526887520775-4b14b8aed897?q=80&fm=jpg&w=800&h=600&fit=crop
2025-01-29 16:25:24 [http-nio-8080-exec-4] INFO  u.pdp.controller.AccessoryController - Successfully deleted old image: https://images.unsplash.com/photo-1526887520775-4b14b8aed897?q=80&fm=jpg&w=800&h=600&fit=crop
2025-01-29 16:25:24 [http-nio-8080-exec-4] INFO  uz.pdp.service.ImageStorageService - External URL detected, skipping deletion: https://images.unsplash.com/photo-1541450805268-4822a3a774ca?q=80&fm=jpg&w=400&h=300&fit=crop
2025-01-29 16:25:24 [http-nio-8080-exec-4] INFO  uz.pdp.service.ImageStorageService - External URL detected, skipping deletion: https://images.unsplash.com/photo-1541450805268-4822a3a774ca?q=80&fm=jpg&w=400&h=300&fit=crop
2025-01-29 16:25:24 [http-nio-8080-exec-4] INFO  u.pdp.controller.AccessoryController - Successfully deleted old image: https://images.unsplash.com/photo-1541450805268-4822a3a774ca?q=80&fm=jpg&w=400&h=300&fit=crop
2025-01-29 16:25:24 [http-nio-8080-exec-4] INFO  uz.pdp.service.ImageStorageService - External URL detected, skipping deletion: https://images.unsplash.com/photo-1503787091259-324336010fc4?q=80&fm=jpg&w=400&h=300&fit=crop
2025-01-29 16:25:24 [http-nio-8080-exec-4] INFO  uz.pdp.service.ImageStorageService - External URL detected, skipping deletion: https://images.unsplash.com/photo-1503787091259-324336010fc4?q=80&fm=jpg&w=400&h=300&fit=crop
2025-01-29 16:25:24 [http-nio-8080-exec-4] INFO  u.pdp.controller.AccessoryController - Successfully deleted old image: https://images.unsplash.com/photo-1503787091259-324336010fc4?q=80&fm=jpg&w=400&h=300&fit=crop
2025-01-29 16:25:24 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 16:25:25 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        furniture_door_images 
    where
        furniture_door_id=?
2025-01-29 16:25:25 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:25:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 16:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:25:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:25:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 16:25:51 [http-nio-8080-exec-2] INFO  uz.pdp.service.ImageStorageService - Uploading image to doors/: 84a970cc-cac5-42eb-98ee-f9ff28f8f795.jpg
2025-01-29 16:25:52 [http-nio-8080-exec-2] INFO  uz.pdp.service.ImageStorageService - Successfully uploaded image to doors/: 84a970cc-cac5-42eb-98ee-f9ff28f8f795.jpg
2025-01-29 16:25:52 [http-nio-8080-exec-2] INFO  u.pdp.controller.AccessoryController - Successfully uploaded new image: https://etadoor.s3.eu-north-1.amazonaws.com/doors/84a970cc-cac5-42eb-98ee-f9ff28f8f795.jpg
2025-01-29 16:25:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:25:52 [http-nio-8080-exec-2] INFO  uz.pdp.service.ImageStorageService - Successfully extracted key from URL: doors/0014413c-77aa-4830-be2f-74065b823087.jpg
2025-01-29 16:25:52 [http-nio-8080-exec-2] INFO  uz.pdp.service.ImageStorageService - Deleting image with key: doors/0014413c-77aa-4830-be2f-74065b823087.jpg
2025-01-29 16:25:52 [http-nio-8080-exec-2] INFO  uz.pdp.service.ImageStorageService - Successfully deleted image: doors/0014413c-77aa-4830-be2f-74065b823087.jpg
2025-01-29 16:25:52 [http-nio-8080-exec-2] INFO  u.pdp.controller.AccessoryController - Successfully deleted old image: https://etadoor.s3.eu-north-1.amazonaws.com/doors/0014413c-77aa-4830-be2f-74065b823087.jpg
2025-01-29 16:25:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 16:25:53 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    delete 
    from
        furniture_door_images 
    where
        furniture_door_id=?
2025-01-29 16:25:53 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:29:47 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:29:47 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 16:29:48 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 16:29:52 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 568456 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 16:29:52 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 16:29:52 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 16:29:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:29:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 16:29:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 118 ms. Found 13 JPA repository interfaces.
2025-01-29 16:29:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:29:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 16:29:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-29 16:29:54 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 16:29:54 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 16:29:54 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 16:29:54 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 16:29:54 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 16:29:54 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1984 ms
2025-01-29 16:29:55 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 16:29:55 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 16:29:55 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 16:29:55 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 16:29:55 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 16:29:58 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7d741200
2025-01-29 16:29:58 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 16:29:58 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 16:29:59 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 16:30:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 16:30:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 16:30:19 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:30:20 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 16:30:22 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 16:30:23 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 16:30:23 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 16:30:23 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 16:30:23 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 16:30:24 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 16:30:24 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@35946da7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@d8b9bbd, org.springframework.security.web.context.SecurityContextHolderFilter@653dbf34, org.springframework.security.web.header.HeaderWriterFilter@653b9612, org.springframework.web.filter.CorsFilter@23bc71f3, org.springframework.security.web.authentication.logout.LogoutFilter@58c23786, uz.pdp.config.filtr.MyFilter@185bf6e0, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@25077616, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@39ae44bc, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@64aee729, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@56e52961, org.springframework.security.web.access.ExceptionTranslationFilter@ebe96d8, org.springframework.security.web.access.intercept.AuthorizationFilter@5595db29]
2025-01-29 16:30:25 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 16:30:25 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 32.895 seconds (process running for 33.304)
2025-01-29 16:30:25 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:30:25 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 16:30:26 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 16:30:26 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 16:30:27 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 16:30:27 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 16:30:27 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-29 16:30:28 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-29 16:30:28 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-29 16:30:30 [RMI TCP Connection(4)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 16:30:30 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 16:30:30 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-29 16:31:00 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 1380 ms
2025-01-29 16:31:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:31:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 16:31:09 [http-nio-8080-exec-4] INFO  uz.pdp.service.ImageStorageService - Uploading image to accessories/: a691ea67-cf7b-4f52-a502-eb1407778b8c.jpg
2025-01-29 16:31:10 [http-nio-8080-exec-4] WARN  com.amazonaws.util.Base64 - JAXB is unavailable. Will fallback to SDK implementation which may be less performant.If you are using Java 9+, you will need to include javax.xml.bind:jaxb-api as a dependency.
2025-01-29 16:31:10 [http-nio-8080-exec-4] INFO  uz.pdp.service.ImageStorageService - Successfully uploaded image to accessories/: a691ea67-cf7b-4f52-a502-eb1407778b8c.jpg
2025-01-29 16:31:10 [http-nio-8080-exec-4] INFO  u.pdp.controller.AccessoryController - Successfully uploaded new image: https://etadoor.s3.eu-north-1.amazonaws.com/accessories/a691ea67-cf7b-4f52-a502-eb1407778b8c.jpg
2025-01-29 16:31:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:31:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 16:31:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        furniture_door_images 
    where
        furniture_door_id=?
2025-01-29 16:31:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:31:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:31:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:31:31 [http-nio-8080-exec-8] INFO  uz.pdp.controller.DoorController - Uploading 1 images for door ID: 1
2025-01-29 16:31:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:31:32 [http-nio-8080-exec-8] INFO  uz.pdp.service.ImageStorageService - Uploading image to doors/: 4eb4a5da-d085-482b-904a-8101452325e6.jpg
2025-01-29 16:31:33 [http-nio-8080-exec-8] INFO  uz.pdp.service.ImageStorageService - Successfully uploaded image to doors/: 4eb4a5da-d085-482b-904a-8101452325e6.jpg
2025-01-29 16:31:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    delete 
    from
        door_images 
    where
        door_id=?
2025-01-29 16:31:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:31:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.id=?
2025-01-29 16:31:34 [http-nio-8080-exec-8] ERROR u.p.exception.GlobalExceptionHandler - Unexpected error occurred
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:489)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:114)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:297)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:213)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: uz.pdp.payload.EntityResponse["data"]->uz.pdp.entity.Door["category"]->uz.pdp.entity.Category$HibernateProxy$AtUb6UeI["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:414)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:53)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:30)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1572)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:483)
	... 134 common frames omitted
2025-01-29 16:33:17 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:33:17 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 16:33:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 16:44:52 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 640643 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 16:44:52 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 16:44:52 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 16:44:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:44:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 16:44:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 143 ms. Found 13 JPA repository interfaces.
2025-01-29 16:44:54 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:44:54 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 16:44:54 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-29 16:44:54 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 16:44:55 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 16:44:55 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 16:44:55 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 16:44:55 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 16:44:55 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2431 ms
2025-01-29 16:44:55 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 16:44:55 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 16:44:55 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 16:44:55 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 16:44:55 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 16:44:58 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@27244a88
2025-01-29 16:44:58 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 16:44:58 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 16:45:00 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 16:45:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 16:45:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 16:45:22 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:45:23 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 16:45:25 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 16:45:25 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 16:45:25 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 16:45:25 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 16:45:26 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 16:45:26 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 16:45:26 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3172d9f1, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@14b31bd, org.springframework.security.web.context.SecurityContextHolderFilter@6b58cd53, org.springframework.security.web.header.HeaderWriterFilter@5c545e45, org.springframework.web.filter.CorsFilter@6686a4aa, org.springframework.security.web.authentication.logout.LogoutFilter@5338f82f, uz.pdp.config.filtr.MyFilter@35b58254, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@7d322dac, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3355ca72, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@64947609, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5658d44c, org.springframework.security.web.access.ExceptionTranslationFilter@19309a15, org.springframework.security.web.access.intercept.AuthorizationFilter@74b8e2c4]
2025-01-29 16:45:27 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 16:45:27 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 35.926 seconds (process running for 36.507)
2025-01-29 16:45:27 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:45:28 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 16:45:28 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 16:45:29 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 16:45:29 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 16:45:29 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 16:45:30 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-29 16:45:30 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-29 16:45:31 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-29 16:45:32 [RMI TCP Connection(2)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 16:45:32 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 16:45:32 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-01-29 16:46:46 [http-nio-8080-exec-1] INFO  uz.pdp.controller.DoorController - Fetching similar doors for door id: 1, limit: 5
2025-01-29 16:46:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:46:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.material=? 
        and d1_0.color=? 
        and d1_0.price between ? and ? 
        and d1_0.id<>? 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-29 16:46:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.id=?
2025-01-29 16:46:48 [http-nio-8080-exec-1] ERROR u.p.exception.GlobalExceptionHandler - Unexpected error occurred
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:489)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:114)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:297)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:31)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:181)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:31)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: uz.pdp.payload.EntityResponse["data"]->uz.pdp.entity.Door["category"]->uz.pdp.entity.Category$HibernateProxy$k7IVL1uq["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:414)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:53)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:30)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(SerializerProvider.java:1150)
	at uz.pdp.config.RedisConfig$CollectionSerializer.serialize(RedisConfig.java:99)
	at uz.pdp.config.RedisConfig$CollectionSerializer.serialize(RedisConfig.java:1)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1572)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:483)
	... 134 common frames omitted
2025-01-29 16:48:19 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:48:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 16:48:20 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 16:48:24 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 658976 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 16:48:24 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 16:48:24 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 16:48:24 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:48:24 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 16:48:24 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 114 ms. Found 13 JPA repository interfaces.
2025-01-29 16:48:25 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:48:25 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 16:48:25 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-29 16:48:25 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 16:48:26 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 16:48:26 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 16:48:26 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 16:48:26 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 16:48:26 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2135 ms
2025-01-29 16:48:26 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 16:48:26 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 16:48:26 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 16:48:26 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 16:48:26 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 16:48:29 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@20843604
2025-01-29 16:48:29 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 16:48:29 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 16:48:30 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 16:48:32 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 16:48:32 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 16:48:50 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:48:51 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 16:48:52 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'doorController': Unsatisfied dependency expressed through field 'doorMapper': No qualifying bean of type 'uz.pdp.mapper.DoorMapper' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2025-01-29 16:48:52 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:48:52 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 16:48:53 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 16:48:53 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-01-29 16:48:53 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-29 16:48:53 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field doorMapper in uz.pdp.controller.DoorController required a bean of type 'uz.pdp.mapper.DoorMapper' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'uz.pdp.mapper.DoorMapper' in your configuration.

2025-01-29 16:49:46 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 665841 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 16:49:46 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 16:49:46 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 16:49:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:49:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 16:49:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 106 ms. Found 13 JPA repository interfaces.
2025-01-29 16:49:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:49:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 16:49:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-29 16:49:47 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 16:49:47 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 16:49:48 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 16:49:48 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 16:49:48 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 16:49:48 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1962 ms
2025-01-29 16:49:48 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 16:49:48 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 16:49:48 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 16:49:48 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 16:49:48 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 16:49:51 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1067192a
2025-01-29 16:49:51 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 16:49:51 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 16:49:52 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 16:49:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 16:49:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 16:50:12 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:50:12 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 16:50:13 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accessoryController' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/controller/AccessoryController.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 2: Error creating bean with name 'doorService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/DoorService.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'userService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/UserService.class]: Unsatisfied dependency expressed through constructor parameter 3: No qualifying bean of type 'org.springframework.data.redis.core.RedisTemplate<java.lang.String, java.lang.Integer>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-01-29 16:50:13 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:50:13 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 16:50:15 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 16:50:15 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-01-29 16:50:15 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-29 16:50:15 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 3 of constructor in uz.pdp.service.UserService required a bean of type 'org.springframework.data.redis.core.RedisTemplate' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.data.redis.core.RedisTemplate' in your configuration.

2025-01-29 16:50:56 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 671862 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 16:50:56 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 16:50:56 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 16:50:57 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:50:57 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 16:50:57 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 126 ms. Found 13 JPA repository interfaces.
2025-01-29 16:50:57 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:50:57 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 16:50:57 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-29 16:50:57 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 16:50:58 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 16:50:58 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 16:50:58 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 16:50:58 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 16:50:58 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1837 ms
2025-01-29 16:50:58 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 16:50:58 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 16:50:58 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 16:50:58 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 16:50:58 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 16:51:01 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@772589ed
2025-01-29 16:51:01 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 16:51:02 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 16:51:03 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 16:51:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 16:51:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 16:51:25 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:51:25 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 16:51:26 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accessoryController' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/controller/AccessoryController.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 2: Error creating bean with name 'doorService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/DoorService.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'userService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/UserService.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'redisTemplate' defined in class path resource [uz/pdp/config/RedisConfig.class]: Failed to instantiate [org.springframework.data.redis.core.RedisTemplate]: Factory method 'redisTemplate' threw exception with message: RedisConnectionFactory is required
2025-01-29 16:51:26 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:51:26 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 16:51:27 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 16:51:27 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-01-29 16:51:27 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-29 16:51:27 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accessoryController' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/controller/AccessoryController.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 2: Error creating bean with name 'doorService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/DoorService.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'userService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/UserService.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'redisTemplate' defined in class path resource [uz/pdp/config/RedisConfig.class]: Failed to instantiate [org.springframework.data.redis.core.RedisTemplate]: Factory method 'redisTemplate' threw exception with message: RedisConnectionFactory is required
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:802)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:960)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:464)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 2: Error creating bean with name 'doorService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/DoorService.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'userService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/UserService.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'redisTemplate' defined in class path resource [uz/pdp/config/RedisConfig.class]: Failed to instantiate [org.springframework.data.redis.core.RedisTemplate]: Factory method 'redisTemplate' threw exception with message: RedisConnectionFactory is required
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:802)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'doorService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/DoorService.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'userService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/UserService.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'redisTemplate' defined in class path resource [uz/pdp/config/RedisConfig.class]: Failed to instantiate [org.springframework.data.redis.core.RedisTemplate]: Factory method 'redisTemplate' threw exception with message: RedisConnectionFactory is required
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:802)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 33 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/UserService.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'redisTemplate' defined in class path resource [uz/pdp/config/RedisConfig.class]: Failed to instantiate [org.springframework.data.redis.core.RedisTemplate]: Factory method 'redisTemplate' threw exception with message: RedisConnectionFactory is required
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:802)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 47 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'redisTemplate' defined in class path resource [uz/pdp/config/RedisConfig.class]: Failed to instantiate [org.springframework.data.redis.core.RedisTemplate]: Factory method 'redisTemplate' threw exception with message: RedisConnectionFactory is required
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:489)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1334)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	... 61 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.redis.core.RedisTemplate]: Factory method 'redisTemplate' threw exception with message: RedisConnectionFactory is required
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:177)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)
	... 75 common frames omitted
Caused by: java.lang.IllegalStateException: RedisConnectionFactory is required
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.data.redis.core.RedisAccessor.getRequiredConnectionFactory(RedisAccessor.java:66)
	at org.springframework.data.redis.core.RedisAccessor.afterPropertiesSet(RedisAccessor.java:40)
	at org.springframework.data.redis.core.RedisTemplate.afterPropertiesSet(RedisTemplate.java:130)
	at uz.pdp.config.RedisConfig.redisTemplate(RedisConfig.java:237)
	at uz.pdp.config.RedisConfig$$SpringCGLIB$$0.CGLIB$redisTemplate$0(<generated>)
	at uz.pdp.config.RedisConfig$$SpringCGLIB$$FastClass$$1.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at uz.pdp.config.RedisConfig$$SpringCGLIB$$0.redisTemplate(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)
	... 76 common frames omitted
2025-01-29 16:52:11 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 678581 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 16:52:11 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 16:52:11 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 16:52:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:52:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 16:52:12 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 92 ms. Found 13 JPA repository interfaces.
2025-01-29 16:52:12 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 16:52:12 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 16:52:12 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-29 16:52:12 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 16:52:13 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 16:52:13 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 16:52:13 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 16:52:13 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 16:52:13 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1683 ms
2025-01-29 16:52:13 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 16:52:13 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 16:52:13 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 16:52:13 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 16:52:13 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 16:52:16 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@48861d1
2025-01-29 16:52:16 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 16:52:16 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 16:52:17 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 16:52:19 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 16:52:19 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 16:52:39 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 16:52:40 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 16:52:42 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 16:52:42 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 16:52:42 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 16:52:42 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 16:52:42 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 16:52:43 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 16:52:43 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3c2a6908, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6b1d8e3f, org.springframework.security.web.context.SecurityContextHolderFilter@40fc5943, org.springframework.security.web.header.HeaderWriterFilter@ebe695b, org.springframework.web.filter.CorsFilter@23ca4308, org.springframework.security.web.authentication.logout.LogoutFilter@1db8425f, uz.pdp.config.filtr.MyFilter@2346f77a, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@6e45a6d9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@e5b6435, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@296c8e2f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7188e5a, org.springframework.security.web.access.ExceptionTranslationFilter@4180dad5, org.springframework.security.web.access.intercept.AuthorizationFilter@30e38412]
2025-01-29 16:52:43 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 16:52:43 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 32.82 seconds (process running for 33.069)
2025-01-29 16:52:44 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:52:44 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 16:52:45 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 16:52:45 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 16:52:46 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 16:52:46 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 16:52:46 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-29 16:52:47 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-29 16:52:47 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-29 16:52:48 [RMI TCP Connection(3)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 16:52:48 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 16:52:48 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-29 16:52:52 [http-nio-8080-exec-1] INFO  uz.pdp.controller.DoorController - Fetching similar doors for door id: 1, limit: 5
2025-01-29 16:52:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:52:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.material=? 
        and d1_0.color=? 
        and d1_0.price between ? and ? 
        and d1_0.id<>? 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-29 16:52:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:52:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:52:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:52:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:53:24 [http-nio-8080-exec-4] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 621 ms
2025-01-29 16:53:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:53:35 [http-nio-8080-exec-1] INFO  uz.pdp.service.DoorService - Retrieving door with ID: 1
2025-01-29 16:53:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:53:36 [http-nio-8080-exec-1] INFO  uz.pdp.service.DoorService - Retrieved door: Classic Oak BEDROOM
2025-01-29 16:53:36 [http-nio-8080-exec-1] INFO  uz.pdp.service.ImageStorageService - Uploading image to doors/: 470d0353-cabe-410e-a71e-c12e924f5294.jpg
2025-01-29 16:53:37 [http-nio-8080-exec-1] WARN  com.amazonaws.util.Base64 - JAXB is unavailable. Will fallback to SDK implementation which may be less performant.If you are using Java 9+, you will need to include javax.xml.bind:jaxb-api as a dependency.
2025-01-29 16:53:37 [http-nio-8080-exec-1] INFO  uz.pdp.service.ImageStorageService - Successfully uploaded image to doors/: 470d0353-cabe-410e-a71e-c12e924f5294.jpg
2025-01-29 16:53:37 [http-nio-8080-exec-1] INFO  uz.pdp.controller.DoorController - Successfully uploaded new image: https://etadoor.s3.eu-north-1.amazonaws.com/doors/470d0353-cabe-410e-a71e-c12e924f5294.jpg
2025-01-29 16:53:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:53:37 [http-nio-8080-exec-1] INFO  uz.pdp.service.DoorService - Updating door with ID: 1
2025-01-29 16:53:37 [http-nio-8080-exec-1] INFO  uz.pdp.service.DoorService - Retrieving door with ID: 1
2025-01-29 16:53:37 [http-nio-8080-exec-1] INFO  uz.pdp.service.DoorService - Retrieved door: Classic Oak BEDROOM
2025-01-29 16:53:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:53:37 [http-nio-8080-exec-1] INFO  uz.pdp.service.DoorService - Updated door with ID: 1
2025-01-29 16:53:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    delete 
    from
        door_images 
    where
        door_id=?
2025-01-29 16:53:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:53:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:53:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.id=?
2025-01-29 16:53:41 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:53:41 [http-nio-8080-exec-9] INFO  uz.pdp.service.DoorService - Retrieving door with ID: 1
2025-01-29 16:53:41 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:53:42 [http-nio-8080-exec-9] INFO  uz.pdp.service.DoorService - Retrieved door: Classic Oak BEDROOM
2025-01-29 16:53:42 [http-nio-8080-exec-9] INFO  uz.pdp.service.ImageStorageService - Uploading image to doors/: b0c9dbf5-0aa3-4a15-9cfa-fa2ed2818920.jpg
2025-01-29 16:53:43 [http-nio-8080-exec-9] INFO  uz.pdp.service.ImageStorageService - Successfully uploaded image to doors/: b0c9dbf5-0aa3-4a15-9cfa-fa2ed2818920.jpg
2025-01-29 16:53:43 [http-nio-8080-exec-9] INFO  uz.pdp.controller.DoorController - Successfully uploaded new image: https://etadoor.s3.eu-north-1.amazonaws.com/doors/b0c9dbf5-0aa3-4a15-9cfa-fa2ed2818920.jpg
2025-01-29 16:53:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:53:43 [http-nio-8080-exec-9] INFO  uz.pdp.service.DoorService - Updating door with ID: 1
2025-01-29 16:53:43 [http-nio-8080-exec-9] INFO  uz.pdp.service.DoorService - Retrieving door with ID: 1
2025-01-29 16:53:43 [http-nio-8080-exec-9] INFO  uz.pdp.service.DoorService - Retrieved door: Classic Oak BEDROOM
2025-01-29 16:53:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:53:43 [http-nio-8080-exec-9] INFO  uz.pdp.service.DoorService - Updated door with ID: 1
2025-01-29 16:53:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    delete 
    from
        door_images 
    where
        door_id=?
2025-01-29 16:53:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:53:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:53:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-29 16:53:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.id=?
2025-01-29 16:53:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:53:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 16:53:58 [http-nio-8080-exec-4] INFO  uz.pdp.service.ImageStorageService - Uploading image to accessories/: 0a93b9a2-d1c1-451f-91f8-9839cd2fca15.jpg
2025-01-29 16:53:59 [http-nio-8080-exec-4] INFO  uz.pdp.service.ImageStorageService - Successfully uploaded image to accessories/: 0a93b9a2-d1c1-451f-91f8-9839cd2fca15.jpg
2025-01-29 16:53:59 [http-nio-8080-exec-4] INFO  u.pdp.controller.AccessoryController - Successfully uploaded new image: https://etadoor.s3.eu-north-1.amazonaws.com/accessories/0a93b9a2-d1c1-451f-91f8-9839cd2fca15.jpg
2025-01-29 16:53:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:53:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 16:53:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        furniture_door_images 
    where
        furniture_door_id=?
2025-01-29 16:54:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:54:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:54:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-29 16:54:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:54:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-29 16:54:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:54:22 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:54:23 [http-nio-8080-exec-8] INFO  uz.pdp.controller.DoorController - Fetching similar doors for door id: 1, limit: 5
2025-01-29 16:54:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:54:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.material=? 
        and d1_0.color=? 
        and d1_0.price between ? and ? 
        and d1_0.id<>? 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-29 16:54:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:54:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:54:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:54:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:54:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:54:34 [http-nio-8080-exec-1] INFO  uz.pdp.controller.DoorController - Getting color variants for door: 60
2025-01-29 16:54:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:54:34 [http-nio-8080-exec-1] ERROR u.p.exception.GlobalExceptionHandler - Unexpected error occurred
uz.pdp.exception.ResourceNotFoundException: Door not found with id: 60
	at uz.pdp.service.DoorService.lambda$0(DoorService.java:87)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at uz.pdp.service.DoorService.getDoor(DoorService.java:87)
	at uz.pdp.service.DoorService.getDoorColorVariants(DoorService.java:700)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at uz.pdp.service.DoorService$$SpringCGLIB$$0.getDoorColorVariants(<generated>)
	at uz.pdp.controller.DoorController.getDoorVariants(DoorController.java:524)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at uz.pdp.controller.DoorController$$SpringCGLIB$$0.getDoorVariants(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:262)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:213)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-01-29 16:54:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:54:38 [http-nio-8080-exec-9] INFO  uz.pdp.controller.DoorController - Getting color variants for door: 59
2025-01-29 16:54:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 16:54:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.base_model_id=? 
        or d1_0.id=?
2025-01-29 16:54:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:54:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:54:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:54:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:54:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:54:41 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:54:41 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:54:41 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:54:41 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 16:54:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 16:57:41 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:57:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-29 16:57:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 16:57:56 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:57:57 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.article,
        m1_0.description,
        m1_0.price,
        m1_0.price_overall,
        m1_0.quantity,
        m1_0.size,
        m1_0.title,
        m1_0.user_id 
    from
        moulding m1_0 
    order by
        m1_0.id 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-29 16:57:57 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(m1_0.id) 
    from
        moulding m1_0
2025-01-29 16:57:57 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 16:57:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 16:57:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 16:57:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 16:57:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 16:57:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 16:57:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 16:58:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 16:58:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 16:58:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 16:58:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:58:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.active
2025-01-29 16:58:40 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 16:58:41 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        upper(c1_0.name)=upper(?)
2025-01-29 16:58:41 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-29 17:05:05 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 17:05:05 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 17:05:06 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 17:05:10 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 742792 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 17:05:10 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 17:05:10 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 17:05:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 17:05:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 17:05:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 96 ms. Found 13 JPA repository interfaces.
2025-01-29 17:05:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 17:05:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 17:05:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-29 17:05:11 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 17:05:11 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 17:05:11 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 17:05:11 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 17:05:11 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 17:05:11 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1523 ms
2025-01-29 17:05:11 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 17:05:11 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 17:05:11 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 17:05:11 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 17:05:11 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 17:05:14 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@46f597f1
2025-01-29 17:05:14 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 17:05:14 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 17:05:16 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 17:05:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 17:05:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 17:05:36 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 17:05:36 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 17:05:38 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 17:05:38 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 17:05:38 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 17:05:38 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 17:05:39 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 17:05:39 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 17:05:39 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5f16d1ba, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@145549ff, org.springframework.security.web.context.SecurityContextHolderFilter@79dfd364, org.springframework.security.web.header.HeaderWriterFilter@276f3c7f, org.springframework.web.filter.CorsFilter@4e64324b, org.springframework.security.web.authentication.logout.LogoutFilter@7445be97, uz.pdp.config.filtr.MyFilter@7430ed93, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@9cd9160, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3ef5f65d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@77389001, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@64947609, org.springframework.security.web.access.ExceptionTranslationFilter@152a4d6c, org.springframework.security.web.access.intercept.AuthorizationFilter@72e48fe8]
2025-01-29 17:05:40 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 17:05:40 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 30.506 seconds (process running for 31.023)
2025-01-29 17:05:40 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:05:40 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 17:05:41 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 17:05:41 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:05:42 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:05:42 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 17:05:42 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-29 17:05:43 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-29 17:05:44 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-29 17:05:45 [RMI TCP Connection(1)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 17:05:45 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 17:05:45 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-29 17:24:21 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 17:24:21 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 17:24:22 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 17:24:25 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 840686 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 17:24:25 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 17:24:25 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 17:24:25 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 17:24:25 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 17:24:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 92 ms. Found 13 JPA repository interfaces.
2025-01-29 17:24:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 17:24:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 17:24:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-29 17:24:26 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 17:24:26 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 17:24:26 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 17:24:26 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 17:24:26 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 17:24:26 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1523 ms
2025-01-29 17:24:27 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 17:24:27 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 17:24:27 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 17:24:27 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 17:24:27 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 17:24:30 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3a5c6009
2025-01-29 17:24:30 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 17:24:30 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 17:24:31 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 17:24:32 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 17:24:33 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 17:24:51 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 17:24:52 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 17:24:53 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 17:24:54 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 17:24:54 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 17:24:54 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 17:24:55 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 17:24:55 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 17:24:55 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@145549ff, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4e64324b, org.springframework.security.web.context.SecurityContextHolderFilter@7ce03100, org.springframework.security.web.header.HeaderWriterFilter@5dd5a04c, org.springframework.web.filter.CorsFilter@64947609, org.springframework.security.web.authentication.logout.LogoutFilter@167b4dbb, uz.pdp.config.filtr.MyFilter@14624acc, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@ffa99e0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@70e5ca81, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2217281f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@de6f020, org.springframework.security.web.access.ExceptionTranslationFilter@2bb42b42, org.springframework.security.web.access.intercept.AuthorizationFilter@68f637a5]
2025-01-29 17:24:56 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 17:24:56 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 30.962 seconds (process running for 31.254)
2025-01-29 17:24:56 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:24:56 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 17:24:57 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 17:24:57 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:24:57 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:24:58 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 17:24:58 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-29 17:24:59 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-29 17:24:59 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-29 17:25:00 [RMI TCP Connection(4)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 17:25:00 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 17:25:00 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-29 17:25:09 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 653 ms
2025-01-29 17:25:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:25:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:25:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        b1_0.id,
        b1_0.user_id 
    from
        basket b1_0 
    left join
        users u1_0 
            on u1_0.id=b1_0.user_id 
    where
        u1_0.id=?
2025-01-29 17:25:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 17:25:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 17:25:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.basket_id,
        i1_0.id,
        i1_0.image,
        i1_0.item_id,
        i1_0.name,
        i1_0.price,
        i1_0.quantity,
        i1_0.type,
        i1_0.version 
    from
        basket_item i1_0 
    where
        i1_0.basket_id=?
2025-01-29 17:25:18 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        basket_item
        (basket_id, image, item_id, name, price, quantity, type, version) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 17:25:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:25:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:25:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        b1_0.id,
        b1_0.user_id 
    from
        basket b1_0 
    left join
        users u1_0 
            on u1_0.id=b1_0.user_id 
    where
        u1_0.id=?
2025-01-29 17:25:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:25:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.basket_id,
        i1_0.id,
        i1_0.image,
        i1_0.item_id,
        i1_0.name,
        i1_0.price,
        i1_0.quantity,
        i1_0.type,
        i1_0.version 
    from
        basket_item i1_0 
    where
        i1_0.basket_id=?
2025-01-29 17:25:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 17:25:36 [http-nio-8080-exec-8] INFO  uz.pdp.service.OrderService - Creating 1 orders for user with email: admin@etadoor.com
2025-01-29 17:25:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:25:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 17:25:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (comment, contact_phone, customer_name, delivery_address, delivery_notes, door_id, email, installation_notes, order_date, order_type, preferred_delivery_time, status, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 17:25:37 [http-nio-8080-exec-8] INFO  uz.pdp.service.OrderService - Created order 1 for door Classic Oak BEDROOM
2025-01-29 17:25:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:25:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        b1_0.id,
        b1_0.user_id 
    from
        basket b1_0 
    left join
        users u1_0 
            on u1_0.id=b1_0.user_id 
    where
        u1_0.id=?
2025-01-29 17:25:38 [http-nio-8080-exec-8] INFO  uz.pdp.service.BasketService - Clearing basket with ID: 1 containing 1 items
2025-01-29 17:25:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    DELETE 
    FROM
        basket_item 
    WHERE
        basket_id = ?
2025-01-29 17:25:38 [http-nio-8080-exec-8] INFO  uz.pdp.service.BasketService - Successfully cleared all items from basket 1
2025-01-29 17:25:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 17:25:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 17:27:39 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 17:27:39 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 17:27:41 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 17:27:50 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 857813 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 17:27:50 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 17:27:50 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 17:27:50 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 17:27:50 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 17:27:51 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 120 ms. Found 13 JPA repository interfaces.
2025-01-29 17:27:51 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 17:27:51 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 17:27:51 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-29 17:27:51 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 17:27:52 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 17:27:52 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 17:27:52 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 17:27:52 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 17:27:52 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1716 ms
2025-01-29 17:27:52 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 17:27:52 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 17:27:52 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 17:27:52 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 17:27:52 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 17:27:55 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4b8601a1
2025-01-29 17:27:55 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 17:27:55 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 17:27:56 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 17:27:57 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 17:27:58 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 17:28:16 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 17:28:17 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 17:28:18 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 17:28:19 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 17:28:19 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 17:28:19 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 17:28:19 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 17:28:19 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 17:28:19 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5658d44c, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@71c22227, org.springframework.security.web.context.SecurityContextHolderFilter@5b2c0940, org.springframework.security.web.header.HeaderWriterFilter@72e48fe8, org.springframework.web.filter.CorsFilter@295c237b, org.springframework.security.web.authentication.logout.LogoutFilter@280bff61, uz.pdp.config.filtr.MyFilter@5fd31df7, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@6411bdbf, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@68a8c257, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@28d483d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7a2c610e, org.springframework.security.web.access.ExceptionTranslationFilter@7a392347, org.springframework.security.web.access.intercept.AuthorizationFilter@18e41995]
2025-01-29 17:28:20 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 17:28:20 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 30.743 seconds (process running for 31.082)
2025-01-29 17:28:20 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:28:21 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 17:28:21 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 17:28:22 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:28:22 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:28:22 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 17:28:23 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-29 17:28:24 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-29 17:28:24 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-29 17:28:25 [RMI TCP Connection(3)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 17:28:25 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 17:28:25 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-29 17:28:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:28:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:28:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        b1_0.id,
        b1_0.user_id 
    from
        basket b1_0 
    left join
        users u1_0 
            on u1_0.id=b1_0.user_id 
    where
        u1_0.id=?
2025-01-29 17:28:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 17:28:46 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.furniture_door_id,
        i1_0.image_url 
    from
        furniture_door_images i1_0 
    where
        i1_0.furniture_door_id=?
2025-01-29 17:28:46 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.basket_id,
        i1_0.id,
        i1_0.image,
        i1_0.item_id,
        i1_0.name,
        i1_0.price,
        i1_0.quantity,
        i1_0.type,
        i1_0.version 
    from
        basket_item i1_0 
    where
        i1_0.basket_id=?
2025-01-29 17:28:46 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        basket_item
        (basket_id, image, item_id, name, price, quantity, type, version) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 17:28:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:28:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:28:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        b1_0.id,
        b1_0.user_id 
    from
        basket b1_0 
    left join
        users u1_0 
            on u1_0.id=b1_0.user_id 
    where
        u1_0.id=?
2025-01-29 17:28:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:28:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.basket_id,
        i1_0.id,
        i1_0.image,
        i1_0.item_id,
        i1_0.name,
        i1_0.price,
        i1_0.quantity,
        i1_0.type,
        i1_0.version 
    from
        basket_item i1_0 
    where
        i1_0.basket_id=?
2025-01-29 17:28:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-29 17:28:59 [http-nio-8080-exec-7] INFO  uz.pdp.service.OrderService - Creating 1 orders for user with email: admin@etadoor.com
2025-01-29 17:28:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:28:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 17:28:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (comment, contact_phone, customer_name, delivery_address, delivery_notes, door_id, email, installation_notes, order_date, order_type, preferred_delivery_time, status, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-29 17:29:00 [http-nio-8080-exec-7] INFO  uz.pdp.service.OrderService - Created order 2 for door Classic Oak BEDROOM
2025-01-29 17:29:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:29:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        b1_0.id,
        b1_0.user_id 
    from
        basket b1_0 
    left join
        users u1_0 
            on u1_0.id=b1_0.user_id 
    where
        u1_0.id=?
2025-01-29 17:29:00 [http-nio-8080-exec-7] INFO  uz.pdp.service.BasketService - Clearing basket with ID: 1 containing 1 items
2025-01-29 17:29:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    DELETE 
    FROM
        basket_item 
    WHERE
        basket_id = ?
2025-01-29 17:29:00 [http-nio-8080-exec-7] INFO  uz.pdp.service.BasketService - Successfully cleared all items from basket 1
2025-01-29 17:29:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 17:29:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 17:29:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:29:09 [http-nio-8080-exec-5] INFO  uz.pdp.controller.UserController - Retrieving orders for user ID: admin@etadoor.com
2025-01-29 17:29:09 [http-nio-8080-exec-5] INFO  uz.pdp.service.OrderService - Retrieving orders for user with email: admin@etadoor.com
2025-01-29 17:29:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:29:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.comment,
        o1_0.contact_phone,
        o1_0.customer_name,
        o1_0.delivery_address,
        o1_0.delivery_notes,
        o1_0.door_id,
        o1_0.email,
        o1_0.installation_notes,
        o1_0.order_date,
        o1_0.order_type,
        o1_0.preferred_delivery_time,
        o1_0.status,
        o1_0.user_id 
    from
        orders o1_0 
    where
        o1_0.user_id=? 
    order by
        o1_0.order_date desc
2025-01-29 17:29:10 [http-nio-8080-exec-5] INFO  uz.pdp.service.OrderService - Retrieved 2 orders for user with email: admin@etadoor.com
2025-01-29 17:29:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 17:29:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 17:29:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 17:29:59 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 17:29:59 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 17:30:01 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 17:30:03 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 869398 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 17:30:03 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 17:30:03 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 17:30:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 17:30:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 17:30:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 113 ms. Found 13 JPA repository interfaces.
2025-01-29 17:30:05 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 17:30:05 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 17:30:05 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-29 17:30:05 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 17:30:05 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 17:30:05 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 17:30:05 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 17:30:05 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 17:30:05 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1716 ms
2025-01-29 17:30:05 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 17:30:06 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 17:30:06 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 17:30:06 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 17:30:06 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 17:30:08 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5ce03a9d
2025-01-29 17:30:08 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 17:30:09 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 17:30:10 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 17:30:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 17:30:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 17:30:30 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 17:30:30 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 17:30:32 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 17:30:32 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 17:30:32 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 17:30:32 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 17:30:33 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 17:30:33 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 17:30:33 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2ef7635f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6e12d522, org.springframework.security.web.context.SecurityContextHolderFilter@29ef31d4, org.springframework.security.web.header.HeaderWriterFilter@5ce0212b, org.springframework.web.filter.CorsFilter@7bfa408b, org.springframework.security.web.authentication.logout.LogoutFilter@c077275, uz.pdp.config.filtr.MyFilter@61fa3583, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@3f94376e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@19a052a1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1d7bc28b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4cab6e4f, org.springframework.security.web.access.ExceptionTranslationFilter@e6e3071, org.springframework.security.web.access.intercept.AuthorizationFilter@44b14df7]
2025-01-29 17:30:34 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 17:30:34 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 30.655 seconds (process running for 31.002)
2025-01-29 17:30:34 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:30:34 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 17:30:35 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 17:30:35 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:30:36 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:30:36 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 17:30:37 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-29 17:30:37 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-29 17:30:38 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-29 17:30:38 [RMI TCP Connection(3)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 17:30:38 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 17:30:38 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-29 17:30:58 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:30:59 [http-nio-8080-exec-1] INFO  uz.pdp.controller.UserController - Retrieving orders for user ID: admin@etadoor.com
2025-01-29 17:30:59 [http-nio-8080-exec-1] INFO  uz.pdp.service.OrderService - Retrieving orders for user with email: admin@etadoor.com
2025-01-29 17:30:59 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:30:59 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.comment,
        o1_0.contact_phone,
        o1_0.customer_name,
        o1_0.delivery_address,
        o1_0.delivery_notes,
        o1_0.door_id,
        o1_0.email,
        o1_0.installation_notes,
        o1_0.order_date,
        o1_0.order_type,
        o1_0.preferred_delivery_time,
        o1_0.status,
        o1_0.user_id 
    from
        orders o1_0 
    where
        o1_0.user_id=? 
    order by
        o1_0.order_date desc
2025-01-29 17:31:00 [http-nio-8080-exec-1] INFO  uz.pdp.service.OrderService - Retrieved 2 orders for user with email: admin@etadoor.com
2025-01-29 17:31:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-29 17:31:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 17:31:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-29 17:31:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:31:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.article,
        m1_0.description,
        m1_0.price,
        m1_0.price_overall,
        m1_0.quantity,
        m1_0.size,
        m1_0.title,
        m1_0.user_id 
    from
        moulding m1_0 
    order by
        m1_0.id 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-29 17:31:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(m1_0.id) 
    from
        moulding m1_0
2025-01-29 17:31:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 17:31:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 17:31:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 17:31:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 17:31:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 17:31:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 17:31:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 17:31:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 17:31:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 17:31:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 17:31:31 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:31:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.article,
        m1_0.description,
        m1_0.price,
        m1_0.price_overall,
        m1_0.quantity,
        m1_0.size,
        m1_0.title,
        m1_0.user_id 
    from
        moulding m1_0 
    where
        m1_0.id=?
2025-01-29 17:31:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:31:33 [http-nio-8080-exec-6] INFO  uz.pdp.service.ImageStorageService - Uploading image to mouldings/: 202d05fb-3469-4643-b1e1-0ab398fed1e4.jpg
2025-01-29 17:31:34 [http-nio-8080-exec-6] WARN  com.amazonaws.util.Base64 - JAXB is unavailable. Will fallback to SDK implementation which may be less performant.If you are using Java 9+, you will need to include javax.xml.bind:jaxb-api as a dependency.
2025-01-29 17:31:34 [http-nio-8080-exec-6] INFO  uz.pdp.service.ImageStorageService - Successfully uploaded image to mouldings/: 202d05fb-3469-4643-b1e1-0ab398fed1e4.jpg
2025-01-29 17:31:34 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        iu1_0.moulding_id,
        iu1_0.image_url 
    from
        moulding_images iu1_0 
    where
        iu1_0.moulding_id=?
2025-01-29 17:31:34 [http-nio-8080-exec-6] ERROR u.pdp.controller.MouldingController - Invalid image upload request: Invalid size format. Must be in format: widthxheight (e.g., 75x38 or 75.5x38.5)
2025-01-29 17:35:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:35:20 [http-nio-8080-exec-9] ERROR u.p.exception.GlobalExceptionHandler - Unexpected error occurred
org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'uz.pdp.enums.Color'; Failed to convert from type [java.lang.String] to type [@org.springframework.web.bind.annotation.PathVariable uz.pdp.enums.Color] for value [Classic White]
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.convertIfNecessary(AbstractNamedValueMethodArgumentResolver.java:293)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:135)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:226)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:179)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:213)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@org.springframework.web.bind.annotation.PathVariable uz.pdp.enums.Color] for value [Classic White]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
	at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:131)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:80)
	at org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:53)
	at org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:860)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.convertIfNecessary(AbstractNamedValueMethodArgumentResolver.java:285)
	... 134 common frames omitted
Caused by: java.lang.IllegalArgumentException: No enum constant uz.pdp.enums.Color.Classic White
	at java.base/java.lang.Enum.valueOf(Enum.java:273)
	at org.springframework.core.convert.support.StringToEnumConverterFactory$StringToEnum.convert(StringToEnumConverterFactory.java:54)
	at org.springframework.core.convert.support.StringToEnumConverterFactory$StringToEnum.convert(StringToEnumConverterFactory.java:39)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:409)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	... 140 common frames omitted
2025-01-29 17:37:48 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 17:37:48 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 17:37:49 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 17:39:10 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 915116 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 17:39:10 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 17:39:10 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 17:39:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 17:39:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 17:39:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 97 ms. Found 13 JPA repository interfaces.
2025-01-29 17:39:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 17:39:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 17:39:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-29 17:39:11 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 17:39:11 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 17:39:11 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 17:39:11 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 17:39:11 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 17:39:11 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1671 ms
2025-01-29 17:39:12 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 17:39:12 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 17:39:12 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 17:39:12 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 17:39:12 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 17:39:14 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4193da4d
2025-01-29 17:39:14 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 17:39:15 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 17:39:16 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 17:39:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 17:39:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 17:39:35 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 17:39:36 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 17:39:38 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 17:39:38 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 17:39:38 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 17:39:38 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 17:39:39 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 17:39:39 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 17:39:39 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@20768912, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1ef5f5b6, org.springframework.security.web.context.SecurityContextHolderFilter@64947609, org.springframework.security.web.header.HeaderWriterFilter@11df2bc5, org.springframework.web.filter.CorsFilter@971a08b, org.springframework.security.web.authentication.logout.LogoutFilter@2ae9ba95, uz.pdp.config.filtr.MyFilter@165454f7, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@350b3c06, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5df429f8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6505bc3d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3cc22903, org.springframework.security.web.access.ExceptionTranslationFilter@3de7a229, org.springframework.security.web.access.intercept.AuthorizationFilter@3a307611]
2025-01-29 17:39:39 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 17:39:40 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 30.27 seconds (process running for 30.624)
2025-01-29 17:39:40 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:39:40 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 17:39:41 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 17:39:41 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:39:41 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:39:42 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 17:39:42 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 17:39:42 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 17:39:42 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-29 17:39:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:39:42 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-29 17:39:43 [http-nio-8080-exec-1] ERROR uz.pdp.controller.DoorController - Invalid color name provided: Classic White
2025-01-29 17:39:43 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-29 17:39:43 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-29 17:39:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:39:46 [http-nio-8080-exec-2] ERROR uz.pdp.controller.DoorController - Invalid color name provided: Classic White
2025-01-29 17:39:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:39:48 [http-nio-8080-exec-3] INFO  uz.pdp.service.DoorService - Searching for doors with color: Ivory
2025-01-29 17:39:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.color=? 
        and d1_0.active
2025-01-29 17:39:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 17:39:52 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:39:52 [http-nio-8080-exec-4] ERROR uz.pdp.controller.DoorController - Invalid color name provided: Classic White
2025-01-29 17:41:14 [http-nio-8080-exec-4] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 673 ms
2025-01-29 17:41:19 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 17:41:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-29 17:41:20 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-29 17:41:23 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 926085 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-29 17:41:23 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-29 17:41:23 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-29 17:41:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 17:41:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-29 17:41:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 102 ms. Found 13 JPA repository interfaces.
2025-01-29 17:41:24 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-29 17:41:24 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-29 17:41:24 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-29 17:41:24 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-29 17:41:24 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-29 17:41:24 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-29 17:41:24 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-29 17:41:24 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-29 17:41:24 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1642 ms
2025-01-29 17:41:25 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-29 17:41:25 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-29 17:41:25 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-29 17:41:25 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-29 17:41:25 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-29 17:41:27 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7baf7e2c
2025-01-29 17:41:27 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-29 17:41:28 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-29 17:41:29 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-29 17:41:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-29 17:41:31 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-29 17:41:49 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-29 17:41:49 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-29 17:41:51 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-29 17:41:51 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-29 17:41:51 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-29 17:41:51 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-29 17:41:52 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-29 17:41:52 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-29 17:41:52 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1ab37f73, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3b1c8384, org.springframework.security.web.context.SecurityContextHolderFilter@bb6ac6f, org.springframework.security.web.header.HeaderWriterFilter@8116822, org.springframework.web.filter.CorsFilter@3adee694, org.springframework.security.web.authentication.logout.LogoutFilter@50100b54, uz.pdp.config.filtr.MyFilter@38347345, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@7857879c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4e80632f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@257edcaa, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4fd7fab7, org.springframework.security.web.access.ExceptionTranslationFilter@75238a55, org.springframework.security.web.access.intercept.AuthorizationFilter@153fc2b1]
2025-01-29 17:41:53 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-29 17:41:53 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 30.351 seconds (process running for 30.673)
2025-01-29 17:41:53 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:41:53 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-29 17:41:53 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-29 17:41:53 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-29 17:41:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:41:53 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-29 17:41:54 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 17:41:54 [http-nio-8080-exec-1] ERROR uz.pdp.controller.DoorController - Invalid color name provided: White
2025-01-29 17:41:54 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:41:55 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-29 17:41:55 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-29 17:41:55 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-29 17:41:56 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-29 17:41:56 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-29 17:42:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-29 17:42:01 [http-nio-8080-exec-3] INFO  uz.pdp.service.DoorService - Searching for doors with color: Classic White
2025-01-29 17:42:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.color=? 
        and d1_0.active
2025-01-29 17:42:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 17:42:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-29 17:42:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
