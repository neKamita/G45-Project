2025-01-30 13:42:36 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 739038 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-30 13:42:36 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-30 13:42:36 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-30 13:42:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 13:42:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-30 13:42:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 107 ms. Found 13 JPA repository interfaces.
2025-01-30 13:42:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 13:42:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-30 13:42:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-30 13:42:37 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-30 13:42:37 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-30 13:42:37 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-30 13:42:37 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-30 13:42:37 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-30 13:42:37 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1640 ms
2025-01-30 13:42:37 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-30 13:42:37 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-30 13:42:37 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-30 13:42:38 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-30 13:42:38 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-30 13:42:40 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3f7f9d3f
2025-01-30 13:42:40 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-30 13:42:41 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-30 13:42:42 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-30 13:42:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-30 13:42:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-30 13:43:02 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 13:43:03 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-30 13:43:04 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-30 13:43:05 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-30 13:43:05 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-30 13:43:05 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-30 13:43:06 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-30 13:43:06 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-30 13:43:06 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@17016a7d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@712b4bbf, org.springframework.security.web.context.SecurityContextHolderFilter@5d729736, org.springframework.security.web.header.HeaderWriterFilter@38a104e6, org.springframework.web.filter.CorsFilter@6c3019b2, org.springframework.security.web.authentication.logout.LogoutFilter@51ed3e2b, uz.pdp.config.filtr.MyFilter@3fe5ad73, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@3e9ffa3a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4e090477, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@30f14c8, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5fbbd42d, org.springframework.security.web.access.ExceptionTranslationFilter@4d3229bf, org.springframework.security.web.access.intercept.AuthorizationFilter@34fa891d]
2025-01-30 13:43:07 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-30 13:43:07 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 31.79 seconds (process running for 32.176)
2025-01-30 13:43:07 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-30 13:43:08 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-30 13:43:08 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 13:43:09 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-30 13:43:09 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-30 13:43:09 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 13:43:10 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-30 13:43:10 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-30 13:43:11 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-30 13:43:12 [RMI TCP Connection(2)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-30 13:43:12 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-30 13:43:12 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-01-30 13:43:55 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 622 ms
2025-01-30 13:44:02 [http-nio-8080-exec-3] DEBUG uz.pdp.service.DoorService - 🚪 Fetching doors from page 0 with size 20
2025-01-30 13:44:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-30 13:44:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(d1_0.id) 
    from
        doors d1_0
2025-01-30 13:44:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:06 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:06 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:06 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:06 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:44:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:44:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:44:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:44:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:44:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:44:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:44:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:44:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:44:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:44:11 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:44:11 [http-nio-8080-exec-3] ERROR u.p.exception.GlobalExceptionHandler - Unexpected error occurred
org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Cannot invoke "java.lang.Double.doubleValue()" because "this.customWidth" is null
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:492)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:114)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:297)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:31)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:181)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:31)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Cannot invoke "java.lang.Double.doubleValue()" because "this.customWidth" is null (through reference chain: uz.pdp.payload.EntityResponse["data"]->uz.pdp.entity.Door["width"])
	at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:402)
	at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:361)
	at com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(StdSerializer.java:323)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:780)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(SerializerProvider.java:1150)
	at uz.pdp.config.RedisConfig$CollectionSerializer.serialize(RedisConfig.java:99)
	at uz.pdp.config.RedisConfig$CollectionSerializer.serialize(RedisConfig.java:1)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1572)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:483)
	... 134 common frames omitted
Caused by: java.lang.NullPointerException: Cannot invoke "java.lang.Double.doubleValue()" because "this.customWidth" is null
	at uz.pdp.entity.Door.getWidth(Door.java:179)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:688)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	... 147 common frames omitted
2025-01-30 13:47:09 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 13:47:09 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-30 13:47:11 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-30 13:47:59 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 769598 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-30 13:47:59 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-30 13:47:59 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-30 13:48:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 13:48:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-30 13:48:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 77 ms. Found 13 JPA repository interfaces.
2025-01-30 13:48:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 13:48:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-30 13:48:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-30 13:48:01 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-30 13:48:01 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-30 13:48:01 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-30 13:48:01 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-30 13:48:01 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-30 13:48:01 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1485 ms
2025-01-30 13:48:01 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-30 13:48:01 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-30 13:48:01 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-30 13:48:01 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-30 13:48:01 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-30 13:48:04 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@48861d1
2025-01-30 13:48:04 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-30 13:48:04 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-30 13:48:06 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-30 13:48:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-30 13:48:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-30 13:48:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-30 13:48:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       drop constraint if exists FK810a8gq30miyp6j1eub97qm6k
2025-01-30 13:48:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       drop constraint if exists FKara19f2xv7ml3a24f50v6bsk2
2025-01-30 13:48:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-30 13:48:08 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-30 13:48:08 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-30 13:48:08 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-30 13:48:08 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-30 13:48:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-30 13:48:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-30 13:48:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-30 13:48:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-30 13:48:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-30 13:48:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-30 13:48:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       drop constraint if exists FKkieeklwkgvfbf39kekutcssax
2025-01-30 13:48:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       drop constraint if exists FKgtkn0xv5nd1nfc0qd8vjfxxlx
2025-01-30 13:48:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-30 13:48:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-30 13:48:11 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-30 13:48:11 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-30 13:48:12 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket cascade
2025-01-30 13:48:12 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_item cascade
2025-01-30 13:48:12 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade
2025-01-30 13:48:12 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-30 13:48:13 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-30 13:48:13 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-30 13:48:13 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_available_colors cascade
2025-01-30 13:48:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-30 13:48:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-30 13:48:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-30 13:48:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-30 13:48:15 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-30 13:48:15 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-30 13:48:15 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-30 13:48:15 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding cascade
2025-01-30 13:48:16 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding_images cascade
2025-01-30 13:48:16 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-30 13:48:16 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-30 13:48:16 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-30 13:48:17 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-30 13:48:17 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-30 13:48:17 [main] DEBUG org.hibernate.SQL - 
    create table basket (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-30 13:48:17 [main] DEBUG org.hibernate.SQL - 
    create table basket_item (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version bigint not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')),
        primary key (id)
    )
2025-01-30 13:48:18 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        active boolean not null,
        id bigserial not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 13:48:18 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-30 13:48:18 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-30 13:48:19 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 13:48:19 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM'))
    )
2025-01-30 13:48:19 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-30 13:48:19 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-30 13:48:20 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_base_model boolean,
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        base_model_id bigint,
        category_id bigint,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')),
        custom_color_code varchar(255),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-30 13:48:20 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-30 13:48:20 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 13:48:20 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-30 13:48:21 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-30 13:48:21 [main] DEBUG org.hibernate.SQL - 
    create table moulding (
        price DECIMAL(10,2) not null,
        price_overall DECIMAL(10,2),
        quantity integer not null,
        id bigserial not null,
        user_id bigint not null,
        title varchar(100) not null,
        description varchar(1000),
        article varchar(255) not null unique,
        size varchar(255) not null,
        primary key (id)
    )
2025-01-30 13:48:21 [main] DEBUG org.hibernate.SQL - 
    create table moulding_images (
        moulding_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 13:48:22 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-30 13:48:22 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-30 13:48:22 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-30 13:48:22 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-30 13:48:23 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-30 13:48:23 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-30 13:48:23 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-30 13:48:23 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-30 13:48:24 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-30 13:48:24 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-30 13:48:24 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-30 13:48:24 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-30 13:48:25 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-30 13:48:25 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-30 13:48:25 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-30 13:48:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-30 13:48:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-30 13:48:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-30 13:48:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint FK810a8gq30miyp6j1eub97qm6k 
       foreign key (user_id) 
       references users
2025-01-30 13:48:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       add constraint FKara19f2xv7ml3a24f50v6bsk2 
       foreign key (basket_id) 
       references basket
2025-01-30 13:48:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-30 13:48:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-30 13:48:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-30 13:48:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-30 13:48:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-30 13:48:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-30 13:48:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-30 13:48:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-30 13:48:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-30 13:48:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-30 13:48:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-30 13:48:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       add constraint FKkieeklwkgvfbf39kekutcssax 
       foreign key (user_id) 
       references users
2025-01-30 13:48:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       add constraint FKgtkn0xv5nd1nfc0qd8vjfxxlx 
       foreign key (moulding_id) 
       references moulding
2025-01-30 13:48:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-30 13:48:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-30 13:48:31 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 13:48:31 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-30 13:48:33 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-30 13:48:34 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-30 13:48:34 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-30 13:48:34 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-30 13:48:34 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-30 13:48:34 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-30 13:48:34 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7ac363d6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@39d21bc9, org.springframework.security.web.context.SecurityContextHolderFilter@220a042e, org.springframework.security.web.header.HeaderWriterFilter@2d11e25a, org.springframework.web.filter.CorsFilter@31c80bb7, org.springframework.security.web.authentication.logout.LogoutFilter@21e55590, uz.pdp.config.filtr.MyFilter@5bcfdaf3, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@8116822, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6e860133, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@c8544ea, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@432fe1d7, org.springframework.security.web.access.ExceptionTranslationFilter@48474db4, org.springframework.security.web.access.intercept.AuthorizationFilter@6a3ee61e]
2025-01-30 13:48:35 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-30 13:48:35 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 36.491 seconds (process running for 36.919)
2025-01-30 13:48:35 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-30 13:48:36 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-30 13:48:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:37 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-30 13:48:37 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-30 13:48:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:48:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:48:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:48:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:48:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:48:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:48:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:48:40 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 13:48:40 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 13:48:41 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 13:48:41 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 13:48:41 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 13:48:42 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 13:48:42 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 13:48:42 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.role=?
2025-01-30 13:48:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:48 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-30 13:48:48 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-30 13:48:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:49 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 13:48:50 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:48:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:52 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:48:53 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:48:53 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:48:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:48:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:48:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:48:54 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:48:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:48:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:48:58 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:48:59 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:48:59 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:48:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:48:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:48:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:48:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:48:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:00 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:49:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:04 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:49:04 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:49:05 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:49:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:05 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:49:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:08 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:49:08 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:49:09 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:49:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:10 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:49:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:12 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:49:13 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:49:13 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:49:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:14 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:49:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:17 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:49:18 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:49:18 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:49:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:19 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:49:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:22 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:49:22 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:49:23 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:49:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:23 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:49:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:27 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:49:27 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:49:28 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:49:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:29 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:49:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:33 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:49:33 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:49:33 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:49:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:34 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:49:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:39 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:49:39 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:49:39 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:49:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:40 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:49:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:44 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:49:45 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:49:45 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:49:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:46 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:49:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:48 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:49:49 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:49:49 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:49:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:50 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:49:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:53 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:49:53 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:49:54 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:49:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:49:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:55 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:49:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:49:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:49:59 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:49:59 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:49:59 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:50:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:50:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:50:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:50:00 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-30 13:50:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:06 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-30 13:50:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:50:13 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-30 13:50:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:50:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:50:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:50:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:50:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:50:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:50:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:50:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:50:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:50:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:50:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:50:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:50:24 [RMI TCP Connection(3)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-30 13:50:24 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-30 13:50:24 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-30 13:50:36 [http-nio-8080-exec-1] DEBUG uz.pdp.service.DoorService - 🚪 Fetching doors from page 0 with size 20
2025-01-30 13:50:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-30 13:50:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(d1_0.id) 
    from
        doors d1_0
2025-01-30 13:50:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:50:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:44 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:44 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:44 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:44 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:50:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:52:31 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 13:52:31 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-30 13:52:33 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-30 13:52:34 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 795587 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-30 13:52:34 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-30 13:52:34 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-30 13:52:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 13:52:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-30 13:52:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 94 ms. Found 13 JPA repository interfaces.
2025-01-30 13:52:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 13:52:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-30 13:52:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-30 13:52:35 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-30 13:52:36 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-30 13:52:36 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-30 13:52:36 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-30 13:52:36 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-30 13:52:36 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1672 ms
2025-01-30 13:52:36 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-30 13:52:36 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-30 13:52:36 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-30 13:52:37 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-30 13:52:37 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-30 13:52:40 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1a916120
2025-01-30 13:52:40 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-30 13:52:40 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-30 13:52:41 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-30 13:52:42 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-30 13:52:42 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        id bigserial not null,
        city varchar(255),
        email varchar(255),
        is_default boolean not null,
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        location_id bigint,
        user_id bigint,
        primary key (id)
    )
2025-01-30 13:52:43 [main] DEBUG org.hibernate.SQL - 
    create table basket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-30 13:52:43 [main] DEBUG org.hibernate.SQL - 
    create table basket_item (
        id bigserial not null,
        image varchar(255),
        item_id bigint,
        name varchar(255),
        price float(53) not null,
        quantity integer not null,
        type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')),
        version bigint not null,
        basket_id bigint,
        primary key (id)
    )
2025-01-30 13:52:43 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        id bigserial not null,
        active boolean not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-30 13:52:44 [main] DEBUG org.hibernate.SQL - 
    create table company (
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        work_time date,
        address_id bigint,
        primary key (id)
    )
2025-01-30 13:52:44 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-30 13:52:44 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        id bigserial not null,
        created_at timestamp(6),
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        is_active boolean not null,
        name varchar(255) not null,
        created_by bigint,
        primary key (id)
    )
2025-01-30 13:52:44 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM'))
    )
2025-01-30 13:52:45 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        id bigserial not null,
        accessed_at timestamp(6),
        door_id bigint not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-30 13:52:45 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-30 13:52:45 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        id bigserial not null,
        active boolean not null,
        base_model_id bigint,
        color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')),
        custom_color_code varchar(255),
        custom_height float(53),
        custom_width float(53),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        final_price float(53),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        is_base_model boolean,
        is_custom_color boolean,
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        price float(53),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        warranty_years integer,
        category_id bigint,
        seller_id bigint,
        primary key (id)
    )
2025-01-30 13:52:45 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        id bigserial not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        updated_at timestamp(6),
        verification_code varchar(255) not null,
        verified boolean not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-30 13:52:46 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 13:52:46 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        price float(53) not null,
        stock_quantity integer not null,
        primary key (id)
    )
2025-01-30 13:52:46 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        id bigserial not null,
        latitude float(53),
        longitude float(53),
        marker_title varchar(255),
        primary key (id)
    )
2025-01-30 13:52:46 [main] DEBUG org.hibernate.SQL - 
    create table moulding (
        id bigserial not null,
        article varchar(255) not null,
        description varchar(1000),
        price DECIMAL(10,2) not null,
        price_overall DECIMAL(10,2),
        quantity integer not null,
        size varchar(255) not null,
        title varchar(100) not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-30 13:52:47 [main] DEBUG org.hibernate.SQL - 
    create table moulding_images (
        moulding_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 13:52:47 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        id bigserial not null,
        comment varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        delivery_notes varchar(1000),
        email varchar(255) not null,
        installation_notes varchar(1000),
        order_date timestamp(6) with time zone not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        preferred_delivery_time timestamp(6) with time zone,
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        door_id bigint not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-30 13:52:47 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-30 13:52:48 [main] DEBUG org.hibernate.SQL - 
    create table users (
        id bigserial not null,
        active boolean not null,
        email varchar(255),
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        seller_request_pending boolean not null,
        primary key (id)
    )
2025-01-30 13:52:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists UK_axs6uyyr900dc3gkocxk5qfcc
2025-01-30 13:52:48 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 13:52:48 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "uk_axs6uyyr900dc3gkocxk5qfcc" of relation "addresses" does not exist, skipping
2025-01-30 13:52:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint UK_axs6uyyr900dc3gkocxk5qfcc unique (location_id)
2025-01-30 13:52:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       drop constraint if exists UK_3nnxr5aak5yc79vn6ws9gcw4t
2025-01-30 13:52:49 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 13:52:49 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "uk_3nnxr5aak5yc79vn6ws9gcw4t" of relation "basket" does not exist, skipping
2025-01-30 13:52:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint UK_3nnxr5aak5yc79vn6ws9gcw4t unique (user_id)
2025-01-30 13:52:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists categories 
       drop constraint if exists UK_t8o6pivur7nn124jehx7cygw5
2025-01-30 13:52:49 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 13:52:49 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "uk_t8o6pivur7nn124jehx7cygw5" of relation "categories" does not exist, skipping
2025-01-30 13:52:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists categories 
       add constraint UK_t8o6pivur7nn124jehx7cygw5 unique (name)
2025-01-30 13:52:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists UK_h2rewspdf9bnwpbt1nauwiaww
2025-01-30 13:52:50 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 13:52:50 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "uk_h2rewspdf9bnwpbt1nauwiaww" of relation "company" does not exist, skipping
2025-01-30 13:52:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint UK_h2rewspdf9bnwpbt1nauwiaww unique (address_id)
2025-01-30 13:52:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists UK_pr30f0tp4fmq8o44axarlb0u1
2025-01-30 13:52:50 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 13:52:50 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "uk_pr30f0tp4fmq8o44axarlb0u1" of relation "custom_enum_values" does not exist, skipping
2025-01-30 13:52:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint UK_pr30f0tp4fmq8o44axarlb0u1 unique (name)
2025-01-30 13:52:50 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-30 13:52:51 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-30 13:52:51 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-30 13:52:51 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-30 13:52:51 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-30 13:52:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       drop constraint if exists UK_guntc6rq3sl58k5f3i8fl4lnv
2025-01-30 13:52:52 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 13:52:52 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "uk_guntc6rq3sl58k5f3i8fl4lnv" of relation "moulding" does not exist, skipping
2025-01-30 13:52:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       add constraint UK_guntc6rq3sl58k5f3i8fl4lnv unique (article)
2025-01-30 13:52:52 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-30 13:52:52 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-30 13:52:53 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-30 13:52:53 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-30 13:52:53 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-30 13:52:54 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-30 13:52:54 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-30 13:52:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists idx_user_email
2025-01-30 13:52:54 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 13:52:54 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_user_email" of relation "users" does not exist, skipping
2025-01-30 13:52:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint idx_user_email unique (email)
2025-01-30 13:52:55 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-30 13:52:55 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-30 13:52:55 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-30 13:52:55 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint FK810a8gq30miyp6j1eub97qm6k 
       foreign key (user_id) 
       references users
2025-01-30 13:52:56 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       add constraint FKara19f2xv7ml3a24f50v6bsk2 
       foreign key (basket_id) 
       references basket
2025-01-30 13:52:56 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-30 13:52:56 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-30 13:52:56 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-30 13:52:57 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-30 13:52:57 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-30 13:52:57 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-30 13:52:58 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-30 13:52:58 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-30 13:52:58 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-30 13:52:58 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-30 13:52:58 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-30 13:52:59 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       add constraint FKkieeklwkgvfbf39kekutcssax 
       foreign key (user_id) 
       references users
2025-01-30 13:52:59 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       add constraint FKgtkn0xv5nd1nfc0qd8vjfxxlx 
       foreign key (moulding_id) 
       references moulding
2025-01-30 13:52:59 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-30 13:52:59 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-30 13:53:00 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 13:53:00 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-30 13:53:02 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-30 13:53:02 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-30 13:53:02 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-30 13:53:02 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-30 13:53:03 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-30 13:53:03 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-30 13:53:03 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@16dd7311, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3a22a3f4, org.springframework.security.web.context.SecurityContextHolderFilter@1c61d57c, org.springframework.security.web.header.HeaderWriterFilter@64ffd1ef, org.springframework.web.filter.CorsFilter@41c5f0f5, org.springframework.security.web.authentication.logout.LogoutFilter@77389001, uz.pdp.config.filtr.MyFilter@4b9b5da5, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@23ed9727, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@c077275, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@71367037, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@8fc1750, org.springframework.security.web.access.ExceptionTranslationFilter@5a7ffa4c, org.springframework.security.web.access.intercept.AuthorizationFilter@66109995]
2025-01-30 13:53:04 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-30 13:53:04 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 29.775 seconds (process running for 30.233)
2025-01-30 13:53:04 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-30 13:53:04 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-30 13:53:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:05 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-30 13:53:05 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-30 13:53:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:53:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:53:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:53:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:53:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:53:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:53:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 13:53:08 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 13:53:08 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 13:53:09 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 13:53:09 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 13:53:09 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 13:53:10 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 13:53:10 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 13:53:10 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.role=?
2025-01-30 13:53:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:15 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-30 13:53:16 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-30 13:53:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:16 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 13:53:17 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:53:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:21 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:53:21 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:53:22 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:53:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:23 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:53:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:25 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:53:26 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:53:26 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:53:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:27 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:53:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:30 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:53:30 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:53:30 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:53:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:31 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:53:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:35 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:53:35 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:53:35 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:53:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:36 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:53:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:38 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:53:39 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:53:39 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:53:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:40 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:53:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:44 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:53:44 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:53:44 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:53:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:45 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:48 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:53:48 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:53:48 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:53:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:49 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:53:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:53 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:53:53 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:53:54 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:53:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:54 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:53:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:53:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:53:58 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:53:58 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:53:58 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:53:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:53:59 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:53:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:02 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:54:03 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:54:03 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:54:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:54:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:54:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:54:04 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:54:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:06 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:54:06 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:54:07 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:54:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:54:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:54:07 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:54:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:10 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:54:10 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:54:11 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:54:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:54:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:54:11 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 13:54:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:14 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 13:54:14 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:54:14 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:54:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:54:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 13:54:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 13:54:16 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-30 13:54:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:21 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        moulding m1_0
2025-01-30 13:54:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 13:54:27 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-30 13:54:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:54:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:54:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:54:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:54:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:54:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:54:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:54:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:54:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:54:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 13:54:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 13:54:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 13:54:38 [RMI TCP Connection(1)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-30 13:54:38 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-30 13:54:38 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-30 13:54:49 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 672 ms
2025-01-30 13:54:56 [http-nio-8080-exec-4] DEBUG uz.pdp.service.DoorService - 🚪 Fetching doors from page 0 with size 20
2025-01-30 13:54:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-30 13:54:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(d1_0.id) 
    from
        doors d1_0
2025-01-30 13:54:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:54:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:42 [http-nio-8080-exec-7] DEBUG uz.pdp.service.DoorService - 🚪 Fetching doors from page 0 with size 20
2025-01-30 13:55:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-30 13:55:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(d1_0.id) 
    from
        doors d1_0
2025-01-30 13:55:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 13:55:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:52 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:52 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:52 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:52 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 13:55:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:30:15 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 1007756 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-30 14:30:15 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-01-30 14:30:15 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-30 14:30:16 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:30:16 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-30 14:30:16 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 169 ms. Found 13 JPA repository interfaces.
2025-01-30 14:30:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:30:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-30 14:30:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-30 14:30:17 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-30 14:30:18 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-30 14:30:18 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-30 14:30:18 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-01-30 14:30:18 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-30 14:30:18 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2321 ms
2025-01-30 14:30:18 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-30 14:30:18 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-30 14:30:18 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-30 14:30:18 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-30 14:30:18 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-30 14:30:21 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1237aa73
2025-01-30 14:30:21 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-30 14:30:21 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-30 14:30:23 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-30 14:30:23 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-30 14:30:23 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-30 14:30:23 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-30 14:30:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       drop constraint if exists FK810a8gq30miyp6j1eub97qm6k
2025-01-30 14:30:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       drop constraint if exists FKara19f2xv7ml3a24f50v6bsk2
2025-01-30 14:30:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-30 14:30:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-30 14:30:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-30 14:30:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-30 14:30:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-30 14:30:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-30 14:30:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-30 14:30:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-30 14:30:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-30 14:30:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-30 14:30:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-30 14:30:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       drop constraint if exists FKkieeklwkgvfbf39kekutcssax
2025-01-30 14:30:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       drop constraint if exists FKgtkn0xv5nd1nfc0qd8vjfxxlx
2025-01-30 14:30:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-30 14:30:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-30 14:30:28 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-30 14:30:28 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-30 14:30:28 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket cascade
2025-01-30 14:30:28 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_item cascade
2025-01-30 14:30:29 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade
2025-01-30 14:30:29 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-30 14:30:29 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-30 14:30:29 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-30 14:30:30 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_available_colors cascade
2025-01-30 14:30:30 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-30 14:30:30 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-30 14:30:30 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-30 14:30:31 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 14:30:31 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - drop cascades to constraint fkhnsu61r3d0osc8r3qosr54qcs on table door_available_sizes
2025-01-30 14:30:31 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-30 14:30:31 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-30 14:30:31 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-30 14:30:31 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-30 14:30:32 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding cascade
2025-01-30 14:30:32 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding_images cascade
2025-01-30 14:30:32 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-30 14:30:32 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-30 14:30:33 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-30 14:30:33 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-30 14:30:33 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-30 14:30:34 [main] DEBUG org.hibernate.SQL - 
    create table basket (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-30 14:30:34 [main] DEBUG org.hibernate.SQL - 
    create table basket_item (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version bigint not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')),
        primary key (id)
    )
2025-01-30 14:30:34 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        active boolean not null,
        id bigserial not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 14:30:34 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-30 14:30:35 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-30 14:30:35 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 14:30:35 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM'))
    )
2025-01-30 14:30:35 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-30 14:30:36 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-30 14:30:36 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_base_model boolean,
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        base_model_id bigint,
        category_id bigint,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')),
        custom_color_code varchar(255),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-30 14:30:36 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:30:36 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 14:30:37 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:30:37 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-30 14:30:37 [main] DEBUG org.hibernate.SQL - 
    create table moulding (
        price DECIMAL(10,2) not null,
        price_overall DECIMAL(10,2),
        quantity integer not null,
        id bigserial not null,
        user_id bigint not null,
        title varchar(100) not null,
        description varchar(1000),
        article varchar(255) not null unique,
        size varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:30:37 [main] DEBUG org.hibernate.SQL - 
    create table moulding_images (
        moulding_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 14:30:38 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-30 14:30:38 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-30 14:30:38 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-30 14:30:38 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-30 14:30:39 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-30 14:30:39 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-30 14:30:39 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-30 14:30:39 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-30 14:30:40 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-30 14:30:40 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-30 14:30:40 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-30 14:30:40 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-30 14:30:41 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-30 14:30:41 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-30 14:30:41 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-30 14:30:41 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-30 14:30:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-30 14:30:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-30 14:30:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint FK810a8gq30miyp6j1eub97qm6k 
       foreign key (user_id) 
       references users
2025-01-30 14:30:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       add constraint FKara19f2xv7ml3a24f50v6bsk2 
       foreign key (basket_id) 
       references basket
2025-01-30 14:30:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-30 14:30:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-30 14:30:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-30 14:30:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-30 14:30:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-30 14:30:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-30 14:30:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-30 14:30:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-30 14:30:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-30 14:30:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-30 14:30:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-30 14:30:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       add constraint FKkieeklwkgvfbf39kekutcssax 
       foreign key (user_id) 
       references users
2025-01-30 14:30:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       add constraint FKgtkn0xv5nd1nfc0qd8vjfxxlx 
       foreign key (moulding_id) 
       references moulding
2025-01-30 14:30:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-30 14:30:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-30 14:30:46 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:30:47 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-30 14:30:49 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-30 14:30:50 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-30 14:30:50 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-30 14:30:50 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-30 14:30:50 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-30 14:30:50 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-30 14:30:50 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@636076d7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@56903603, org.springframework.security.web.context.SecurityContextHolderFilter@4c28d0b4, org.springframework.security.web.header.HeaderWriterFilter@2bab295f, org.springframework.web.filter.CorsFilter@b8dede0, org.springframework.security.web.authentication.logout.LogoutFilter@484adeaa, uz.pdp.config.filtr.MyFilter@64a7ad02, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@4f29506d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2b42d68b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@527d9cfe, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1158e89a, org.springframework.security.web.access.ExceptionTranslationFilter@55e49e54, org.springframework.security.web.access.intercept.AuthorizationFilter@79e50fc1]
2025-01-30 14:30:51 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-30 14:30:51 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 36.189 seconds (process running for 36.585)
2025-01-30 14:30:51 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-30 14:30:52 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-30 14:30:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:30:53 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-30 14:30:53 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-30 14:30:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:30:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:30:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:30:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:30:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:30:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:30:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:30:55 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 14:30:56 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 14:30:56 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:30:57 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:30:57 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:30:57 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:30:57 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:30:58 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.role=?
2025-01-30 14:30:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:30:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:30:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:30:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:30:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:30:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:31:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:31:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:31:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:31:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:31:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:31:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:31:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:31:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:31:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:33:45 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-30 14:33:45 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-30 14:33:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:33:46 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 14:33:47 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:33:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:33:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:33:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:33:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:33:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:33:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:33:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:33:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:33:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:33:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:33:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:33:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:33:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:33:49 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:33:49 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:33:50 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:33:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:33:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:33:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:33:51 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:33:51 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:33:51 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-30 14:33:51 [main] WARN  c.zaxxer.hikari.pool.ProxyConnection - HikariPool-1 - Connection org.postgresql.jdbc.PgConnection@1237aa73 marked as broken because of SQLSTATE(08006), ErrorCode(0)
org.postgresql.util.PSQLException: An I/O error occurred while sending to the backend.
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:395)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:327)
	at org.postgresql.jdbc.PgConnection.executeTransactionCommand(PgConnection.java:965)
	at org.postgresql.jdbc.PgConnection.commit(PgConnection.java:987)
	at com.zaxxer.hikari.pool.ProxyConnection.commit(ProxyConnection.java:377)
	at com.zaxxer.hikari.pool.HikariProxyConnection.commit(HikariProxyConnection.java)
	at org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor.commit(AbstractLogicalConnectionImplementor.java:86)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:268)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:561)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:794)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:757)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:669)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:419)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy225.findAll(Unknown Source)
	at uz.pdp.config.DataInitializer.createBaseDoor(DataInitializer.java:396)
	at uz.pdp.config.DataInitializer.initializeSampleDoors(DataInitializer.java:266)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:191)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: java.net.SocketException: Socket closed
	at java.base/sun.nio.ch.NioSocketImpl.endRead(NioSocketImpl.java:253)
	at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:332)
	at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:355)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:808)
	at java.base/java.net.Socket$SocketInputStream.read(Socket.java:966)
	at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:484)
	at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:478)
	at java.base/sun.security.ssl.SSLSocketInputRecord.bytesInCompletePacket(SSLSocketInputRecord.java:70)
	at java.base/sun.security.ssl.SSLSocketImpl.readApplicationRecord(SSLSocketImpl.java:1465)
	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1069)
	at org.postgresql.core.VisibleBufferedInputStream.readMore(VisibleBufferedInputStream.java:161)
	at org.postgresql.core.VisibleBufferedInputStream.ensureBytes(VisibleBufferedInputStream.java:128)
	at org.postgresql.core.VisibleBufferedInputStream.ensureBytes(VisibleBufferedInputStream.java:113)
	at org.postgresql.core.VisibleBufferedInputStream.read(VisibleBufferedInputStream.java:73)
	at org.postgresql.core.PGStream.receiveChar(PGStream.java:465)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2155)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	... 46 common frames omitted
2025-01-30 14:33:51 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-30 14:33:51 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'connectionFactory': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory$1.orderedStream(DefaultListableBeanFactory.java:473)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.detectPersistenceExceptionTranslators(PersistenceExceptionTranslationInterceptor.java:167)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:149)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy225.findAll(Unknown Source)
	at uz.pdp.config.DataInitializer.createBaseDoor(DataInitializer.java:396)
	at uz.pdp.config.DataInitializer.initializeSampleDoors(DataInitializer.java:266)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:191)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
2025-01-30 14:33:56 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-30 14:33:59 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 1028786 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-30 14:33:59 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-01-30 14:33:59 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-30 14:33:59 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:33:59 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-30 14:33:59 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 86 ms. Found 13 JPA repository interfaces.
2025-01-30 14:34:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:34:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-30 14:34:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-30 14:34:00 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-30 14:34:00 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-30 14:34:00 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-30 14:34:00 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-01-30 14:34:00 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-30 14:34:00 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1662 ms
2025-01-30 14:34:01 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-30 14:34:01 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-30 14:34:01 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-30 14:34:01 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-30 14:34:01 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-30 14:34:04 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1237aa73
2025-01-30 14:34:04 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-30 14:34:04 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-30 14:34:05 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-30 14:34:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-30 14:34:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-30 14:34:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-30 14:34:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       drop constraint if exists FK810a8gq30miyp6j1eub97qm6k
2025-01-30 14:34:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       drop constraint if exists FKara19f2xv7ml3a24f50v6bsk2
2025-01-30 14:34:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-30 14:34:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-30 14:34:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-30 14:34:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-30 14:34:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-30 14:34:08 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-30 14:34:08 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-30 14:34:08 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-30 14:34:08 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-30 14:34:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-30 14:34:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-30 14:34:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       drop constraint if exists FKkieeklwkgvfbf39kekutcssax
2025-01-30 14:34:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       drop constraint if exists FKgtkn0xv5nd1nfc0qd8vjfxxlx
2025-01-30 14:34:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-30 14:34:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-30 14:34:10 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-30 14:34:10 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-30 14:34:11 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket cascade
2025-01-30 14:34:11 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_item cascade
2025-01-30 14:34:12 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade
2025-01-30 14:34:12 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-30 14:34:12 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-30 14:34:12 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-30 14:34:13 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_available_colors cascade
2025-01-30 14:34:13 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-30 14:34:13 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-30 14:34:13 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-30 14:34:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-30 14:34:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-30 14:34:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-30 14:34:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-30 14:34:15 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding cascade
2025-01-30 14:34:15 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding_images cascade
2025-01-30 14:34:15 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-30 14:34:15 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-30 14:34:16 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-30 14:34:16 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-30 14:34:16 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-30 14:34:16 [main] DEBUG org.hibernate.SQL - 
    create table basket (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-30 14:34:17 [main] DEBUG org.hibernate.SQL - 
    create table basket_item (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version bigint not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')),
        primary key (id)
    )
2025-01-30 14:34:17 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        active boolean not null,
        id bigserial not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 14:34:17 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-30 14:34:17 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-30 14:34:18 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 14:34:18 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM'))
    )
2025-01-30 14:34:18 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-30 14:34:18 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-30 14:34:19 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_base_model boolean,
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        base_model_id bigint,
        category_id bigint,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')),
        custom_color_code varchar(255),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-30 14:34:19 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:34:19 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 14:34:19 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:34:20 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-30 14:34:20 [main] DEBUG org.hibernate.SQL - 
    create table moulding (
        price DECIMAL(10,2) not null,
        price_overall DECIMAL(10,2),
        quantity integer not null,
        id bigserial not null,
        user_id bigint not null,
        title varchar(100) not null,
        description varchar(1000),
        article varchar(255) not null unique,
        size varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:34:20 [main] DEBUG org.hibernate.SQL - 
    create table moulding_images (
        moulding_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 14:34:20 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-30 14:34:21 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-30 14:34:21 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-30 14:34:21 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-30 14:34:22 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-30 14:34:22 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-30 14:34:22 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-30 14:34:22 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-30 14:34:23 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-30 14:34:23 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-30 14:34:23 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-30 14:34:23 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-30 14:34:24 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-30 14:34:24 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-30 14:34:24 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-30 14:34:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-30 14:34:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-30 14:34:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-30 14:34:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint FK810a8gq30miyp6j1eub97qm6k 
       foreign key (user_id) 
       references users
2025-01-30 14:34:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       add constraint FKara19f2xv7ml3a24f50v6bsk2 
       foreign key (basket_id) 
       references basket
2025-01-30 14:34:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-30 14:34:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-30 14:34:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-30 14:34:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-30 14:34:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-30 14:34:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-30 14:34:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-30 14:34:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-30 14:34:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-30 14:34:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-30 14:34:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-30 14:34:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       add constraint FKkieeklwkgvfbf39kekutcssax 
       foreign key (user_id) 
       references users
2025-01-30 14:34:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       add constraint FKgtkn0xv5nd1nfc0qd8vjfxxlx 
       foreign key (moulding_id) 
       references moulding
2025-01-30 14:34:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-30 14:34:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-30 14:34:29 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:34:29 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'accessoryController': Lookup method resolution failed
2025-01-30 14:34:29 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:34:29 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-30 14:34:31 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-30 14:34:31 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-01-30 14:34:31 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-30 14:34:31 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'accessoryController': Lookup method resolution failed
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.checkLookupMethods(AutowiredAnnotationBeanPostProcessor.java:497)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:367)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory.java:1293)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:959)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: java.lang.IllegalStateException: Failed to introspect Class [uz.pdp.controller.AccessoryController] from ClassLoader [jdk.internal.loader.ClassLoaders$AppClassLoader@1dbd16a6]
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:483)
	at org.springframework.util.ReflectionUtils.doWithLocalMethods(ReflectionUtils.java:320)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.checkLookupMethods(AutowiredAnnotationBeanPostProcessor.java:475)
	... 19 common frames omitted
Caused by: java.lang.NoClassDefFoundError: FurnitureDoorCreateDTO
	at java.base/java.lang.Class.getDeclaredMethods0(Native Method)
	at java.base/java.lang.Class.privateGetDeclaredMethods(Class.java:3402)
	at java.base/java.lang.Class.getDeclaredMethods(Class.java:2504)
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:465)
	... 21 common frames omitted
Caused by: java.lang.ClassNotFoundException: FurnitureDoorCreateDTO
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)
	... 25 common frames omitted
2025-01-30 14:34:35 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 1032232 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-30 14:34:35 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-01-30 14:34:35 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-30 14:34:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:34:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-30 14:34:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 75 ms. Found 13 JPA repository interfaces.
2025-01-30 14:34:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:34:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-30 14:34:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-30 14:34:36 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-30 14:34:36 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-30 14:34:36 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-30 14:34:36 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-01-30 14:34:36 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-30 14:34:36 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1268 ms
2025-01-30 14:34:36 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-30 14:34:36 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-30 14:34:36 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-30 14:34:36 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-30 14:34:36 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-30 14:34:39 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@396f3bf2
2025-01-30 14:34:39 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-30 14:34:39 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-30 14:34:41 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-30 14:34:41 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-30 14:34:41 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-30 14:34:41 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-30 14:34:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       drop constraint if exists FK810a8gq30miyp6j1eub97qm6k
2025-01-30 14:34:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       drop constraint if exists FKara19f2xv7ml3a24f50v6bsk2
2025-01-30 14:34:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-30 14:34:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-30 14:34:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-30 14:34:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-30 14:34:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-30 14:34:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-30 14:34:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-30 14:34:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-30 14:34:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-30 14:34:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-30 14:34:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-30 14:34:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       drop constraint if exists FKkieeklwkgvfbf39kekutcssax
2025-01-30 14:34:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       drop constraint if exists FKgtkn0xv5nd1nfc0qd8vjfxxlx
2025-01-30 14:34:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-30 14:34:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-30 14:34:46 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-30 14:34:46 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-30 14:34:46 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket cascade
2025-01-30 14:34:46 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_item cascade
2025-01-30 14:34:47 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade
2025-01-30 14:34:47 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-30 14:34:47 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-30 14:34:47 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-30 14:34:48 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_available_colors cascade
2025-01-30 14:34:48 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-30 14:34:48 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-30 14:34:48 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-30 14:34:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-30 14:34:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-30 14:34:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-30 14:34:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-30 14:34:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding cascade
2025-01-30 14:34:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding_images cascade
2025-01-30 14:34:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-30 14:34:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-30 14:34:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-30 14:34:51 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-30 14:34:51 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-30 14:34:52 [main] DEBUG org.hibernate.SQL - 
    create table basket (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-30 14:34:52 [main] DEBUG org.hibernate.SQL - 
    create table basket_item (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version bigint not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')),
        primary key (id)
    )
2025-01-30 14:34:52 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        active boolean not null,
        id bigserial not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 14:34:52 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-30 14:34:53 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-30 14:34:53 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 14:34:53 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM'))
    )
2025-01-30 14:34:53 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-30 14:34:54 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-30 14:34:54 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_base_model boolean,
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        base_model_id bigint,
        category_id bigint,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')),
        custom_color_code varchar(255),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-30 14:34:54 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:34:54 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 14:34:55 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:34:55 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-30 14:34:55 [main] DEBUG org.hibernate.SQL - 
    create table moulding (
        price DECIMAL(10,2) not null,
        price_overall DECIMAL(10,2),
        quantity integer not null,
        id bigserial not null,
        user_id bigint not null,
        title varchar(100) not null,
        description varchar(1000),
        article varchar(255) not null unique,
        size varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:34:55 [main] DEBUG org.hibernate.SQL - 
    create table moulding_images (
        moulding_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 14:34:56 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-30 14:34:56 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-30 14:34:56 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-30 14:34:57 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-30 14:34:57 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-30 14:34:57 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-30 14:34:57 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-30 14:34:58 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-30 14:34:58 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-30 14:34:58 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-30 14:34:58 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-30 14:34:59 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-30 14:34:59 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-30 14:34:59 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-30 14:34:59 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-30 14:35:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-30 14:35:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-30 14:35:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-30 14:35:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint FK810a8gq30miyp6j1eub97qm6k 
       foreign key (user_id) 
       references users
2025-01-30 14:35:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       add constraint FKara19f2xv7ml3a24f50v6bsk2 
       foreign key (basket_id) 
       references basket
2025-01-30 14:35:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-30 14:35:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-30 14:35:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-30 14:35:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-30 14:35:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-30 14:35:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-30 14:35:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-30 14:35:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-30 14:35:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-30 14:35:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-30 14:35:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-30 14:35:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       add constraint FKkieeklwkgvfbf39kekutcssax 
       foreign key (user_id) 
       references users
2025-01-30 14:35:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       add constraint FKgtkn0xv5nd1nfc0qd8vjfxxlx 
       foreign key (moulding_id) 
       references moulding
2025-01-30 14:35:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-30 14:35:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-30 14:35:05 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:35:05 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'accessoryController': Lookup method resolution failed
2025-01-30 14:35:05 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:35:05 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-30 14:35:05 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-30 14:35:05 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-01-30 14:35:05 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-30 14:35:05 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'accessoryController': Lookup method resolution failed
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.checkLookupMethods(AutowiredAnnotationBeanPostProcessor.java:497)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:367)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory.java:1293)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:959)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: java.lang.IllegalStateException: Failed to introspect Class [uz.pdp.controller.AccessoryController] from ClassLoader [jdk.internal.loader.ClassLoaders$AppClassLoader@1dbd16a6]
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:483)
	at org.springframework.util.ReflectionUtils.doWithLocalMethods(ReflectionUtils.java:320)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.checkLookupMethods(AutowiredAnnotationBeanPostProcessor.java:475)
	... 19 common frames omitted
Caused by: java.lang.NoClassDefFoundError: FurnitureDoorCreateDTO
	at java.base/java.lang.Class.getDeclaredMethods0(Native Method)
	at java.base/java.lang.Class.privateGetDeclaredMethods(Class.java:3402)
	at java.base/java.lang.Class.getDeclaredMethods(Class.java:2504)
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:465)
	... 21 common frames omitted
Caused by: java.lang.ClassNotFoundException: FurnitureDoorCreateDTO
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)
	... 25 common frames omitted
2025-01-30 14:35:40 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 1038140 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-30 14:35:40 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-01-30 14:35:40 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-30 14:35:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:35:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-30 14:35:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 76 ms. Found 13 JPA repository interfaces.
2025-01-30 14:35:41 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:35:41 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-30 14:35:41 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-30 14:35:41 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-30 14:35:41 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-30 14:35:41 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-30 14:35:41 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-01-30 14:35:41 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-30 14:35:41 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1408 ms
2025-01-30 14:35:41 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-30 14:35:41 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-30 14:35:41 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-30 14:35:42 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-30 14:35:42 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-30 14:35:44 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1237aa73
2025-01-30 14:35:44 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-30 14:35:45 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-30 14:35:46 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-30 14:35:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price set data type DECIMAL(10,2)
2025-01-30 14:35:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       alter column price_overall set data type DECIMAL(10,2)
2025-01-30 14:35:48 [main] DEBUG org.hibernate.SQL - 
    create index idx_category_name 
       on categories (name)
2025-01-30 14:35:48 [main] DEBUG org.hibernate.SQL - 
    create index idx_category_active 
       on categories (active)
2025-01-30 14:35:48 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_color 
       on doors (color)
2025-01-30 14:35:49 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_size 
       on doors (size)
2025-01-30 14:35:49 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_seller 
       on doors (seller_id)
2025-01-30 14:35:49 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_category 
       on doors (category_id)
2025-01-30 14:35:50 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_location 
       on doors (door_location)
2025-01-30 14:35:50 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_frame_type 
       on doors (frame_type)
2025-01-30 14:35:50 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_type 
       on furniture_doors (furniture_type)
2025-01-30 14:35:51 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_material 
       on furniture_doors (material)
2025-01-30 14:35:51 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_price 
       on furniture_doors (price)
2025-01-30 14:35:51 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_stock 
       on furniture_doors (stock_quantity)
2025-01-30 14:35:51 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_name 
       on furniture_doors (name)
2025-01-30 14:35:55 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 1039291 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-30 14:35:55 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-01-30 14:35:55 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-30 14:35:55 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:35:55 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-30 14:35:55 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 76 ms. Found 13 JPA repository interfaces.
2025-01-30 14:35:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:35:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-30 14:35:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-30 14:35:56 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-30 14:35:56 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-30 14:35:56 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-30 14:35:56 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-01-30 14:35:56 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-30 14:35:56 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1403 ms
2025-01-30 14:35:57 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-30 14:35:57 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-30 14:35:57 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-30 14:35:57 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-30 14:35:57 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-30 14:35:59 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@13da6bc9
2025-01-30 14:35:59 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-30 14:36:00 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-30 14:36:01 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-30 14:36:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-30 14:36:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-30 14:36:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-30 14:36:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       drop constraint if exists FK810a8gq30miyp6j1eub97qm6k
2025-01-30 14:36:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       drop constraint if exists FKara19f2xv7ml3a24f50v6bsk2
2025-01-30 14:36:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-30 14:36:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-30 14:36:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-30 14:36:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-30 14:36:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-30 14:36:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-30 14:36:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-30 14:36:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-30 14:36:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-30 14:36:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-30 14:36:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-30 14:36:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       drop constraint if exists FKkieeklwkgvfbf39kekutcssax
2025-01-30 14:36:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       drop constraint if exists FKgtkn0xv5nd1nfc0qd8vjfxxlx
2025-01-30 14:36:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-30 14:36:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-30 14:36:06 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-30 14:36:06 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-30 14:36:07 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket cascade
2025-01-30 14:36:07 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_item cascade
2025-01-30 14:36:07 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade
2025-01-30 14:36:07 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-30 14:36:08 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-30 14:36:08 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-30 14:36:08 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_available_colors cascade
2025-01-30 14:36:08 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-30 14:36:09 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-30 14:36:09 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-30 14:36:09 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-30 14:36:10 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-30 14:36:10 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-30 14:36:10 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-30 14:36:10 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding cascade
2025-01-30 14:36:11 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding_images cascade
2025-01-30 14:36:11 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-30 14:36:11 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-30 14:36:11 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-30 14:36:12 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-30 14:36:12 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-30 14:36:12 [main] DEBUG org.hibernate.SQL - 
    create table basket (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-30 14:36:12 [main] DEBUG org.hibernate.SQL - 
    create table basket_item (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version bigint not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')),
        primary key (id)
    )
2025-01-30 14:36:13 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        active boolean not null,
        id bigserial not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 14:36:13 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-30 14:36:13 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-30 14:36:13 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 14:36:14 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM'))
    )
2025-01-30 14:36:14 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-30 14:36:14 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-30 14:36:15 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_base_model boolean,
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        base_model_id bigint,
        category_id bigint,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')),
        custom_color_code varchar(255),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-30 14:36:15 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:36:15 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 14:36:15 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:36:16 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-30 14:36:16 [main] DEBUG org.hibernate.SQL - 
    create table moulding (
        price DECIMAL(10,2) not null,
        price_overall DECIMAL(10,2),
        quantity integer not null,
        id bigserial not null,
        user_id bigint not null,
        title varchar(100) not null,
        description varchar(1000),
        article varchar(255) not null unique,
        size varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:36:16 [main] DEBUG org.hibernate.SQL - 
    create table moulding_images (
        moulding_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 14:36:17 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-30 14:36:17 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-30 14:36:17 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-30 14:36:17 [main] DEBUG org.hibernate.SQL - 
    create index idx_category_name 
       on categories (name)
2025-01-30 14:36:18 [main] DEBUG org.hibernate.SQL - 
    create index idx_category_active 
       on categories (active)
2025-01-30 14:36:18 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-30 14:36:18 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-30 14:36:18 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-30 14:36:19 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-30 14:36:19 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-30 14:36:19 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_color 
       on doors (color)
2025-01-30 14:36:20 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_size 
       on doors (size)
2025-01-30 14:36:20 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_seller 
       on doors (seller_id)
2025-01-30 14:36:20 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_category 
       on doors (category_id)
2025-01-30 14:36:20 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_location 
       on doors (door_location)
2025-01-30 14:36:20 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_frame_type 
       on doors (frame_type)
2025-01-30 14:36:21 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_type 
       on furniture_doors (furniture_type)
2025-01-30 14:36:21 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_material 
       on furniture_doors (material)
2025-01-30 14:36:21 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_price 
       on furniture_doors (price)
2025-01-30 14:36:21 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_stock 
       on furniture_doors (stock_quantity)
2025-01-30 14:36:22 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_name 
       on furniture_doors (name)
2025-01-30 14:36:22 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-30 14:36:22 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-30 14:36:23 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-30 14:36:23 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-30 14:36:23 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-30 14:36:24 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-30 14:36:24 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-30 14:36:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-30 14:36:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-30 14:36:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-30 14:36:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint FK810a8gq30miyp6j1eub97qm6k 
       foreign key (user_id) 
       references users
2025-01-30 14:36:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       add constraint FKara19f2xv7ml3a24f50v6bsk2 
       foreign key (basket_id) 
       references basket
2025-01-30 14:36:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-30 14:36:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-30 14:36:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-30 14:36:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-30 14:36:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-30 14:36:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-30 14:36:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-30 14:36:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-30 14:36:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-30 14:36:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-30 14:36:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-30 14:36:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding 
       add constraint FKkieeklwkgvfbf39kekutcssax 
       foreign key (user_id) 
       references users
2025-01-30 14:36:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       add constraint FKgtkn0xv5nd1nfc0qd8vjfxxlx 
       foreign key (moulding_id) 
       references moulding
2025-01-30 14:36:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-30 14:36:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-30 14:36:29 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:36:30 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-30 14:36:32 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-30 14:36:32 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-30 14:36:32 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-30 14:36:32 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-30 14:36:33 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-30 14:36:33 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-30 14:36:33 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@397fbcb3, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@45012a91, org.springframework.security.web.context.SecurityContextHolderFilter@42a33581, org.springframework.security.web.header.HeaderWriterFilter@4f814423, org.springframework.web.filter.CorsFilter@1d563a95, org.springframework.security.web.authentication.logout.LogoutFilter@521e9242, uz.pdp.config.filtr.MyFilter@60484429, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@6b1a218b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6d899de1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@63103cb7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@487c412f, org.springframework.security.web.access.ExceptionTranslationFilter@3882617a, org.springframework.security.web.access.intercept.AuthorizationFilter@2f0d47d6]
2025-01-30 14:36:34 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-30 14:36:34 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 39.033 seconds (process running for 39.275)
2025-01-30 14:36:34 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-30 14:36:34 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-30 14:36:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:35 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-30 14:36:36 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-30 14:36:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:36:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:36:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:36:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:36:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:36:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:36:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:36:38 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 14:36:39 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 14:36:39 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:36:39 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:36:40 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:36:40 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:36:40 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:36:40 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.role=?
2025-01-30 14:36:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:45 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-30 14:36:46 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-30 14:36:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:46 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 14:36:47 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:36:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:51 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:36:51 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:36:51 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:36:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:36:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:36:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:36:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:36:52 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:36:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:56 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:36:56 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:36:56 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:36:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:36:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:36:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:36:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:36:57 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:36:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:36:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:36:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:37:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:37:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:37:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:37:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:37:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:37:00 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:37:00 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:37:01 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:37:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:37:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:37:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:37:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:37:01 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:37:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:37:02 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 22001
2025-01-30 14:37:02 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: value too long for type character varying(255)
2025-01-30 14:37:02 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-30 14:37:02 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.dao.DataIntegrityViolationException: could not execute statement [ERROR: value too long for type character varying(255)] [insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]; SQL [insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy224.save(Unknown Source)
	at uz.pdp.config.DataInitializer.initializeSampleDoors(DataInitializer.java:269)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:191)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: org.hibernate.exception.DataException: could not execute statement [ERROR: value too long for type character varying(255)] [insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:103)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:758)
	at jdk.internal.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy2/jdk.proxy2.$Proxy210.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at jdk.internal.reflect.GeneratedMethodAccessor68.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 29 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: value too long for type character varying(255)
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:152)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 77 common frames omitted
2025-01-30 14:37:03 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:37:03 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-30 14:37:03 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-30 14:37:42 [main] INFO  u.p.p.ProjectModul10ApplicationTests - Starting ProjectModul10ApplicationTests using Java 17.0.14 with PID 1048505 (started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-30 14:37:42 [main] DEBUG u.p.p.ProjectModul10ApplicationTests - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-01-30 14:37:42 [main] INFO  u.p.p.ProjectModul10ApplicationTests - No active profile set, falling back to 1 default profile: "default"
2025-01-30 14:37:43 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:37:43 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-30 14:37:43 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 144 ms. Found 13 JPA repository interfaces.
2025-01-30 14:37:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:37:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-30 14:37:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-01-30 14:37:44 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-30 14:37:44 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-30 14:37:44 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-30 14:37:45 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-30 14:37:45 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-30 14:37:45 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-30 14:37:48 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@6a0a5b0e
2025-01-30 14:37:48 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-30 14:37:48 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-30 14:37:50 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-30 14:37:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-30 14:37:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-30 14:37:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-30 14:37:51 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_items 
       drop constraint if exists FKnx44qatthch57p2bgo873qfxu
2025-01-30 14:37:51 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 14:37:51 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - relation "basket_items" does not exist, skipping
2025-01-30 14:37:51 [main] DEBUG org.hibernate.SQL - 
    alter table if exists baskets 
       drop constraint if exists FK87s17cinc4wkx0taas5nh0s8h
2025-01-30 14:37:51 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 14:37:51 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - relation "baskets" does not exist, skipping
2025-01-30 14:37:51 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-30 14:37:51 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-30 14:37:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-30 14:37:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-30 14:37:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-30 14:37:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-30 14:37:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-30 14:37:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-30 14:37:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-30 14:37:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-30 14:37:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-30 14:37:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-30 14:37:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-30 14:37:54 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-30 14:37:55 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-30 14:37:55 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_items cascade
2025-01-30 14:37:55 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 14:37:55 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - table "basket_items" does not exist, skipping
2025-01-30 14:37:55 [main] DEBUG org.hibernate.SQL - 
    drop table if exists baskets cascade
2025-01-30 14:37:55 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 14:37:55 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - table "baskets" does not exist, skipping
2025-01-30 14:37:55 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade
2025-01-30 14:37:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-30 14:37:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-30 14:37:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-30 14:37:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_available_colors cascade
2025-01-30 14:37:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-30 14:37:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-30 14:37:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-30 14:37:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-30 14:37:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-30 14:37:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-30 14:37:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-30 14:37:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-30 14:37:59 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-30 14:37:59 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-30 14:37:59 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 14:37:59 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - drop cascades to 2 other objects
2025-01-30 14:37:59 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-30 14:38:00 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-30 14:38:00 [main] DEBUG org.hibernate.SQL - 
    create table basket_items (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version bigint not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')),
        primary key (id)
    )
2025-01-30 14:38:00 [main] DEBUG org.hibernate.SQL - 
    create table baskets (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-30 14:38:00 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        active boolean not null,
        id bigserial not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 14:38:01 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-30 14:38:01 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-30 14:38:01 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 14:38:01 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM'))
    )
2025-01-30 14:38:02 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-30 14:38:02 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-30 14:38:02 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_base_model boolean,
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        base_model_id bigint,
        category_id bigint,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')),
        custom_color_code varchar(255),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-30 14:38:03 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:38:03 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 14:38:03 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:38:03 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-30 14:38:03 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-30 14:38:04 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-30 14:38:04 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-30 14:38:04 [main] DEBUG org.hibernate.SQL - 
    create index idx_address_user 
       on addresses (user_id)
2025-01-30 14:38:05 [main] DEBUG org.hibernate.SQL - 
    create index idx_address_city 
       on addresses (city)
2025-01-30 14:38:05 [main] DEBUG org.hibernate.SQL - 
    create index idx_address_default 
       on addresses (is_default)
2025-01-30 14:38:05 [main] DEBUG org.hibernate.SQL - 
    create index idx_address_phone 
       on addresses (phone_number)
2025-01-30 14:38:05 [main] DEBUG org.hibernate.SQL - 
    create index idx_basketitem_basket 
       on basket_items (basket_id)
2025-01-30 14:38:06 [main] DEBUG org.hibernate.SQL - 
    create index idx_basketitem_item 
       on basket_items (item_id, type)
2025-01-30 14:38:06 [main] DEBUG org.hibernate.SQL - 
    create index idx_basketitem_name 
       on basket_items (name)
2025-01-30 14:38:06 [main] DEBUG org.hibernate.SQL - 
    create index idx_category_name 
       on categories (name)
2025-01-30 14:38:06 [main] DEBUG org.hibernate.SQL - 
    create index idx_category_active 
       on categories (active)
2025-01-30 14:38:07 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-30 14:38:07 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-30 14:38:07 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-30 14:38:08 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-30 14:38:08 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-30 14:38:08 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_color 
       on doors (color)
2025-01-30 14:38:08 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_size 
       on doors (size)
2025-01-30 14:38:09 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_seller 
       on doors (seller_id)
2025-01-30 14:38:09 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_category 
       on doors (category_id)
2025-01-30 14:38:09 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_location 
       on doors (door_location)
2025-01-30 14:38:09 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_frame_type 
       on doors (frame_type)
2025-01-30 14:38:10 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_type 
       on furniture_doors (furniture_type)
2025-01-30 14:38:10 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_material 
       on furniture_doors (material)
2025-01-30 14:38:10 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_price 
       on furniture_doors (price)
2025-01-30 14:38:10 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_stock 
       on furniture_doors (stock_quantity)
2025-01-30 14:38:11 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_name 
       on furniture_doors (name)
2025-01-30 14:38:11 [main] DEBUG org.hibernate.SQL - 
    create index idx_location_coords 
       on locations (latitude, longitude)
2025-01-30 14:38:11 [main] DEBUG org.hibernate.SQL - 
    create index idx_location_title 
       on locations (marker_title)
2025-01-30 14:38:12 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-30 14:38:12 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-30 14:38:12 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-30 14:38:12 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-30 14:38:13 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-30 14:38:13 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-30 14:38:13 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-30 14:38:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-30 14:38:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-30 14:38:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-30 14:38:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_items 
       add constraint FKnx44qatthch57p2bgo873qfxu 
       foreign key (basket_id) 
       references baskets
2025-01-30 14:38:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists baskets 
       add constraint FK87s17cinc4wkx0taas5nh0s8h 
       foreign key (user_id) 
       references users
2025-01-30 14:38:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-30 14:38:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-30 14:38:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-30 14:38:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-30 14:38:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-30 14:38:16 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-30 14:38:16 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-30 14:38:16 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-30 14:38:16 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-30 14:38:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-30 14:38:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-30 14:38:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-30 14:38:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-30 14:38:18 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:38:18 [main] WARN  com.amazonaws.util.VersionInfoUtils - The AWS SDK for Java 1.x entered maintenance mode starting July 31, 2024 and will reach end of support on December 31, 2025. For more information, see https://aws.amazon.com/blogs/developer/the-aws-sdk-for-java-1-x-is-in-maintenance-mode-effective-july-31-2024/
You can print where on the file system the AWS SDK for Java 1.x core runtime is located by setting the AWS_JAVA_V1_PRINT_LOCATION environment variable or aws.java.v1.printLocation system property to 'true'.
This message can be disabled by setting the AWS_JAVA_V1_DISABLE_DEPRECATION_ANNOUNCEMENT environment variable or aws.java.v1.disableDeprecationAnnouncement system property to 'true'.
The AWS SDK for Java 1.x is being used here:
at java.base/java.lang.Thread.getStackTrace(Thread.java:1619)
at com.amazonaws.util.VersionInfoUtils.printDeprecationAnnouncement(VersionInfoUtils.java:81)
at com.amazonaws.util.VersionInfoUtils.<clinit>(VersionInfoUtils.java:59)
at com.amazonaws.internal.EC2ResourceFetcher.<clinit>(EC2ResourceFetcher.java:44)
at com.amazonaws.auth.InstanceMetadataServiceCredentialsFetcher.<init>(InstanceMetadataServiceCredentialsFetcher.java:38)
at com.amazonaws.auth.InstanceProfileCredentialsProvider.<init>(InstanceProfileCredentialsProvider.java:111)
at com.amazonaws.auth.InstanceProfileCredentialsProvider.<init>(InstanceProfileCredentialsProvider.java:91)
at com.amazonaws.auth.InstanceProfileCredentialsProvider.<init>(InstanceProfileCredentialsProvider.java:75)
at com.amazonaws.auth.InstanceProfileCredentialsProvider.<clinit>(InstanceProfileCredentialsProvider.java:58)
at com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper.initializeProvider(EC2ContainerCredentialsProviderWrapper.java:66)
at com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper.<init>(EC2ContainerCredentialsProviderWrapper.java:55)
at com.amazonaws.auth.DefaultAWSCredentialsProviderChain.<init>(DefaultAWSCredentialsProviderChain.java:60)
at com.amazonaws.auth.DefaultAWSCredentialsProviderChain.<clinit>(DefaultAWSCredentialsProviderChain.java:54)
at com.amazonaws.services.s3.AmazonS3ClientBuilder.standard(AmazonS3ClientBuilder.java:46)
at uz.pdp.config.S3Config.s3Client(S3Config.java:29)
at uz.pdp.config.S3Config$$SpringCGLIB$$0.CGLIB$s3Client$0(<generated>)
at uz.pdp.config.S3Config$$SpringCGLIB$$FastClass$$1.invoke(<generated>)
at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
at uz.pdp.config.S3Config$$SpringCGLIB$$0.s3Client(<generated>)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)
at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:647)
at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:485)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1334)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1164)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:959)
at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:552)
at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
at java.base/java.util.Optional.orElseGet(Optional.java:364)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)
at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-01-30 14:38:19 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-30 14:38:20 [main] WARN  o.s.w.c.s.GenericWebApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accessoryController' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/controller/AccessoryController.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
2025-01-30 14:38:20 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:38:20 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-30 14:38:21 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-30 14:38:21 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-30 14:38:21 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accessoryController' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/controller/AccessoryController.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:959)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:552)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 97 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 111 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 125 common frames omitted
Caused by: java.lang.IllegalArgumentException: Not a managed type: class uz.pdp.entity.Moulding
	at org.hibernate.metamodel.model.domain.internal.JpaMetamodelImpl.managedType(JpaMetamodelImpl.java:193)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.managedType(MappingMetamodelImpl.java:468)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.managedType(MappingMetamodelImpl.java:98)
	at org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.<init>(JpaMetamodelEntityInformation.java:82)
	at org.springframework.data.jpa.repository.support.JpaEntityInformationSupport.getEntityInformation(JpaEntityInformationSupport.java:69)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getEntityInformation(JpaRepositoryFactory.java:246)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:211)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:194)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:1)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:317)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:279)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:285)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 136 common frames omitted
2025-01-30 14:38:21 [main] WARN  o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [uz.pdp.projectmodul10.ProjectModul10ApplicationTests@4f566f39]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@2ed913f9 testClass = uz.pdp.projectmodul10.ProjectModul10ApplicationTests, locations = [], classes = [uz.pdp.projectmodul10.ProjectModul10Application], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@2f4919b0, org.springframework.boot.test.graphql.tester.HttpGraphQlTesterContextCustomizer@4d7e7435, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1f86099a, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@aa21042, org.springframework.boot.test.web.reactive.server.WebTestClientContextCustomizer@601cbd8c, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@1f, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizer@5a4c638d, org.springframework.boot.test.context.SpringBootTestAnnotation@d60daacf], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:180)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accessoryController' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/controller/AccessoryController.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:959)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:552)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	... 73 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 97 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 111 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 125 common frames omitted
Caused by: java.lang.IllegalArgumentException: Not a managed type: class uz.pdp.entity.Moulding
	at org.hibernate.metamodel.model.domain.internal.JpaMetamodelImpl.managedType(JpaMetamodelImpl.java:193)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.managedType(MappingMetamodelImpl.java:468)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.managedType(MappingMetamodelImpl.java:98)
	at org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.<init>(JpaMetamodelEntityInformation.java:82)
	at org.springframework.data.jpa.repository.support.JpaEntityInformationSupport.getEntityInformation(JpaEntityInformationSupport.java:69)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getEntityInformation(JpaRepositoryFactory.java:246)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:211)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:194)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:1)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:317)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:279)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:285)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 136 common frames omitted
2025-01-30 14:38:38 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 1052862 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-30 14:38:38 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-01-30 14:38:38 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-30 14:38:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:38:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-30 14:38:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 107 ms. Found 13 JPA repository interfaces.
2025-01-30 14:38:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:38:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-30 14:38:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-30 14:38:39 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-30 14:38:39 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-30 14:38:39 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-30 14:38:39 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-01-30 14:38:39 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-30 14:38:39 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1718 ms
2025-01-30 14:38:40 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-30 14:38:40 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-30 14:38:40 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-30 14:38:40 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-30 14:38:40 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-30 14:38:42 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4b6942a0
2025-01-30 14:38:42 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-30 14:38:43 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-30 14:38:44 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-30 14:38:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-30 14:38:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-30 14:38:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-30 14:38:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_items 
       drop constraint if exists FKnx44qatthch57p2bgo873qfxu
2025-01-30 14:38:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists baskets 
       drop constraint if exists FK87s17cinc4wkx0taas5nh0s8h
2025-01-30 14:38:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-30 14:38:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-30 14:38:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-30 14:38:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-30 14:38:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-30 14:38:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-30 14:38:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-30 14:38:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-30 14:38:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-30 14:38:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-30 14:38:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-30 14:38:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       drop constraint if exists FKll33f306u5605rgv2rc840un3
2025-01-30 14:38:49 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 14:38:49 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "fkll33f306u5605rgv2rc840un3" of relation "moulding_images" does not exist, skipping
2025-01-30 14:38:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists mouldings 
       drop constraint if exists FK36rcxe5tvln9tgb3gyneemqfv
2025-01-30 14:38:49 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 14:38:49 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - relation "mouldings" does not exist, skipping
2025-01-30 14:38:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-30 14:38:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-30 14:38:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-30 14:38:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-30 14:38:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_items cascade
2025-01-30 14:38:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists baskets cascade
2025-01-30 14:38:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists categories cascade
2025-01-30 14:38:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-30 14:38:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-30 14:38:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-30 14:38:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_available_colors cascade
2025-01-30 14:38:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-30 14:38:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-30 14:38:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-30 14:38:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-30 14:38:53 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-30 14:38:53 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-30 14:38:53 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-30 14:38:53 [main] DEBUG org.hibernate.SQL - 
    drop table if exists moulding_images cascade
2025-01-30 14:38:54 [main] DEBUG org.hibernate.SQL - 
    drop table if exists mouldings cascade
2025-01-30 14:38:54 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 14:38:54 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - table "mouldings" does not exist, skipping
2025-01-30 14:38:54 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-30 14:38:54 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-30 14:38:54 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-30 14:38:55 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-30 14:38:55 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-30 14:38:55 [main] DEBUG org.hibernate.SQL - 
    create table basket_items (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version bigint not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')),
        primary key (id)
    )
2025-01-30 14:38:56 [main] DEBUG org.hibernate.SQL - 
    create table baskets (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-30 14:38:56 [main] DEBUG org.hibernate.SQL - 
    create table categories (
        active boolean not null,
        id bigserial not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 14:38:56 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-30 14:38:56 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-30 14:38:57 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-30 14:38:57 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM'))
    )
2025-01-30 14:38:57 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-30 14:38:57 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-30 14:38:58 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_base_model boolean,
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        base_model_id bigint,
        category_id bigint,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')),
        custom_color_code varchar(255),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-30 14:38:58 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:38:58 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 14:38:58 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:38:59 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-30 14:38:59 [main] DEBUG org.hibernate.SQL - 
    create table moulding_images (
        moulding_id bigint not null,
        image_url varchar(255)
    )
2025-01-30 14:38:59 [main] DEBUG org.hibernate.SQL - 
    create table mouldings (
        price DECIMAL(10,2) not null,
        price_overall DECIMAL(10,2),
        quantity integer not null,
        id bigserial not null,
        user_id bigint not null,
        title varchar(100) not null,
        description varchar(1000),
        article varchar(255) not null unique,
        size varchar(255) not null,
        primary key (id)
    )
2025-01-30 14:38:59 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-30 14:39:00 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-30 14:39:00 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-30 14:39:00 [main] DEBUG org.hibernate.SQL - 
    create index idx_address_user 
       on addresses (user_id)
2025-01-30 14:39:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_address_city 
       on addresses (city)
2025-01-30 14:39:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_address_default 
       on addresses (is_default)
2025-01-30 14:39:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_address_phone 
       on addresses (phone_number)
2025-01-30 14:39:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_basketitem_basket 
       on basket_items (basket_id)
2025-01-30 14:39:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_basketitem_item 
       on basket_items (item_id, type)
2025-01-30 14:39:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_basketitem_name 
       on basket_items (name)
2025-01-30 14:39:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_category_name 
       on categories (name)
2025-01-30 14:39:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_category_active 
       on categories (active)
2025-01-30 14:39:03 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-30 14:39:03 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-30 14:39:03 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-30 14:39:03 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-30 14:39:04 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-30 14:39:04 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_color 
       on doors (color)
2025-01-30 14:39:04 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_size 
       on doors (size)
2025-01-30 14:39:04 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_seller 
       on doors (seller_id)
2025-01-30 14:39:05 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_category 
       on doors (category_id)
2025-01-30 14:39:05 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_location 
       on doors (door_location)
2025-01-30 14:39:05 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_frame_type 
       on doors (frame_type)
2025-01-30 14:39:05 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_type 
       on furniture_doors (furniture_type)
2025-01-30 14:39:06 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_material 
       on furniture_doors (material)
2025-01-30 14:39:06 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_price 
       on furniture_doors (price)
2025-01-30 14:39:06 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_stock 
       on furniture_doors (stock_quantity)
2025-01-30 14:39:06 [main] DEBUG org.hibernate.SQL - 
    create index idx_furniture_name 
       on furniture_doors (name)
2025-01-30 14:39:07 [main] DEBUG org.hibernate.SQL - 
    create index idx_location_coords 
       on locations (latitude, longitude)
2025-01-30 14:39:07 [main] DEBUG org.hibernate.SQL - 
    create index idx_location_title 
       on locations (marker_title)
2025-01-30 14:39:07 [main] DEBUG org.hibernate.SQL - 
    create index idx_moulding_title 
       on mouldings (title)
2025-01-30 14:39:08 [main] DEBUG org.hibernate.SQL - 
    create index idx_moulding_price 
       on mouldings (price)
2025-01-30 14:39:08 [main] DEBUG org.hibernate.SQL - 
    create index idx_moulding_size 
       on mouldings (size)
2025-01-30 14:39:08 [main] DEBUG org.hibernate.SQL - 
    create index idx_moulding_user 
       on mouldings (user_id)
2025-01-30 14:39:09 [main] DEBUG org.hibernate.SQL - 
    create index idx_moulding_quantity 
       on mouldings (quantity)
2025-01-30 14:39:09 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-30 14:39:09 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-30 14:39:10 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-30 14:39:10 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-30 14:39:10 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-30 14:39:10 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-30 14:39:11 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-30 14:39:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-30 14:39:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-30 14:39:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-30 14:39:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_items 
       add constraint FKnx44qatthch57p2bgo873qfxu 
       foreign key (basket_id) 
       references baskets
2025-01-30 14:39:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists baskets 
       add constraint FK87s17cinc4wkx0taas5nh0s8h 
       foreign key (user_id) 
       references users
2025-01-30 14:39:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-30 14:39:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-30 14:39:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-30 14:39:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-30 14:39:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-30 14:39:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-30 14:39:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-30 14:39:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 
       foreign key (category_id) 
       references categories
2025-01-30 14:39:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-30 14:39:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-30 14:39:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-30 14:39:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists moulding_images 
       add constraint FKll33f306u5605rgv2rc840un3 
       foreign key (moulding_id) 
       references mouldings
2025-01-30 14:39:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists mouldings 
       add constraint FK36rcxe5tvln9tgb3gyneemqfv 
       foreign key (user_id) 
       references users
2025-01-30 14:39:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-30 14:39:16 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-30 14:39:16 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:39:17 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-30 14:39:18 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-30 14:39:19 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-30 14:39:19 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-30 14:39:19 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-30 14:39:20 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-30 14:39:20 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-30 14:39:20 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@19a052a1, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2fc8a7b0, org.springframework.security.web.context.SecurityContextHolderFilter@5bb048a2, org.springframework.security.web.header.HeaderWriterFilter@2ce8935d, org.springframework.web.filter.CorsFilter@7e5d8e1a, org.springframework.security.web.authentication.logout.LogoutFilter@5786c476, uz.pdp.config.filtr.MyFilter@5dac6bc3, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@1bd4a372, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@514d8a82, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6fed49a6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1dde0a2d, org.springframework.security.web.access.ExceptionTranslationFilter@4d067c0f, org.springframework.security.web.access.intercept.AuthorizationFilter@3f07d890]
2025-01-30 14:39:21 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-30 14:39:21 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 43.304 seconds (process running for 47.0)
2025-01-30 14:39:21 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-30 14:39:21 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-30 14:39:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:22 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-30 14:39:22 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        categories c1_0
2025-01-30 14:39:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:39:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:39:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:39:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:39:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:39:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:39:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        categories
        (active, name) 
    values
        (?, ?)
2025-01-30 14:39:25 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 14:39:26 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 14:39:26 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:39:26 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:39:27 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:39:27 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:39:27 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0 
    where
        c1_0.name=?
2025-01-30 14:39:27 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.role=?
2025-01-30 14:39:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:32 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-30 14:39:33 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-30 14:39:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:33 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-30 14:39:34 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:39:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:38 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:39:38 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:39:38 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:39:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:39 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:39:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:42 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:39:43 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:39:43 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:39:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:44 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:39:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:47 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:39:47 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:39:48 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:39:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:48 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:39:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:52 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:39:52 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:39:52 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:39:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:53 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:39:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:56 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:39:57 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:39:57 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:39:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:39:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:58 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:39:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:39:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:39:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:02 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:40:02 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:40:02 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:40:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:03 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:40:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:06 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:40:07 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:40:07 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:40:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:08 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:40:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:11 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:40:11 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:40:11 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:40:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:12 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:40:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:16 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:40:16 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:40:16 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:40:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:17 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:40:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:20 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:40:20 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:40:20 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:40:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:21 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:40:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:24 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:40:25 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:40:25 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:40:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:26 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:40:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:29 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:40:29 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:40:30 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:40:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:30 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:40:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:33 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:34 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:40:34 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:40:34 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:40:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:36 [main] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.active,
        c1_0.name 
    from
        categories c1_0
2025-01-30 14:40:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:39 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-30 14:40:39 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:40:40 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:40:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-30 14:40:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, category_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-30 14:40:41 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-30 14:40:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:46 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        mouldings m1_0
2025-01-30 14:40:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        mouldings
        (article, description, price, price_overall, quantity, size, title, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        moulding_images
        (moulding_id, image_url) 
    values
        (?, ?)
2025-01-30 14:40:52 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        addresses a1_0
2025-01-30 14:40:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 14:40:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:40:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:40:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 14:40:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:40:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:40:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 14:40:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:40:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:40:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 14:40:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:40:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:40:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 14:40:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:40:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:40:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 14:40:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:40:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:40:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 14:40:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:40:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:40:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:41:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 14:41:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:41:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:41:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:41:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 14:41:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:41:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:41:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:41:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        locations
        (latitude, longitude, marker_title) 
    values
        (?, ?, ?)
2025-01-30 14:41:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        addresses
        (city, email, is_default, location_id, name, phone_number, street, user_id, working_hours) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-30 14:41:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:41:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        address_social_links
        (address_id, social_type, link) 
    values
        (?, ?, ?)
2025-01-30 14:42:33 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-30 14:42:33 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-30 14:42:33 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-30 14:42:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-30 14:42:34 [http-nio-8080-exec-1] DEBUG uz.pdp.service.DoorService - 🚪 Fetching doors from page 0 with size 20
2025-01-30 14:42:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.category_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-30 14:42:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(d1_0.id) 
    from
        doors d1_0
2025-01-30 14:42:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-30 14:42:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:44 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:44 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:44 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:42:44 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-30 14:43:16 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:43:16 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-30 14:43:17 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-30 14:43:22 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 1076420 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-30 14:43:22 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-01-30 14:43:22 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-30 14:43:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:43:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-30 14:43:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 121 ms. Found 13 JPA repository interfaces.
2025-01-30 14:43:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:43:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-30 14:43:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-30 14:43:24 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-30 14:43:24 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-30 14:43:24 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-30 14:43:24 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-01-30 14:43:24 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-30 14:43:24 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2231 ms
2025-01-30 14:43:25 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-30 14:43:25 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-30 14:43:25 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-30 14:43:25 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-30 14:43:25 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-30 14:43:28 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4b6942a0
2025-01-30 14:43:28 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-30 14:43:28 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-30 14:43:30 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-30 14:43:30 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@9c7699e] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-01-30 14:43:31 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-01-30 14:43:31 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-01-30 14:43:32 [main] DEBUG org.hibernate.SQL - alter table if exists baskets drop constraint if exists idx_basket_user
2025-01-30 14:43:32 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 14:43:32 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_basket_user" of relation "baskets" does not exist, skipping
2025-01-30 14:43:32 [main] DEBUG org.hibernate.SQL - alter table if exists baskets add constraint idx_basket_user unique (user_id)
2025-01-30 14:43:34 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings drop constraint if exists idx_moulding_article
2025-01-30 14:43:34 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 14:43:34 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_moulding_article" of relation "mouldings" does not exist, skipping
2025-01-30 14:43:34 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings add constraint idx_moulding_article unique (article)
2025-01-30 14:43:35 [main] DEBUG org.hibernate.SQL - alter table if exists users drop constraint if exists idx_user_email
2025-01-30 14:43:35 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-30 14:43:35 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_user_email" of relation "users" does not exist, skipping
2025-01-30 14:43:35 [main] DEBUG org.hibernate.SQL - alter table if exists users add constraint idx_user_email unique (email)
2025-01-30 14:43:52 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:43:53 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-30 14:43:55 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-30 14:43:56 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-30 14:43:56 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-30 14:43:56 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-30 14:43:56 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-30 14:43:56 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-30 14:43:57 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1d9c0b84, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@250b6331, org.springframework.security.web.context.SecurityContextHolderFilter@5ce648c7, org.springframework.security.web.header.HeaderWriterFilter@4adf6a2, org.springframework.web.filter.CorsFilter@3aa89755, org.springframework.security.web.authentication.logout.LogoutFilter@5668b3a5, uz.pdp.config.filtr.MyFilter@5dac6bc3, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@71a22720, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@ccae68f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2e9680e2, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2cf9bb2c, org.springframework.security.web.access.ExceptionTranslationFilter@4a872709, org.springframework.security.web.access.intercept.AuthorizationFilter@58c23786]
2025-01-30 14:43:58 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-30 14:43:58 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 36.44 seconds (process running for 39.55)
2025-01-30 14:43:58 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-01-30 14:43:59 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-01-30 14:43:59 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-01-30 14:44:00 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-01-30 14:44:00 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-01-30 14:44:01 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-01-30 14:44:01 [main] DEBUG org.hibernate.SQL - select count(*) from furniture_doors fd1_0
2025-01-30 14:44:02 [main] DEBUG org.hibernate.SQL - select count(*) from mouldings m1_0
2025-01-30 14:44:02 [main] DEBUG org.hibernate.SQL - select count(*) from addresses a1_0
2025-01-30 14:44:23 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-30 14:44:23 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-30 14:44:23 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-01-30 14:44:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-01-30 14:44:24 [http-nio-8080-exec-1] DEBUG uz.pdp.service.DoorService - 🚪 Fetching doors from page 0 with size 20
2025-01-30 14:44:24 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 offset ? rows fetch first ? rows only
2025-01-30 14:44:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(d1_0.id) from doors d1_0
2025-01-30 14:44:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id = any (?)
2025-01-30 14:44:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id = any (?)
2025-01-30 14:54:03 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:54:03 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-30 14:54:04 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-30 14:54:10 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 1136897 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-30 14:54:10 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-01-30 14:54:10 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-30 14:54:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:54:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-30 14:54:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 110 ms. Found 13 JPA repository interfaces.
2025-01-30 14:54:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:54:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-30 14:54:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-30 14:54:11 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-30 14:54:11 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-30 14:54:11 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-30 14:54:11 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-01-30 14:54:11 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-30 14:54:11 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1654 ms
2025-01-30 14:54:12 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-30 14:54:12 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-30 14:54:12 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-30 14:54:12 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-30 14:54:12 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-30 14:54:15 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@65192f16
2025-01-30 14:54:15 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-30 14:54:15 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-30 14:54:16 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-30 14:54:16 [main] DEBUG org.hibernate.SQL - alter table if exists address_social_links drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-30 14:54:17 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@2081c267] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-01-30 14:54:17 [main] DEBUG org.hibernate.SQL - alter table if exists addresses drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-30 14:54:17 [main] DEBUG org.hibernate.SQL - alter table if exists addresses drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-30 14:54:17 [main] DEBUG org.hibernate.SQL - alter table if exists basket_items drop constraint if exists FKnx44qatthch57p2bgo873qfxu
2025-01-30 14:54:18 [main] DEBUG org.hibernate.SQL - alter table if exists baskets drop constraint if exists FK87s17cinc4wkx0taas5nh0s8h
2025-01-30 14:54:18 [main] DEBUG org.hibernate.SQL - alter table if exists company drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-30 14:54:18 [main] DEBUG org.hibernate.SQL - alter table if exists company_socials_list drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-30 14:54:18 [main] DEBUG org.hibernate.SQL - alter table if exists custom_enum_values drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-30 14:54:19 [main] DEBUG org.hibernate.SQL - alter table if exists door_available_colors drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-30 14:54:19 [main] DEBUG org.hibernate.SQL - alter table if exists door_history drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-30 14:54:19 [main] DEBUG org.hibernate.SQL - alter table if exists door_history drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-30 14:54:19 [main] DEBUG org.hibernate.SQL - alter table if exists door_images drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-30 14:54:20 [main] DEBUG org.hibernate.SQL - alter table if exists doors drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-30 14:54:20 [main] DEBUG org.hibernate.SQL - alter table if exists doors drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-30 14:54:20 [main] DEBUG org.hibernate.SQL - alter table if exists email_verifications drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-30 14:54:21 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_door_images drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-30 14:54:21 [main] DEBUG org.hibernate.SQL - alter table if exists moulding_images drop constraint if exists FKll33f306u5605rgv2rc840un3
2025-01-30 14:54:21 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings drop constraint if exists FK36rcxe5tvln9tgb3gyneemqfv
2025-01-30 14:54:21 [main] DEBUG org.hibernate.SQL - alter table if exists orders drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-30 14:54:22 [main] DEBUG org.hibernate.SQL - alter table if exists orders drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-30 14:54:22 [main] DEBUG org.hibernate.SQL - drop table if exists address_social_links cascade
2025-01-30 14:54:22 [main] DEBUG org.hibernate.SQL - drop table if exists addresses cascade
2025-01-30 14:54:22 [main] DEBUG org.hibernate.SQL - drop table if exists basket_items cascade
2025-01-30 14:54:23 [main] DEBUG org.hibernate.SQL - drop table if exists baskets cascade
2025-01-30 14:54:23 [main] DEBUG org.hibernate.SQL - drop table if exists categories cascade
2025-01-30 14:54:23 [main] DEBUG org.hibernate.SQL - drop table if exists company cascade
2025-01-30 14:54:23 [main] DEBUG org.hibernate.SQL - drop table if exists company_socials_list cascade
2025-01-30 14:54:24 [main] DEBUG org.hibernate.SQL - drop table if exists custom_enum_values cascade
2025-01-30 14:54:24 [main] DEBUG org.hibernate.SQL - drop table if exists door_available_colors cascade
2025-01-30 14:54:24 [main] DEBUG org.hibernate.SQL - drop table if exists door_history cascade
2025-01-30 14:54:24 [main] DEBUG org.hibernate.SQL - drop table if exists door_images cascade
2025-01-30 14:54:25 [main] DEBUG org.hibernate.SQL - drop table if exists doors cascade
2025-01-30 14:54:25 [main] DEBUG org.hibernate.SQL - drop table if exists email_verifications cascade
2025-01-30 14:54:25 [main] DEBUG org.hibernate.SQL - drop table if exists furniture_door_images cascade
2025-01-30 14:54:26 [main] DEBUG org.hibernate.SQL - drop table if exists furniture_doors cascade
2025-01-30 14:54:26 [main] DEBUG org.hibernate.SQL - drop table if exists locations cascade
2025-01-30 14:54:26 [main] DEBUG org.hibernate.SQL - drop table if exists moulding_images cascade
2025-01-30 14:54:26 [main] DEBUG org.hibernate.SQL - drop table if exists mouldings cascade
2025-01-30 14:54:27 [main] DEBUG org.hibernate.SQL - drop table if exists orders cascade
2025-01-30 14:54:27 [main] DEBUG org.hibernate.SQL - drop table if exists ticket cascade
2025-01-30 14:54:27 [main] DEBUG org.hibernate.SQL - drop table if exists users cascade
2025-01-30 14:54:27 [main] DEBUG org.hibernate.SQL - create table address_social_links (address_id bigint not null, link varchar(255), social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')), primary key (address_id, social_type))
2025-01-30 14:54:27 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@71fa6aa7] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-01-30 14:54:28 [main] DEBUG org.hibernate.SQL - create table addresses (is_default boolean not null, id bigserial not null, location_id bigint unique, user_id bigint, city varchar(255), email varchar(255), name varchar(255), phone_number varchar(255), street varchar(255), working_hours varchar(255), primary key (id))
2025-01-30 14:54:28 [main] DEBUG org.hibernate.SQL - create table basket_items (price float(53) not null, quantity integer not null, basket_id bigint, id bigserial not null, item_id bigint, version bigint not null, image varchar(255), name varchar(255), type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')), primary key (id))
2025-01-30 14:54:28 [main] DEBUG org.hibernate.SQL - create table baskets (id bigserial not null, user_id bigint unique, primary key (id))
2025-01-30 14:54:28 [main] DEBUG org.hibernate.SQL - create table categories (active boolean not null, id bigserial not null, name varchar(255) not null unique, primary key (id))
2025-01-30 14:54:29 [main] DEBUG org.hibernate.SQL - create table company (work_time date, address_id bigint unique, id bigserial not null, email varchar(255), name varchar(255), phone varchar(255), primary key (id))
2025-01-30 14:54:29 [main] DEBUG org.hibernate.SQL - create table company_socials_list (company_id bigint not null, socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')))
2025-01-30 14:54:29 [main] DEBUG org.hibernate.SQL - create table custom_enum_values (is_active boolean not null, created_at timestamp(6), created_by bigint, id bigserial not null, display_name varchar(255) not null, enum_type varchar(255) not null, name varchar(255) not null unique, primary key (id))
2025-01-30 14:54:30 [main] DEBUG org.hibernate.SQL - create table door_available_colors (door_id bigint not null, available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')))
2025-01-30 14:54:30 [main] DEBUG org.hibernate.SQL - create table door_history (accessed_at timestamp(6), door_id bigint not null, id bigserial not null, user_id bigint not null, primary key (id))
2025-01-30 14:54:30 [main] DEBUG org.hibernate.SQL - create table door_images (door_id bigint not null, images varchar(255))
2025-01-30 14:54:30 [main] DEBUG org.hibernate.SQL - create table doors (active boolean not null, custom_height float(53), custom_width float(53), final_price float(53), is_base_model boolean, is_custom_color boolean, price float(53), warranty_years integer, base_model_id bigint, category_id bigint, id bigserial not null, seller_id bigint, color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')), custom_color_code varchar(255), description varchar(255), door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')), frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')), hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')), manufacturer varchar(255), material varchar(255), name varchar(255), size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')), status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')), primary key (id))
2025-01-30 14:54:31 [main] DEBUG org.hibernate.SQL - create table email_verifications (verified boolean not null, created_at timestamp(6), expiry_time timestamp(6) not null, id bigserial not null, updated_at timestamp(6), user_id bigint not null, type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')), verification_code varchar(255) not null, primary key (id))
2025-01-30 14:54:31 [main] DEBUG org.hibernate.SQL - create table furniture_door_images (furniture_door_id bigint not null, image_url varchar(255))
2025-01-30 14:54:31 [main] DEBUG org.hibernate.SQL - create table furniture_doors (price float(53) not null, stock_quantity integer not null, id bigserial not null, description varchar(255), dimensions varchar(255), furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')), material varchar(255) not null, name varchar(255) not null, primary key (id))
2025-01-30 14:54:31 [main] DEBUG org.hibernate.SQL - create table locations (latitude float(53), longitude float(53), id bigserial not null, marker_title varchar(255), primary key (id))
2025-01-30 14:54:32 [main] DEBUG org.hibernate.SQL - create table moulding_images (moulding_id bigint not null, image_url varchar(255))
2025-01-30 14:54:32 [main] DEBUG org.hibernate.SQL - create table mouldings (price DECIMAL(10,2) not null, price_overall DECIMAL(10,2), quantity integer not null, id bigserial not null, user_id bigint not null, title varchar(100) not null, description varchar(1000), article varchar(255) not null unique, size varchar(255) not null, primary key (id))
2025-01-30 14:54:32 [main] DEBUG org.hibernate.SQL - create table orders (door_id bigint not null, id bigserial not null, order_date timestamp(6) with time zone not null, preferred_delivery_time timestamp(6) with time zone, user_id bigint not null, comment varchar(1000), delivery_notes varchar(1000), installation_notes varchar(1000), contact_phone varchar(255) not null, customer_name varchar(255) not null, delivery_address varchar(255) not null, email varchar(255) not null, order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')), status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')), primary key (id))
2025-01-30 14:54:33 [main] DEBUG org.hibernate.SQL - create table ticket (id bigserial not null, user_id bigint, primary key (id))
2025-01-30 14:54:33 [main] DEBUG org.hibernate.SQL - create table users (active boolean not null, seller_request_pending boolean not null, id bigserial not null, email varchar(255) unique, lastname varchar(255), name varchar(255), password varchar(255), phone varchar(255) not null, role varchar(255) not null check (role in ('USER','SELLER','ADMIN')), primary key (id))
2025-01-30 14:54:33 [main] DEBUG org.hibernate.SQL - create index idx_address_user on addresses (user_id)
2025-01-30 14:54:33 [main] DEBUG org.hibernate.SQL - create index idx_address_city on addresses (city)
2025-01-30 14:54:34 [main] DEBUG org.hibernate.SQL - create index idx_address_default on addresses (is_default)
2025-01-30 14:54:34 [main] DEBUG org.hibernate.SQL - create index idx_address_phone on addresses (phone_number)
2025-01-30 14:54:34 [main] DEBUG org.hibernate.SQL - create index idx_basketitem_basket on basket_items (basket_id)
2025-01-30 14:54:34 [main] DEBUG org.hibernate.SQL - create index idx_basketitem_item on basket_items (item_id, type)
2025-01-30 14:54:35 [main] DEBUG org.hibernate.SQL - create index idx_basketitem_name on basket_items (name)
2025-01-30 14:54:35 [main] DEBUG org.hibernate.SQL - create index idx_category_name on categories (name)
2025-01-30 14:54:35 [main] DEBUG org.hibernate.SQL - create index idx_category_active on categories (active)
2025-01-30 14:54:36 [main] DEBUG org.hibernate.SQL - create index idx_door_material on doors (material)
2025-01-30 14:54:36 [main] DEBUG org.hibernate.SQL - create index idx_door_manufacturer on doors (manufacturer)
2025-01-30 14:54:36 [main] DEBUG org.hibernate.SQL - create index idx_door_price on doors (price)
2025-01-30 14:54:36 [main] DEBUG org.hibernate.SQL - create index idx_door_name on doors (name)
2025-01-30 14:54:37 [main] DEBUG org.hibernate.SQL - create index idx_door_active_status on doors (active, status)
2025-01-30 14:54:37 [main] DEBUG org.hibernate.SQL - create index idx_door_color on doors (color)
2025-01-30 14:54:37 [main] DEBUG org.hibernate.SQL - create index idx_door_size on doors (size)
2025-01-30 14:54:37 [main] DEBUG org.hibernate.SQL - create index idx_door_seller on doors (seller_id)
2025-01-30 14:54:38 [main] DEBUG org.hibernate.SQL - create index idx_door_category on doors (category_id)
2025-01-30 14:54:38 [main] DEBUG org.hibernate.SQL - create index idx_door_location on doors (door_location)
2025-01-30 14:54:38 [main] DEBUG org.hibernate.SQL - create index idx_door_frame_type on doors (frame_type)
2025-01-30 14:54:38 [main] DEBUG org.hibernate.SQL - create index idx_furniture_type on furniture_doors (furniture_type)
2025-01-30 14:54:39 [main] DEBUG org.hibernate.SQL - create index idx_furniture_material on furniture_doors (material)
2025-01-30 14:54:39 [main] DEBUG org.hibernate.SQL - create index idx_furniture_price on furniture_doors (price)
2025-01-30 14:54:39 [main] DEBUG org.hibernate.SQL - create index idx_furniture_stock on furniture_doors (stock_quantity)
2025-01-30 14:54:39 [main] DEBUG org.hibernate.SQL - create index idx_furniture_name on furniture_doors (name)
2025-01-30 14:54:40 [main] DEBUG org.hibernate.SQL - create index idx_location_coords on locations (latitude, longitude)
2025-01-30 14:54:40 [main] DEBUG org.hibernate.SQL - create index idx_location_title on locations (marker_title)
2025-01-30 14:54:40 [main] DEBUG org.hibernate.SQL - create index idx_moulding_title on mouldings (title)
2025-01-30 14:54:40 [main] DEBUG org.hibernate.SQL - create index idx_moulding_price on mouldings (price)
2025-01-30 14:54:41 [main] DEBUG org.hibernate.SQL - create index idx_moulding_size on mouldings (size)
2025-01-30 14:54:41 [main] DEBUG org.hibernate.SQL - create index idx_moulding_user on mouldings (user_id)
2025-01-30 14:54:41 [main] DEBUG org.hibernate.SQL - create index idx_moulding_quantity on mouldings (quantity)
2025-01-30 14:54:42 [main] DEBUG org.hibernate.SQL - create index idx_order_user on orders (user_id)
2025-01-30 14:54:42 [main] DEBUG org.hibernate.SQL - create index idx_order_door on orders (door_id)
2025-01-30 14:54:42 [main] DEBUG org.hibernate.SQL - create index idx_order_status_date on orders (status, order_date)
2025-01-30 14:54:42 [main] DEBUG org.hibernate.SQL - create index idx_order_type_date on orders (order_type, order_date)
2025-01-30 14:54:43 [main] DEBUG org.hibernate.SQL - create index idx_user_name on users (name)
2025-01-30 14:54:43 [main] DEBUG org.hibernate.SQL - create index idx_user_phone on users (phone)
2025-01-30 14:54:43 [main] DEBUG org.hibernate.SQL - create index idx_user_role_active on users (role, active)
2025-01-30 14:54:44 [main] DEBUG org.hibernate.SQL - alter table if exists address_social_links add constraint FKf8co3916tiiox4iohci7ybiyg foreign key (address_id) references addresses
2025-01-30 14:54:44 [main] DEBUG org.hibernate.SQL - alter table if exists addresses add constraint FK7wf86ejdl44syummkme09y06f foreign key (location_id) references locations
2025-01-30 14:54:44 [main] DEBUG org.hibernate.SQL - alter table if exists addresses add constraint FK1fa36y2oqhao3wgg2rw1pi459 foreign key (user_id) references users
2025-01-30 14:54:44 [main] DEBUG org.hibernate.SQL - alter table if exists basket_items add constraint FKnx44qatthch57p2bgo873qfxu foreign key (basket_id) references baskets
2025-01-30 14:54:45 [main] DEBUG org.hibernate.SQL - alter table if exists baskets add constraint FK87s17cinc4wkx0taas5nh0s8h foreign key (user_id) references users
2025-01-30 14:54:45 [main] DEBUG org.hibernate.SQL - alter table if exists company add constraint FKlgeojgfhu94pbgyev43gtwdyq foreign key (address_id) references addresses
2025-01-30 14:54:45 [main] DEBUG org.hibernate.SQL - alter table if exists company_socials_list add constraint FKt90ivcl5f3phabfuqw6k3t9ow foreign key (company_id) references company
2025-01-30 14:54:45 [main] DEBUG org.hibernate.SQL - alter table if exists custom_enum_values add constraint FKbmmwc1jeq02ocr0c6mgv45yiy foreign key (created_by) references users
2025-01-30 14:54:46 [main] DEBUG org.hibernate.SQL - alter table if exists door_available_colors add constraint FKd2g3blkiuq2wj2trx3wnjk5me foreign key (door_id) references doors
2025-01-30 14:54:46 [main] DEBUG org.hibernate.SQL - alter table if exists door_history add constraint FKlskx5ehjqd7u0dmumo4bhuliu foreign key (door_id) references doors
2025-01-30 14:54:46 [main] DEBUG org.hibernate.SQL - alter table if exists door_history add constraint FKajibco0vlgy0ngsyg33k0wb0u foreign key (user_id) references users
2025-01-30 14:54:46 [main] DEBUG org.hibernate.SQL - alter table if exists door_images add constraint FK33nbb6c7curx5h7rp8479q7ea foreign key (door_id) references doors
2025-01-30 14:54:47 [main] DEBUG org.hibernate.SQL - alter table if exists doors add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 foreign key (category_id) references categories
2025-01-30 14:54:47 [main] DEBUG org.hibernate.SQL - alter table if exists doors add constraint FKgbgrx2rwc3wskrr30uptj4tmy foreign key (seller_id) references users
2025-01-30 14:54:47 [main] DEBUG org.hibernate.SQL - alter table if exists email_verifications add constraint FKou1xuy3rdeao75p2x1v4v3xs foreign key (user_id) references users
2025-01-30 14:54:47 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_door_images add constraint FKtncfqos5bn3jhhxs9m55tsgjk foreign key (furniture_door_id) references furniture_doors
2025-01-30 14:54:48 [main] DEBUG org.hibernate.SQL - alter table if exists moulding_images add constraint FKll33f306u5605rgv2rc840un3 foreign key (moulding_id) references mouldings
2025-01-30 14:54:48 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings add constraint FK36rcxe5tvln9tgb3gyneemqfv foreign key (user_id) references users
2025-01-30 14:54:48 [main] DEBUG org.hibernate.SQL - alter table if exists orders add constraint FKf50k9uqc2hstd0yl9uujhoq74 foreign key (door_id) references doors
2025-01-30 14:54:48 [main] DEBUG org.hibernate.SQL - alter table if exists orders add constraint FK32ql8ubntj5uh44ph9659tiih foreign key (user_id) references users
2025-01-30 14:54:49 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:54:50 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-30 14:54:52 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-30 14:54:52 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-30 14:54:53 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-30 14:54:53 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-30 14:54:53 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-30 14:54:53 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-30 14:54:53 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2c9403ae, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@10507a61, org.springframework.security.web.context.SecurityContextHolderFilter@71b50a51, org.springframework.security.web.header.HeaderWriterFilter@12436267, org.springframework.web.filter.CorsFilter@ebe96d8, org.springframework.security.web.authentication.logout.LogoutFilter@3b021d07, uz.pdp.config.filtr.MyFilter@29fc83c5, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@50ce30a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@292f7f1f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@22b5f4d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@607057b8, org.springframework.security.web.access.ExceptionTranslationFilter@5ca7fab9, org.springframework.security.web.access.intercept.AuthorizationFilter@26f7995f]
2025-01-30 14:54:54 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-30 14:54:54 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 44.719 seconds (process running for 47.883)
2025-01-30 14:54:54 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-01-30 14:54:55 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-01-30 14:54:55 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-01-30 14:54:56 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-01-30 14:54:56 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-01-30 14:54:57 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:54:57 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:54:57 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:54:58 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:54:58 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:54:58 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:54:58 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:54:59 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-01-30 14:54:59 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-01-30 14:55:00 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-01-30 14:55:00 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-01-30 14:55:01 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-01-30 14:55:01 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-01-30 14:55:02 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-01-30 14:55:02 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.role=?
2025-01-30 14:55:03 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-01-30 14:55:03 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:04 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:04 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:04 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:04 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:05 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:05 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:05 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:05 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:05 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:06 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:06 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:06 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:06 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:08 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-01-30 14:55:08 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-01-30 14:55:09 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-01-30 14:55:09 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-01-30 14:55:10 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:55:10 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:11 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:12 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:13 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:13 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:13 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:13 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:13 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:55:14 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:55:14 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:55:14 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:14 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:14 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:14 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:15 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:16 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:55:16 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:17 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:17 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:18 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:19 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:55:19 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:55:19 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:55:20 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:20 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:20 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:20 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:20 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:55:21 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:21 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:22 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:23 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:55:23 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:55:23 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:55:24 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:24 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:24 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:24 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:55:25 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:25 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:26 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:27 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:27 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:55:28 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:55:28 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:55:28 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:28 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:28 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:28 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:29 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:55:29 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:30 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:31 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:31 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:55:32 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:55:32 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:55:32 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:32 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:32 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:33 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:33 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:33 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:33 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:33 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:33 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:55:34 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:34 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:35 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:36 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:37 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:55:37 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:55:37 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:55:37 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:37 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:37 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:37 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:38 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:39 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:55:39 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:39 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:39 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:39 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:40 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:41 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:41 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:41 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:41 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:41 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:55:42 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:55:42 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:55:42 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:42 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:42 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:42 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:43 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:43 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:43 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:43 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:43 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:55:44 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:44 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:45 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:46 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:55:46 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:55:46 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:55:47 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:47 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:47 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:47 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:55:48 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:48 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:49 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:50 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:51 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:51 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:51 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:51 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:51 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:51 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:55:51 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:55:52 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:55:52 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:52 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:52 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:52 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:52 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:52 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:55:53 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:54 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:54 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:55 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:55:55 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:55:56 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:55:56 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:56 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:56 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:55:56 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:55:57 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:57 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:57 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:57 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:58 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:58 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:59 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:55:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:55:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:56:00 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:56:00 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:56:00 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:56:00 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:56:00 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:56:00 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:56:00 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:56:01 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:56:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:56:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:56:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:56:02 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:56:02 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:56:02 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 22001
2025-01-30 14:56:02 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: value too long for type character varying(255)
2025-01-30 14:56:03 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-30 14:56:03 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.dao.DataIntegrityViolationException: could not execute statement [ERROR: value too long for type character varying(255)] [insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]; SQL [insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy224.save(Unknown Source)
	at uz.pdp.config.DataInitializer.initializeSampleDoors(DataInitializer.java:305)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:227)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: org.hibernate.exception.DataException: could not execute statement [ERROR: value too long for type character varying(255)] [insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:103)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:758)
	at jdk.internal.reflect.GeneratedMethodAccessor48.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy2/jdk.proxy2.$Proxy210.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at jdk.internal.reflect.GeneratedMethodAccessor52.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 29 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: value too long for type character varying(255)
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:152)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 77 common frames omitted
2025-01-30 14:56:03 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:56:03 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-30 14:56:04 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-30 14:57:26 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 1153380 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-30 14:57:26 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-01-30 14:57:26 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-30 14:57:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:57:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-30 14:57:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 95 ms. Found 13 JPA repository interfaces.
2025-01-30 14:57:27 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-30 14:57:27 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-30 14:57:27 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-30 14:57:27 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-30 14:57:27 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-30 14:57:27 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-30 14:57:27 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-01-30 14:57:27 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-30 14:57:27 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1561 ms
2025-01-30 14:57:27 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-30 14:57:27 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-30 14:57:28 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-30 14:57:28 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-30 14:57:28 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-30 14:57:30 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@615b1baf
2025-01-30 14:57:30 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-30 14:57:31 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-30 14:57:32 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-30 14:57:32 [main] DEBUG org.hibernate.SQL - alter table if exists address_social_links drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-30 14:57:32 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@9cabd07] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-01-30 14:57:33 [main] DEBUG org.hibernate.SQL - alter table if exists addresses drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-30 14:57:33 [main] DEBUG org.hibernate.SQL - alter table if exists addresses drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-30 14:57:33 [main] DEBUG org.hibernate.SQL - alter table if exists basket_items drop constraint if exists FKnx44qatthch57p2bgo873qfxu
2025-01-30 14:57:33 [main] DEBUG org.hibernate.SQL - alter table if exists baskets drop constraint if exists FK87s17cinc4wkx0taas5nh0s8h
2025-01-30 14:57:34 [main] DEBUG org.hibernate.SQL - alter table if exists company drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-30 14:57:34 [main] DEBUG org.hibernate.SQL - alter table if exists company_socials_list drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-30 14:57:34 [main] DEBUG org.hibernate.SQL - alter table if exists custom_enum_values drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-30 14:57:34 [main] DEBUG org.hibernate.SQL - alter table if exists door_available_colors drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-30 14:57:35 [main] DEBUG org.hibernate.SQL - alter table if exists door_history drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-30 14:57:35 [main] DEBUG org.hibernate.SQL - alter table if exists door_history drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-30 14:57:35 [main] DEBUG org.hibernate.SQL - alter table if exists door_images drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-30 14:57:35 [main] DEBUG org.hibernate.SQL - alter table if exists doors drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-01-30 14:57:36 [main] DEBUG org.hibernate.SQL - alter table if exists doors drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-30 14:57:36 [main] DEBUG org.hibernate.SQL - alter table if exists email_verifications drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-30 14:57:36 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_door_images drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-30 14:57:36 [main] DEBUG org.hibernate.SQL - alter table if exists moulding_images drop constraint if exists FKll33f306u5605rgv2rc840un3
2025-01-30 14:57:37 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings drop constraint if exists FK36rcxe5tvln9tgb3gyneemqfv
2025-01-30 14:57:37 [main] DEBUG org.hibernate.SQL - alter table if exists orders drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-30 14:57:37 [main] DEBUG org.hibernate.SQL - alter table if exists orders drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-30 14:57:37 [main] DEBUG org.hibernate.SQL - drop table if exists address_social_links cascade
2025-01-30 14:57:38 [main] DEBUG org.hibernate.SQL - drop table if exists addresses cascade
2025-01-30 14:57:38 [main] DEBUG org.hibernate.SQL - drop table if exists basket_items cascade
2025-01-30 14:57:38 [main] DEBUG org.hibernate.SQL - drop table if exists baskets cascade
2025-01-30 14:57:39 [main] DEBUG org.hibernate.SQL - drop table if exists categories cascade
2025-01-30 14:57:39 [main] DEBUG org.hibernate.SQL - drop table if exists company cascade
2025-01-30 14:57:39 [main] DEBUG org.hibernate.SQL - drop table if exists company_socials_list cascade
2025-01-30 14:57:39 [main] DEBUG org.hibernate.SQL - drop table if exists custom_enum_values cascade
2025-01-30 14:57:40 [main] DEBUG org.hibernate.SQL - drop table if exists door_available_colors cascade
2025-01-30 14:57:40 [main] DEBUG org.hibernate.SQL - drop table if exists door_history cascade
2025-01-30 14:57:40 [main] DEBUG org.hibernate.SQL - drop table if exists door_images cascade
2025-01-30 14:57:40 [main] DEBUG org.hibernate.SQL - drop table if exists doors cascade
2025-01-30 14:57:41 [main] DEBUG org.hibernate.SQL - drop table if exists email_verifications cascade
2025-01-30 14:57:41 [main] DEBUG org.hibernate.SQL - drop table if exists furniture_door_images cascade
2025-01-30 14:57:41 [main] DEBUG org.hibernate.SQL - drop table if exists furniture_doors cascade
2025-01-30 14:57:41 [main] DEBUG org.hibernate.SQL - drop table if exists locations cascade
2025-01-30 14:57:42 [main] DEBUG org.hibernate.SQL - drop table if exists moulding_images cascade
2025-01-30 14:57:42 [main] DEBUG org.hibernate.SQL - drop table if exists mouldings cascade
2025-01-30 14:57:42 [main] DEBUG org.hibernate.SQL - drop table if exists orders cascade
2025-01-30 14:57:42 [main] DEBUG org.hibernate.SQL - drop table if exists ticket cascade
2025-01-30 14:57:43 [main] DEBUG org.hibernate.SQL - drop table if exists users cascade
2025-01-30 14:57:43 [main] DEBUG org.hibernate.SQL - create table address_social_links (address_id bigint not null, link varchar(255), social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')), primary key (address_id, social_type))
2025-01-30 14:57:43 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@7307e418] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-01-30 14:57:43 [main] DEBUG org.hibernate.SQL - create table addresses (is_default boolean not null, id bigserial not null, location_id bigint unique, user_id bigint, city varchar(255), email varchar(255), name varchar(255), phone_number varchar(255), street varchar(255), working_hours varchar(255), primary key (id))
2025-01-30 14:57:43 [main] DEBUG org.hibernate.SQL - create table basket_items (price float(53) not null, quantity integer not null, basket_id bigint, id bigserial not null, item_id bigint, version bigint not null, image varchar(255), name varchar(255), type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')), primary key (id))
2025-01-30 14:57:44 [main] DEBUG org.hibernate.SQL - create table baskets (id bigserial not null, user_id bigint unique, primary key (id))
2025-01-30 14:57:44 [main] DEBUG org.hibernate.SQL - create table categories (active boolean not null, id bigserial not null, name varchar(255) not null unique, primary key (id))
2025-01-30 14:57:44 [main] DEBUG org.hibernate.SQL - create table company (work_time date, address_id bigint unique, id bigserial not null, email varchar(255), name varchar(255), phone varchar(255), primary key (id))
2025-01-30 14:57:44 [main] DEBUG org.hibernate.SQL - create table company_socials_list (company_id bigint not null, socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')))
2025-01-30 14:57:45 [main] DEBUG org.hibernate.SQL - create table custom_enum_values (is_active boolean not null, created_at timestamp(6), created_by bigint, id bigserial not null, display_name varchar(255) not null, enum_type varchar(255) not null, name varchar(255) not null unique, primary key (id))
2025-01-30 14:57:45 [main] DEBUG org.hibernate.SQL - create table door_available_colors (door_id bigint not null, available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')))
2025-01-30 14:57:45 [main] DEBUG org.hibernate.SQL - create table door_history (accessed_at timestamp(6), door_id bigint not null, id bigserial not null, user_id bigint not null, primary key (id))
2025-01-30 14:57:45 [main] DEBUG org.hibernate.SQL - create table door_images (door_id bigint not null, images varchar(255))
2025-01-30 14:57:46 [main] DEBUG org.hibernate.SQL - create table doors (active boolean not null, custom_height float(53), custom_width float(53), final_price float(53), is_base_model boolean, is_custom_color boolean, price float(53), warranty_years integer, base_model_id bigint, category_id bigint, id bigserial not null, seller_id bigint, color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')), custom_color_code varchar(255), description varchar(255), door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')), frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')), hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')), manufacturer varchar(255), material varchar(255), name varchar(255), size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')), status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')), primary key (id))
2025-01-30 14:57:46 [main] DEBUG org.hibernate.SQL - create table email_verifications (verified boolean not null, created_at timestamp(6), expiry_time timestamp(6) not null, id bigserial not null, updated_at timestamp(6), user_id bigint not null, type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')), verification_code varchar(255) not null, primary key (id))
2025-01-30 14:57:46 [main] DEBUG org.hibernate.SQL - create table furniture_door_images (furniture_door_id bigint not null, image_url varchar(255))
2025-01-30 14:57:47 [main] DEBUG org.hibernate.SQL - create table furniture_doors (price float(53) not null, stock_quantity integer not null, id bigserial not null, description varchar(255), dimensions varchar(255), furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')), material varchar(255) not null, name varchar(255) not null, primary key (id))
2025-01-30 14:57:47 [main] DEBUG org.hibernate.SQL - create table locations (latitude float(53), longitude float(53), id bigserial not null, marker_title varchar(255), primary key (id))
2025-01-30 14:57:47 [main] DEBUG org.hibernate.SQL - create table moulding_images (moulding_id bigint not null, image_url varchar(255))
2025-01-30 14:57:47 [main] DEBUG org.hibernate.SQL - create table mouldings (price DECIMAL(10,2) not null, price_overall DECIMAL(10,2), quantity integer not null, id bigserial not null, user_id bigint not null, title varchar(100) not null, description varchar(1000), article varchar(255) not null unique, size varchar(255) not null, primary key (id))
2025-01-30 14:57:48 [main] DEBUG org.hibernate.SQL - create table orders (door_id bigint not null, id bigserial not null, order_date timestamp(6) with time zone not null, preferred_delivery_time timestamp(6) with time zone, user_id bigint not null, comment varchar(1000), delivery_notes varchar(1000), installation_notes varchar(1000), contact_phone varchar(255) not null, customer_name varchar(255) not null, delivery_address varchar(255) not null, email varchar(255) not null, order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')), status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')), primary key (id))
2025-01-30 14:57:48 [main] DEBUG org.hibernate.SQL - create table ticket (id bigserial not null, user_id bigint, primary key (id))
2025-01-30 14:57:48 [main] DEBUG org.hibernate.SQL - create table users (active boolean not null, seller_request_pending boolean not null, id bigserial not null, email varchar(255) unique, lastname varchar(255), name varchar(255), password varchar(255), phone varchar(255) not null, role varchar(255) not null check (role in ('USER','SELLER','ADMIN')), primary key (id))
2025-01-30 14:57:48 [main] DEBUG org.hibernate.SQL - create index idx_address_user on addresses (user_id)
2025-01-30 14:57:49 [main] DEBUG org.hibernate.SQL - create index idx_address_city on addresses (city)
2025-01-30 14:57:49 [main] DEBUG org.hibernate.SQL - create index idx_address_default on addresses (is_default)
2025-01-30 14:57:49 [main] DEBUG org.hibernate.SQL - create index idx_address_phone on addresses (phone_number)
2025-01-30 14:57:50 [main] DEBUG org.hibernate.SQL - create index idx_basketitem_basket on basket_items (basket_id)
2025-01-30 14:57:50 [main] DEBUG org.hibernate.SQL - create index idx_basketitem_item on basket_items (item_id, type)
2025-01-30 14:57:50 [main] DEBUG org.hibernate.SQL - create index idx_basketitem_name on basket_items (name)
2025-01-30 14:57:50 [main] DEBUG org.hibernate.SQL - create index idx_category_name on categories (name)
2025-01-30 14:57:51 [main] DEBUG org.hibernate.SQL - create index idx_category_active on categories (active)
2025-01-30 14:57:51 [main] DEBUG org.hibernate.SQL - create index idx_door_material on doors (material)
2025-01-30 14:57:51 [main] DEBUG org.hibernate.SQL - create index idx_door_manufacturer on doors (manufacturer)
2025-01-30 14:57:51 [main] DEBUG org.hibernate.SQL - create index idx_door_price on doors (price)
2025-01-30 14:57:52 [main] DEBUG org.hibernate.SQL - create index idx_door_name on doors (name)
2025-01-30 14:57:52 [main] DEBUG org.hibernate.SQL - create index idx_door_active_status on doors (active, status)
2025-01-30 14:57:52 [main] DEBUG org.hibernate.SQL - create index idx_door_color on doors (color)
2025-01-30 14:57:52 [main] DEBUG org.hibernate.SQL - create index idx_door_size on doors (size)
2025-01-30 14:57:53 [main] DEBUG org.hibernate.SQL - create index idx_door_seller on doors (seller_id)
2025-01-30 14:57:53 [main] DEBUG org.hibernate.SQL - create index idx_door_category on doors (category_id)
2025-01-30 14:57:53 [main] DEBUG org.hibernate.SQL - create index idx_door_location on doors (door_location)
2025-01-30 14:57:53 [main] DEBUG org.hibernate.SQL - create index idx_door_frame_type on doors (frame_type)
2025-01-30 14:57:54 [main] DEBUG org.hibernate.SQL - create index idx_furniture_type on furniture_doors (furniture_type)
2025-01-30 14:57:54 [main] DEBUG org.hibernate.SQL - create index idx_furniture_material on furniture_doors (material)
2025-01-30 14:57:54 [main] DEBUG org.hibernate.SQL - create index idx_furniture_price on furniture_doors (price)
2025-01-30 14:57:55 [main] DEBUG org.hibernate.SQL - create index idx_furniture_stock on furniture_doors (stock_quantity)
2025-01-30 14:57:55 [main] DEBUG org.hibernate.SQL - create index idx_furniture_name on furniture_doors (name)
2025-01-30 14:57:55 [main] DEBUG org.hibernate.SQL - create index idx_location_coords on locations (latitude, longitude)
2025-01-30 14:57:56 [main] DEBUG org.hibernate.SQL - create index idx_location_title on locations (marker_title)
2025-01-30 14:57:56 [main] DEBUG org.hibernate.SQL - create index idx_moulding_title on mouldings (title)
2025-01-30 14:57:56 [main] DEBUG org.hibernate.SQL - create index idx_moulding_price on mouldings (price)
2025-01-30 14:57:56 [main] DEBUG org.hibernate.SQL - create index idx_moulding_size on mouldings (size)
2025-01-30 14:57:57 [main] DEBUG org.hibernate.SQL - create index idx_moulding_user on mouldings (user_id)
2025-01-30 14:57:57 [main] DEBUG org.hibernate.SQL - create index idx_moulding_quantity on mouldings (quantity)
2025-01-30 14:57:57 [main] DEBUG org.hibernate.SQL - create index idx_order_user on orders (user_id)
2025-01-30 14:57:58 [main] DEBUG org.hibernate.SQL - create index idx_order_door on orders (door_id)
2025-01-30 14:57:58 [main] DEBUG org.hibernate.SQL - create index idx_order_status_date on orders (status, order_date)
2025-01-30 14:57:58 [main] DEBUG org.hibernate.SQL - create index idx_order_type_date on orders (order_type, order_date)
2025-01-30 14:57:58 [main] DEBUG org.hibernate.SQL - create index idx_user_name on users (name)
2025-01-30 14:57:58 [main] DEBUG org.hibernate.SQL - create index idx_user_phone on users (phone)
2025-01-30 14:57:59 [main] DEBUG org.hibernate.SQL - create index idx_user_role_active on users (role, active)
2025-01-30 14:57:59 [main] DEBUG org.hibernate.SQL - alter table if exists address_social_links add constraint FKf8co3916tiiox4iohci7ybiyg foreign key (address_id) references addresses
2025-01-30 14:57:59 [main] DEBUG org.hibernate.SQL - alter table if exists addresses add constraint FK7wf86ejdl44syummkme09y06f foreign key (location_id) references locations
2025-01-30 14:58:00 [main] DEBUG org.hibernate.SQL - alter table if exists addresses add constraint FK1fa36y2oqhao3wgg2rw1pi459 foreign key (user_id) references users
2025-01-30 14:58:00 [main] DEBUG org.hibernate.SQL - alter table if exists basket_items add constraint FKnx44qatthch57p2bgo873qfxu foreign key (basket_id) references baskets
2025-01-30 14:58:00 [main] DEBUG org.hibernate.SQL - alter table if exists baskets add constraint FK87s17cinc4wkx0taas5nh0s8h foreign key (user_id) references users
2025-01-30 14:58:00 [main] DEBUG org.hibernate.SQL - alter table if exists company add constraint FKlgeojgfhu94pbgyev43gtwdyq foreign key (address_id) references addresses
2025-01-30 14:58:01 [main] DEBUG org.hibernate.SQL - alter table if exists company_socials_list add constraint FKt90ivcl5f3phabfuqw6k3t9ow foreign key (company_id) references company
2025-01-30 14:58:01 [main] DEBUG org.hibernate.SQL - alter table if exists custom_enum_values add constraint FKbmmwc1jeq02ocr0c6mgv45yiy foreign key (created_by) references users
2025-01-30 14:58:01 [main] DEBUG org.hibernate.SQL - alter table if exists door_available_colors add constraint FKd2g3blkiuq2wj2trx3wnjk5me foreign key (door_id) references doors
2025-01-30 14:58:01 [main] DEBUG org.hibernate.SQL - alter table if exists door_history add constraint FKlskx5ehjqd7u0dmumo4bhuliu foreign key (door_id) references doors
2025-01-30 14:58:02 [main] DEBUG org.hibernate.SQL - alter table if exists door_history add constraint FKajibco0vlgy0ngsyg33k0wb0u foreign key (user_id) references users
2025-01-30 14:58:02 [main] DEBUG org.hibernate.SQL - alter table if exists door_images add constraint FK33nbb6c7curx5h7rp8479q7ea foreign key (door_id) references doors
2025-01-30 14:58:02 [main] DEBUG org.hibernate.SQL - alter table if exists doors add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 foreign key (category_id) references categories
2025-01-30 14:58:02 [main] DEBUG org.hibernate.SQL - alter table if exists doors add constraint FKgbgrx2rwc3wskrr30uptj4tmy foreign key (seller_id) references users
2025-01-30 14:58:03 [main] DEBUG org.hibernate.SQL - alter table if exists email_verifications add constraint FKou1xuy3rdeao75p2x1v4v3xs foreign key (user_id) references users
2025-01-30 14:58:03 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_door_images add constraint FKtncfqos5bn3jhhxs9m55tsgjk foreign key (furniture_door_id) references furniture_doors
2025-01-30 14:58:03 [main] DEBUG org.hibernate.SQL - alter table if exists moulding_images add constraint FKll33f306u5605rgv2rc840un3 foreign key (moulding_id) references mouldings
2025-01-30 14:58:03 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings add constraint FK36rcxe5tvln9tgb3gyneemqfv foreign key (user_id) references users
2025-01-30 14:58:04 [main] DEBUG org.hibernate.SQL - alter table if exists orders add constraint FKf50k9uqc2hstd0yl9uujhoq74 foreign key (door_id) references doors
2025-01-30 14:58:04 [main] DEBUG org.hibernate.SQL - alter table if exists orders add constraint FK32ql8ubntj5uh44ph9659tiih foreign key (user_id) references users
2025-01-30 14:58:04 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 14:58:05 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-30 14:58:06 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-30 14:58:07 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-30 14:58:07 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-01-30 14:58:07 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-30 14:58:07 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-30 14:58:07 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-30 14:58:07 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1d2b06ca, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@550fc7f5, org.springframework.security.web.context.SecurityContextHolderFilter@77da8920, org.springframework.security.web.header.HeaderWriterFilter@5710e7a3, org.springframework.web.filter.CorsFilter@41f2b5f6, org.springframework.security.web.authentication.logout.LogoutFilter@1a56a6c6, uz.pdp.config.filtr.MyFilter@2c731a16, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@524e99c1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@289fae49, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@62237fd1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@17a47d48, org.springframework.security.web.access.ExceptionTranslationFilter@7a5e33d3, org.springframework.security.web.access.intercept.AuthorizationFilter@16f4777d]
2025-01-30 14:58:08 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-30 14:58:08 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 42.52 seconds (process running for 42.862)
2025-01-30 14:58:08 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-01-30 14:58:09 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-01-30 14:58:09 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-01-30 14:58:10 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-01-30 14:58:10 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-01-30 14:58:11 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:58:11 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:58:11 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:58:11 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:58:12 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:58:12 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:58:12 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-01-30 14:58:13 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-01-30 14:58:13 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-01-30 14:58:14 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-01-30 14:58:14 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-01-30 14:58:15 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-01-30 14:58:15 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-01-30 14:58:16 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-01-30 14:58:16 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.role=?
2025-01-30 14:58:17 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-01-30 14:58:17 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:17 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:18 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:18 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:18 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:18 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:19 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:19 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:19 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:19 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:20 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:20 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:20 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:20 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:22 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-01-30 14:58:22 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-01-30 14:58:23 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-01-30 14:58:23 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-01-30 14:58:24 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:58:24 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:25 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:26 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:27 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:58:27 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:58:27 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:58:27 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:27 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:27 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:28 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:29 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:58:29 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:30 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:31 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:31 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:32 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:58:32 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:58:33 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:58:33 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:33 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:33 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:33 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:33 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:58:34 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:35 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:35 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:36 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:37 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:38 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:58:38 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:58:38 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:58:38 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:38 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:38 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:38 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:38 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:39 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:58:39 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:40 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:41 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:41 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:41 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:41 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:41 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:41 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:42 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:42 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:42 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:42 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:42 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:58:42 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:58:43 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:58:43 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:43 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:43 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:43 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:43 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:58:44 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:45 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:45 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:46 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:46 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:46 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:46 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:46 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:58:46 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:58:46 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:58:47 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:47 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:47 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:47 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:58:48 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:48 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:49 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:50 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:51 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:58:51 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:58:51 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:58:51 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:51 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:51 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:51 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:52 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:52 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:52 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:52 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:53 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:58:53 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:54 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:54 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:55 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:56 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:58:56 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:58:56 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:58:57 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:57 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:57 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:57 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:58:57 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:58:58 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:58 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:59 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:58:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:58:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:00 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:00 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:00 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:00 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:00 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:01 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:01 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:59:01 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:59:02 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:59:02 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:02 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:02 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:02 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:02 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:02 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:03 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:59:04 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:04 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:04 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:04 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:04 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:04 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:05 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:05 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:05 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:05 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:05 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:05 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:05 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:06 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:07 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:59:07 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:59:07 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:59:07 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:07 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:07 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:07 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:08 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:08 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:59:09 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:09 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:09 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:09 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:10 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:10 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:10 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:10 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:10 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:11 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:12 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:59:12 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:59:12 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:59:13 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:13 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:13 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:13 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:13 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:13 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:13 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:13 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:13 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:14 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:59:14 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:15 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:16 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:16 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:17 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:18 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:59:18 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:59:18 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:59:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:19 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-01-30 14:59:20 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:20 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:20 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:20 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:20 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:20 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:21 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:22 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-01-30 14:59:22 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-01-30 14:59:23 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-01-30 14:59:23 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-01-30 14:59:23 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:23 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:23 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:23 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-01-30 14:59:24 [main] DEBUG org.hibernate.SQL - select count(*) from furniture_doors fd1_0
2025-01-30 14:59:24 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:24 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:25 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:25 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:25 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:25 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:26 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:26 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:26 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:26 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:27 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:27 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:27 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:27 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:28 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-01-30 14:59:29 [main] DEBUG org.hibernate.SQL - select count(*) from mouldings m1_0
2025-01-30 14:59:29 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:30 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:30 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:30 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:30 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:31 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:31 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:31 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:31 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:31 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:32 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:32 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:32 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:32 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:33 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-01-30 14:59:34 [main] DEBUG org.hibernate.SQL - select count(*) from addresses a1_0
2025-01-30 14:59:35 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-01-30 14:59:35 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:35 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:35 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:36 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-01-30 14:59:36 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:37 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:37 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:37 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-01-30 14:59:37 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:37 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:37 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:38 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-01-30 14:59:38 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:38 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:38 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:39 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-01-30 14:59:39 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:39 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:39 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:40 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-01-30 14:59:40 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:40 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:40 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:41 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-01-30 14:59:41 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:41 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:41 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:42 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-01-30 14:59:42 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:42 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:42 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:43 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-01-30 14:59:43 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:43 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:43 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:44 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-01-30 14:59:44 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-01-30 14:59:44 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:44 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-01-30 14:59:45 [RMI TCP Connection(4)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-30 14:59:45 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-30 14:59:45 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-30 14:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-01-30 14:59:55 [http-nio-8080-exec-1] DEBUG uz.pdp.service.DoorService - 🚪 Fetching doors from page 0 with size 20
2025-01-30 14:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 offset ? rows fetch first ? rows only
2025-01-30 14:59:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(d1_0.id) from doors d1_0
2025-01-30 14:59:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id = any (?)
2025-01-30 14:59:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id = any (?)
2025-01-30 14:59:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-01-30 15:00:00 [http-nio-8080-exec-2] DEBUG uz.pdp.service.DoorService - 🚪 Fetching doors from page 0 with size 20
2025-01-30 15:00:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 offset ? rows fetch first ? rows only
2025-01-30 15:00:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select count(d1_0.id) from doors d1_0
2025-01-30 15:00:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id = any (?)
2025-01-30 15:00:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id = any (?)
2025-01-30 15:00:28 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-30 15:00:28 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-30 15:00:29 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 21:57:19 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 418781 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 21:57:19 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 21:57:19 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 21:57:20 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 21:57:20 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 21:57:20 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 138 ms. Found 13 JPA repository interfaces.
2025-02-07 21:57:21 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 21:57:21 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 21:57:21 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-02-07 21:57:21 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 21:57:21 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 21:57:21 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 21:57:21 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 21:57:21 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 21:57:21 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2553 ms
2025-02-07 21:57:22 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 21:57:22 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 21:57:22 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 21:57:22 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 21:57:22 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 21:57:25 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@a4388f1
2025-02-07 21:57:25 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 21:57:25 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 21:57:27 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 21:57:27 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@585d570e] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 21:57:28 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_doors add column dimensions varchar(255)
2025-02-07 21:57:28 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_doors add column furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE'))
2025-02-07 21:57:28 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_doors add column material varchar(255) not null
2025-02-07 21:57:28 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_doors add column name varchar(255) not null
2025-02-07 21:57:29 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_doors alter column price set data type float(53)
2025-02-07 21:57:29 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_doors add column stock_quantity integer not null
2025-02-07 21:57:29 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 21:57:29 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 21:57:30 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings add column user_id bigint not null
2025-02-07 21:57:30 [main] DEBUG org.hibernate.SQL - alter table if exists orders add column preferred_delivery_time timestamp(6) with time zone
2025-02-07 21:57:31 [main] DEBUG org.hibernate.SQL - create index idx_furniture_material on furniture_doors (material)
2025-02-07 21:57:32 [main] DEBUG org.hibernate.SQL - create index idx_furniture_stock on furniture_doors (stock_quantity)
2025-02-07 21:57:32 [main] DEBUG org.hibernate.SQL - create index idx_furniture_name on furniture_doors (name)
2025-02-07 21:57:33 [main] DEBUG org.hibernate.SQL - create index idx_moulding_user on mouldings (user_id)
2025-02-07 21:57:33 [main] DEBUG org.hibernate.SQL - create index idx_order_door on orders (door_id)
2025-02-07 21:57:48 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings add constraint FK36rcxe5tvln9tgb3gyneemqfv foreign key (user_id) references users
2025-02-07 21:57:50 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 21:57:51 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 21:57:52 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accessoryController' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/controller/AccessoryController.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract java.util.List uz.pdp.repository.MouldingRepository.findAllBySeller(uz.pdp.entity.User); Reason: Failed to create query for method public abstract java.util.List uz.pdp.repository.MouldingRepository.findAllBySeller(uz.pdp.entity.User); No property 'seller' found for type 'Moulding'
2025-02-07 21:57:52 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 21:57:52 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 21:57:53 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 21:57:53 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-02-07 21:57:53 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 21:57:53 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accessoryController' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/controller/AccessoryController.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract java.util.List uz.pdp.repository.MouldingRepository.findAllBySeller(uz.pdp.entity.User); Reason: Failed to create query for method public abstract java.util.List uz.pdp.repository.MouldingRepository.findAllBySeller(uz.pdp.entity.User); No property 'seller' found for type 'Moulding'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:959)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract java.util.List uz.pdp.repository.MouldingRepository.findAllBySeller(uz.pdp.entity.User); Reason: Failed to create query for method public abstract java.util.List uz.pdp.repository.MouldingRepository.findAllBySeller(uz.pdp.entity.User); No property 'seller' found for type 'Moulding'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract java.util.List uz.pdp.repository.MouldingRepository.findAllBySeller(uz.pdp.entity.User); Reason: Failed to create query for method public abstract java.util.List uz.pdp.repository.MouldingRepository.findAllBySeller(uz.pdp.entity.User); No property 'seller' found for type 'Moulding'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 33 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract java.util.List uz.pdp.repository.MouldingRepository.findAllBySeller(uz.pdp.entity.User); Reason: Failed to create query for method public abstract java.util.List uz.pdp.repository.MouldingRepository.findAllBySeller(uz.pdp.entity.User); No property 'seller' found for type 'Moulding'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 47 common frames omitted
Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract java.util.List uz.pdp.repository.MouldingRepository.findAllBySeller(uz.pdp.entity.User); Reason: Failed to create query for method public abstract java.util.List uz.pdp.repository.MouldingRepository.findAllBySeller(uz.pdp.entity.User); No property 'seller' found for type 'Moulding'
	at org.springframework.data.repository.query.QueryCreationException.create(QueryCreationException.java:101)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:115)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:99)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:88)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.<init>(QueryExecutorMethodInterceptor.java:88)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:357)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:279)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:285)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 58 common frames omitted
Caused by: java.lang.IllegalArgumentException: Failed to create query for method public abstract java.util.List uz.pdp.repository.MouldingRepository.findAllBySeller(uz.pdp.entity.User); No property 'seller' found for type 'Moulding'
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:106)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:124)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:258)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:95)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:111)
	... 70 common frames omitted
Caused by: org.springframework.data.mapping.PropertyReferenceException: No property 'seller' found for type 'Moulding'
	at org.springframework.data.mapping.PropertyPath.<init>(PropertyPath.java:90)
	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:443)
	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:419)
	at org.springframework.data.mapping.PropertyPath.lambda$from$0(PropertyPath.java:372)
	at java.base/java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:330)
	at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:354)
	at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:332)
	at org.springframework.data.repository.query.parser.Part.<init>(Part.java:81)
	at org.springframework.data.repository.query.parser.PartTree$OrPart.lambda$new$0(PartTree.java:259)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.springframework.data.repository.query.parser.PartTree$OrPart.<init>(PartTree.java:260)
	at org.springframework.data.repository.query.parser.PartTree$Predicate.lambda$new$0(PartTree.java:389)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at org.springframework.data.repository.query.parser.PartTree$Predicate.<init>(PartTree.java:390)
	at org.springframework.data.repository.query.parser.PartTree.<init>(PartTree.java:103)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:100)
	... 74 common frames omitted
2025-02-07 21:59:37 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 439490 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 21:59:37 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 21:59:37 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 21:59:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 21:59:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 21:59:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 78 ms. Found 13 JPA repository interfaces.
2025-02-07 21:59:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 21:59:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 21:59:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-02-07 21:59:38 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 21:59:38 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 21:59:38 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 21:59:38 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 21:59:38 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 21:59:38 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1355 ms
2025-02-07 21:59:39 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 21:59:39 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 21:59:39 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 21:59:39 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 21:59:39 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 21:59:41 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3a7f382
2025-02-07 21:59:41 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 21:59:42 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 21:59:43 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 21:59:43 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@10ba757f] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 21:59:44 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 21:59:44 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 22:00:04 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:00:04 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accessoryController' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/controller/AccessoryController.class]: Unsatisfied dependency expressed through constructor parameter 1: No qualifying bean of type 'uz.pdp.mapper.FurnitureDoorMapper' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-02-07 22:00:04 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:00:04 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:00:05 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:00:05 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-02-07 22:00:05 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 22:00:05 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 1 of constructor in uz.pdp.controller.AccessoryController required a bean of type 'uz.pdp.mapper.FurnitureDoorMapper' that could not be found.


Action:

Consider defining a bean of type 'uz.pdp.mapper.FurnitureDoorMapper' in your configuration.

2025-02-07 22:00:44 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 445822 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:00:44 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:00:44 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:00:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:00:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:00:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 77 ms. Found 13 JPA repository interfaces.
2025-02-07 22:00:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:00:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:00:45 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-02-07 22:00:45 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:00:45 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:00:45 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:00:45 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:00:46 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:00:46 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1417 ms
2025-02-07 22:00:46 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:00:46 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:00:46 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:00:46 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:00:46 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:00:48 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@554a2f3
2025-02-07 22:00:48 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:00:49 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:00:50 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:00:50 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@30d5668a] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:00:51 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 22:00:51 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 22:01:11 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:01:12 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:01:13 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'doorController': Unsatisfied dependency expressed through field 'doorMapper': No qualifying bean of type 'uz.pdp.mapper.DoorMapper' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2025-02-07 22:01:13 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:01:13 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:01:14 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:01:14 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-02-07 22:01:14 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 22:01:14 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field doorMapper in uz.pdp.controller.DoorController required a bean of type 'uz.pdp.mapper.DoorMapper' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'uz.pdp.mapper.DoorMapper' in your configuration.

2025-02-07 22:01:56 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 451722 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:01:56 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:01:56 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:01:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:01:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:01:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 82 ms. Found 13 JPA repository interfaces.
2025-02-07 22:01:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:01:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:01:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-02-07 22:01:57 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:01:57 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:01:57 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:01:57 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:01:57 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:01:57 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1323 ms
2025-02-07 22:01:57 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:01:57 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:01:57 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:01:57 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:01:57 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:02:00 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4131f6db
2025-02-07 22:02:00 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:02:00 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:02:02 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:02:02 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@3f31ccef] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:02:03 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 22:02:03 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 22:02:23 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:02:24 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:02:25 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataInitializer': Lookup method resolution failed
2025-02-07 22:02:25 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:02:25 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:02:26 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:02:26 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-02-07 22:02:26 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 22:02:26 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataInitializer': Lookup method resolution failed
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.checkLookupMethods(AutowiredAnnotationBeanPostProcessor.java:497)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:367)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory.java:1293)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:959)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: java.lang.IllegalStateException: Failed to introspect Class [uz.pdp.config.DataInitializer] from ClassLoader [jdk.internal.loader.ClassLoaders$AppClassLoader@1dbd16a6]
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:483)
	at org.springframework.util.ReflectionUtils.doWithLocalMethods(ReflectionUtils.java:320)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.checkLookupMethods(AutowiredAnnotationBeanPostProcessor.java:475)
	... 19 common frames omitted
Caused by: java.lang.NoClassDefFoundError: User
	at java.base/java.lang.Class.getDeclaredMethods0(Native Method)
	at java.base/java.lang.Class.privateGetDeclaredMethods(Class.java:3402)
	at java.base/java.lang.Class.getDeclaredMethods(Class.java:2504)
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:465)
	... 21 common frames omitted
Caused by: java.lang.ClassNotFoundException: User
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)
	... 25 common frames omitted
2025-02-07 22:02:55 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 457257 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:02:55 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:02:55 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:02:55 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:02:55 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:02:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 78 ms. Found 13 JPA repository interfaces.
2025-02-07 22:02:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:02:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:02:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-02-07 22:02:56 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:02:56 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:02:56 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:02:56 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:02:56 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:02:56 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1368 ms
2025-02-07 22:02:57 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:02:57 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:02:57 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:02:57 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:02:57 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:02:59 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@46f597f1
2025-02-07 22:02:59 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:03:00 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:03:01 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:03:01 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@1b131102] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:03:02 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 22:03:02 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 22:03:22 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:03:22 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:03:24 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'addressMapperImpl': Lookup method resolution failed
2025-02-07 22:03:24 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:03:24 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:03:25 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:03:25 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-02-07 22:03:25 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 22:03:25 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'addressMapperImpl': Lookup method resolution failed
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.checkLookupMethods(AutowiredAnnotationBeanPostProcessor.java:497)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:367)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory.java:1293)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:959)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: java.lang.IllegalStateException: Failed to introspect Class [uz.pdp.mapper.AddressMapperImpl] from ClassLoader [jdk.internal.loader.ClassLoaders$AppClassLoader@1dbd16a6]
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:483)
	at org.springframework.util.ReflectionUtils.doWithLocalMethods(ReflectionUtils.java:320)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.checkLookupMethods(AutowiredAnnotationBeanPostProcessor.java:475)
	... 19 common frames omitted
Caused by: java.lang.NoClassDefFoundError: AddressDTO
	at java.base/java.lang.Class.getDeclaredMethods0(Native Method)
	at java.base/java.lang.Class.privateGetDeclaredMethods(Class.java:3402)
	at java.base/java.lang.Class.getDeclaredMethods(Class.java:2504)
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:465)
	... 21 common frames omitted
Caused by: java.lang.ClassNotFoundException: AddressDTO
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)
	... 25 common frames omitted
2025-02-07 22:03:59 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 462729 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:03:59 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:03:59 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:04:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:04:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:04:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 74 ms. Found 13 JPA repository interfaces.
2025-02-07 22:04:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:04:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:04:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-02-07 22:04:00 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:04:01 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:04:01 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:04:01 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:04:01 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:04:01 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1353 ms
2025-02-07 22:04:01 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:04:01 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:04:01 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:04:01 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:04:01 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:04:04 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@39d37da8
2025-02-07 22:04:04 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:04:04 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:04:05 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:04:06 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@7307e418] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:04:07 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 22:04:07 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 22:04:26 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:04:27 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:04:28 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'addressMapperImpl': Lookup method resolution failed
2025-02-07 22:04:28 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:04:28 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:04:29 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:04:29 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-02-07 22:04:29 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 22:04:29 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'addressMapperImpl': Lookup method resolution failed
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.checkLookupMethods(AutowiredAnnotationBeanPostProcessor.java:497)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:367)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory.java:1293)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:959)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: java.lang.IllegalStateException: Failed to introspect Class [uz.pdp.mapper.AddressMapperImpl] from ClassLoader [jdk.internal.loader.ClassLoaders$AppClassLoader@1dbd16a6]
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:483)
	at org.springframework.util.ReflectionUtils.doWithLocalMethods(ReflectionUtils.java:320)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.checkLookupMethods(AutowiredAnnotationBeanPostProcessor.java:475)
	... 19 common frames omitted
Caused by: java.lang.NoClassDefFoundError: AddressDTO
	at java.base/java.lang.Class.getDeclaredMethods0(Native Method)
	at java.base/java.lang.Class.privateGetDeclaredMethods(Class.java:3402)
	at java.base/java.lang.Class.getDeclaredMethods(Class.java:2504)
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:465)
	... 21 common frames omitted
Caused by: java.lang.ClassNotFoundException: AddressDTO
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)
	... 25 common frames omitted
2025-02-07 22:05:07 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 468634 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:05:07 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:05:07 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:05:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:05:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:05:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 76 ms. Found 13 JPA repository interfaces.
2025-02-07 22:05:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:05:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:05:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-02-07 22:05:09 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:05:09 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:05:09 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:05:09 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:05:09 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:05:09 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1517 ms
2025-02-07 22:05:09 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:05:09 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:05:09 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:05:09 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:05:09 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:05:12 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@39d37da8
2025-02-07 22:05:12 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:05:12 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:05:13 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:05:14 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@7307e418] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:05:14 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 22:05:15 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 22:05:34 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:05:35 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:05:36 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'basketItemMapperImpl': Lookup method resolution failed
2025-02-07 22:05:36 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:05:36 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:05:37 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:05:37 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-02-07 22:05:37 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 22:05:37 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'basketItemMapperImpl': Lookup method resolution failed
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.checkLookupMethods(AutowiredAnnotationBeanPostProcessor.java:497)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:367)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory.java:1293)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:959)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: java.lang.IllegalStateException: Failed to introspect Class [uz.pdp.mapper.BasketItemMapperImpl] from ClassLoader [jdk.internal.loader.ClassLoaders$AppClassLoader@1dbd16a6]
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:483)
	at org.springframework.util.ReflectionUtils.doWithLocalMethods(ReflectionUtils.java:320)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.checkLookupMethods(AutowiredAnnotationBeanPostProcessor.java:475)
	... 19 common frames omitted
Caused by: java.lang.NoClassDefFoundError: BasketItemDTO
	at java.base/java.lang.Class.getDeclaredMethods0(Native Method)
	at java.base/java.lang.Class.privateGetDeclaredMethods(Class.java:3402)
	at java.base/java.lang.Class.getDeclaredMethods(Class.java:2504)
	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:465)
	... 21 common frames omitted
Caused by: java.lang.ClassNotFoundException: BasketItemDTO
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)
	... 25 common frames omitted
2025-02-07 22:05:54 [main] INFO  u.p.p.ProjectModul10ApplicationTests - Starting ProjectModul10ApplicationTests using Java 17.0.14 with PID 472726 (started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:05:54 [main] DEBUG u.p.p.ProjectModul10ApplicationTests - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:05:54 [main] INFO  u.p.p.ProjectModul10ApplicationTests - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:05:55 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:05:55 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:05:55 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 127 ms. Found 13 JPA repository interfaces.
2025-02-07 22:05:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:05:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:05:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-02-07 22:05:56 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:05:57 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:05:57 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:05:57 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:05:57 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:05:57 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:06:00 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@2242013
2025-02-07 22:06:00 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:06:00 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:06:02 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:06:02 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@5efbcfdd] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:06:20 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:06:20 [main] WARN  com.amazonaws.util.VersionInfoUtils - The AWS SDK for Java 1.x entered maintenance mode starting July 31, 2024 and will reach end of support on December 31, 2025. For more information, see https://aws.amazon.com/blogs/developer/the-aws-sdk-for-java-1-x-is-in-maintenance-mode-effective-july-31-2024/
You can print where on the file system the AWS SDK for Java 1.x core runtime is located by setting the AWS_JAVA_V1_PRINT_LOCATION environment variable or aws.java.v1.printLocation system property to 'true'.
This message can be disabled by setting the AWS_JAVA_V1_DISABLE_DEPRECATION_ANNOUNCEMENT environment variable or aws.java.v1.disableDeprecationAnnouncement system property to 'true'.
The AWS SDK for Java 1.x is being used here:
at java.base/java.lang.Thread.getStackTrace(Thread.java:1619)
at com.amazonaws.util.VersionInfoUtils.printDeprecationAnnouncement(VersionInfoUtils.java:81)
at com.amazonaws.util.VersionInfoUtils.<clinit>(VersionInfoUtils.java:59)
at com.amazonaws.internal.EC2ResourceFetcher.<clinit>(EC2ResourceFetcher.java:44)
at com.amazonaws.auth.InstanceMetadataServiceCredentialsFetcher.<init>(InstanceMetadataServiceCredentialsFetcher.java:38)
at com.amazonaws.auth.InstanceProfileCredentialsProvider.<init>(InstanceProfileCredentialsProvider.java:111)
at com.amazonaws.auth.InstanceProfileCredentialsProvider.<init>(InstanceProfileCredentialsProvider.java:91)
at com.amazonaws.auth.InstanceProfileCredentialsProvider.<init>(InstanceProfileCredentialsProvider.java:75)
at com.amazonaws.auth.InstanceProfileCredentialsProvider.<clinit>(InstanceProfileCredentialsProvider.java:58)
at com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper.initializeProvider(EC2ContainerCredentialsProviderWrapper.java:66)
at com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper.<init>(EC2ContainerCredentialsProviderWrapper.java:55)
at com.amazonaws.auth.DefaultAWSCredentialsProviderChain.<init>(DefaultAWSCredentialsProviderChain.java:60)
at com.amazonaws.auth.DefaultAWSCredentialsProviderChain.<clinit>(DefaultAWSCredentialsProviderChain.java:54)
at com.amazonaws.services.s3.AmazonS3ClientBuilder.standard(AmazonS3ClientBuilder.java:46)
at uz.pdp.config.S3Config.s3Client(S3Config.java:29)
at uz.pdp.config.S3Config$$SpringCGLIB$$0.CGLIB$s3Client$0(<generated>)
at uz.pdp.config.S3Config$$SpringCGLIB$$FastClass$$1.invoke(<generated>)
at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
at uz.pdp.config.S3Config$$SpringCGLIB$$0.s3Client(<generated>)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)
at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:647)
at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:485)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1334)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1164)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:959)
at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:552)
at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
at java.base/java.util.Optional.orElseGet(Optional.java:364)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)
at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-02-07 22:06:21 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:06:22 [main] WARN  o.s.w.c.s.GenericWebApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accessoryController' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/controller/AccessoryController.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
2025-02-07 22:06:22 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:06:22 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:06:24 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:06:24 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 22:06:24 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accessoryController' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/controller/AccessoryController.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:959)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:552)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 97 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 111 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 125 common frames omitted
Caused by: java.lang.IllegalArgumentException: Not a managed type: class uz.pdp.entity.Moulding
	at org.hibernate.metamodel.model.domain.internal.JpaMetamodelImpl.managedType(JpaMetamodelImpl.java:193)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.managedType(MappingMetamodelImpl.java:468)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.managedType(MappingMetamodelImpl.java:98)
	at org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.<init>(JpaMetamodelEntityInformation.java:82)
	at org.springframework.data.jpa.repository.support.JpaEntityInformationSupport.getEntityInformation(JpaEntityInformationSupport.java:69)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getEntityInformation(JpaRepositoryFactory.java:246)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:211)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:194)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:1)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:317)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:279)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:285)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 136 common frames omitted
2025-02-07 22:06:24 [main] WARN  o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [uz.pdp.projectmodul10.ProjectModul10ApplicationTests@1d4f25aa]
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@11156adf testClass = uz.pdp.projectmodul10.ProjectModul10ApplicationTests, locations = [], classes = [uz.pdp.projectmodul10.ProjectModul10Application], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@2f4919b0, org.springframework.boot.test.graphql.tester.HttpGraphQlTesterContextCustomizer@4d7e7435, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@1f86099a, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@aa21042, org.springframework.boot.test.web.reactive.server.WebTestClientContextCustomizer@601cbd8c, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@1f, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizer@5a4c638d, org.springframework.boot.test.context.SpringBootTestAnnotation@d60daacf], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:180)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'accessoryController' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/controller/AccessoryController.class]: Unsatisfied dependency expressed through constructor parameter 3: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:959)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:552)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	... 73 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'basketService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/BasketService.class]: Unsatisfied dependency expressed through constructor parameter 4: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 97 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'mouldingService' defined in file [/home/lantanium/Documents/G45-Project/target/classes/uz/pdp/service/MouldingService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:798)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1191)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 111 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'mouldingRepository' defined in uz.pdp.repository.MouldingRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Not a managed type: class uz.pdp.entity.Moulding
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:907)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:785)
	... 125 common frames omitted
Caused by: java.lang.IllegalArgumentException: Not a managed type: class uz.pdp.entity.Moulding
	at org.hibernate.metamodel.model.domain.internal.JpaMetamodelImpl.managedType(JpaMetamodelImpl.java:193)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.managedType(MappingMetamodelImpl.java:468)
	at org.hibernate.metamodel.model.domain.internal.MappingMetamodelImpl.managedType(MappingMetamodelImpl.java:98)
	at org.springframework.data.jpa.repository.support.JpaMetamodelEntityInformation.<init>(JpaMetamodelEntityInformation.java:82)
	at org.springframework.data.jpa.repository.support.JpaEntityInformationSupport.getEntityInformation(JpaEntityInformationSupport.java:69)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getEntityInformation(JpaRepositoryFactory.java:246)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:211)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:194)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactory.getTargetRepository(JpaRepositoryFactory.java:1)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:317)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:279)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:285)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 136 common frames omitted
2025-02-07 22:06:29 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 475415 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:06:29 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:06:29 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:06:30 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:06:30 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:06:30 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 71 ms. Found 13 JPA repository interfaces.
2025-02-07 22:06:30 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:06:30 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:06:30 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-02-07 22:06:30 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:06:31 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:06:31 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:06:31 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:06:31 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:06:31 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1317 ms
2025-02-07 22:06:31 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:06:31 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:06:31 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:06:31 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:06:31 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:06:34 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@48cc060d
2025-02-07 22:06:34 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:06:34 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:06:35 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:06:35 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@4bfaa7b] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:06:36 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 22:06:36 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 22:06:56 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:06:57 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:06:58 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-07 22:06:58 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-02-07 22:06:58 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-02-07 22:06:58 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-02-07 22:06:59 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-02-07 22:06:59 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-02-07 22:06:59 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2b69f552, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@9980665, org.springframework.security.web.context.SecurityContextHolderFilter@7df2624f, org.springframework.security.web.header.HeaderWriterFilter@6523a69a, org.springframework.web.filter.CorsFilter@55db3c4, org.springframework.security.web.authentication.logout.LogoutFilter@43382195, uz.pdp.config.filtr.MyFilter@2a341e3d, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@28578f6e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3933cb1b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1437f717, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@30f9a63b, org.springframework.security.web.access.ExceptionTranslationFilter@294c46ed, org.springframework.security.web.access.intercept.AuthorizationFilter@403b2e0b]
2025-02-07 22:07:00 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-02-07 22:07:00 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 30.867 seconds (process running for 31.134)
2025-02-07 22:07:00 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:07:00 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:07:00 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:07:00 [main] WARN  com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed to validate connection org.postgresql.jdbc.PgConnection@48cc060d (This connection has been closed.). Possibly consider using a shorter maxLifetime value.
2025-02-07 22:07:01 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:07:02 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 478597 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:07:02 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:07:02 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:07:03 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:07:03 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:07:03 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 70 ms. Found 13 JPA repository interfaces.
2025-02-07 22:07:03 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:07:03 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:07:03 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-02-07 22:07:03 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:07:04 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:07:04 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:07:04 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:07:04 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:07:04 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1322 ms
2025-02-07 22:07:04 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:07:04 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:07:04 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:07:04 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:07:04 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:07:06 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5c3e7128
2025-02-07 22:07:06 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:07:07 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:07:08 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:07:08 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@77d5395a] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:07:09 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 22:07:09 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 22:07:29 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:07:30 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:07:31 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-07 22:07:32 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-02-07 22:07:32 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-02-07 22:07:32 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-02-07 22:07:32 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-02-07 22:07:32 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-02-07 22:07:32 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@328c8678, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4625f276, org.springframework.security.web.context.SecurityContextHolderFilter@227f9151, org.springframework.security.web.header.HeaderWriterFilter@768857a1, org.springframework.web.filter.CorsFilter@3949019, org.springframework.security.web.authentication.logout.LogoutFilter@cba83ed, uz.pdp.config.filtr.MyFilter@1d0f7bcf, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@68501eb7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5786c476, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@659d3e3a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@14022c95, org.springframework.security.web.access.ExceptionTranslationFilter@79da2a10, org.springframework.security.web.access.intercept.AuthorizationFilter@56c3d3d8]
2025-02-07 22:07:33 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-02-07 22:07:33 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 30.99 seconds (process running for 31.24)
2025-02-07 22:07:33 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:07:34 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:07:34 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-02-07 22:07:35 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-02-07 22:07:35 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-02-07 22:07:36 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:07:36 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:07:36 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:07:36 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:07:37 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:07:37 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:07:37 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:07:37 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:07:38 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:07:38 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:07:39 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:07:39 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:07:40 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:07:40 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:07:41 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.role=?
2025-02-07 22:07:41 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-02-07 22:07:42 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:42 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:42 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:43 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:43 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:43 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:43 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:43 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:44 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:44 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:44 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:44 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:46 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:07:47 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:07:47 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-02-07 22:07:48 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:07:48 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:07:49 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:49 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:50 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:51 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:07:51 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:07:51 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:07:52 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:07:52 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:07:52 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:07:52 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:53 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:07:54 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:54 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:55 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:56 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:56 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:56 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:56 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:56 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:56 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:07:57 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:07:57 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:07:57 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:07:57 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:07:57 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:07:57 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:07:57 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:58 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:07:59 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:07:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:07:59 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:00 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:00 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:00 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:00 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:00 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:00 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:00 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:01 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:08:01 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:08:01 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:08:02 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:02 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:02 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:02 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:03 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:08:03 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:04 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:04 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:04 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:04 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:05 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:05 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:05 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:05 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:05 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:08:06 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:08:06 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:08:06 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:06 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:06 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:07 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:08:07 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:08 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:08 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:09 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:09 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:09 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:09 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:09 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:09 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:09 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:09 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:10 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:08:10 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:08:10 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:08:11 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:11 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:11 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:11 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:11 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:08:11 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:12 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:13 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:13 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:13 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:13 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:14 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:14 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:14 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:14 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:14 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:14 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:08:15 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:08:15 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:08:15 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:15 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:15 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:15 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:15 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:08:16 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:17 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:17 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:18 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:19 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:19 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:19 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:19 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:19 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:19 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:08:20 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:08:20 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:08:20 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:20 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:20 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:20 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:20 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:21 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:08:21 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:22 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:22 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:23 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:23 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:23 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:23 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:23 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:23 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:23 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:23 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:23 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:24 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:08:24 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:08:24 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:08:25 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:25 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:25 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:25 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:25 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:26 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:08:26 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:27 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:28 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:28 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:29 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:08:29 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:08:30 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:08:30 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:30 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:30 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:30 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:30 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:08:31 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:31 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:32 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:33 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:33 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:33 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:33 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:33 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:34 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:34 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:08:35 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:08:35 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:08:35 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:35 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:35 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:35 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:35 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:35 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:08:36 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:37 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:37 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:38 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:08:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:08:39 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:08:39 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:08:39 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:08:39 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:39 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:39 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:39 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:08:40 [main] DEBUG org.hibernate.SQL - select count(*) from furniture_doors fd1_0
2025-02-07 22:08:40 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:08:41 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23502
2025-02-07 22:08:41 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: null value in column "quantity" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (131.595, null, null, 1, null, null, Advanced security meets elegant design - Your door's bodyguard! ..., null, null, 77x174x25, LOCK, Titanium-Reinforced Steel, SecureMax Awesome Wool Watch, 73).
2025-02-07 22:08:41 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 22:08:41 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.dao.DataIntegrityViolationException: could not execute statement [ERROR: null value in column "quantity" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (131.595, null, null, 1, null, null, Advanced security meets elegant design - Your door's bodyguard! ..., null, null, 77x174x25, LOCK, Titanium-Reinforced Steel, SecureMax Awesome Wool Watch, 73).] [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)]; SQL [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)]; constraint [quantity" of relation "furniture_doors]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:290)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy213.saveAll(Unknown Source)
	at uz.pdp.config.DataInitializer.initializeSampleFurnitureDoors(DataInitializer.java:563)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:234)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement [ERROR: null value in column "quantity" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (131.595, null, null, 1, null, null, Advanced security meets elegant design - Your door's bodyguard! ..., null, null, 77x174x25, LOCK, Titanium-Reinforced Steel, SecureMax Awesome Wool Watch, 73).] [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:97)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:758)
	at jdk.internal.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy2/jdk.proxy2.$Proxy210.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.saveAll(SimpleJpaRepository.java:644)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.saveAll(SimpleJpaRepository.java:1)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 29 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: null value in column "quantity" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (131.595, null, null, 1, null, null, Advanced security meets elegant design - Your door's bodyguard! ..., null, null, 77x174x25, LOCK, Titanium-Reinforced Steel, SecureMax Awesome Wool Watch, 73).
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:152)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 80 common frames omitted
2025-02-07 22:08:41 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:08:41 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:08:42 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:09:34 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 491699 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:09:34 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:09:34 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:09:34 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:09:34 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:09:34 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 77 ms. Found 13 JPA repository interfaces.
2025-02-07 22:09:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:09:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:09:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-02-07 22:09:35 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:09:36 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:09:36 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:09:36 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:09:36 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:09:36 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2084 ms
2025-02-07 22:09:36 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:09:36 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:09:36 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:09:36 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:09:36 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:09:39 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5ce03a9d
2025-02-07 22:09:39 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:09:39 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:09:40 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:09:41 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@77d5395a] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:09:42 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 22:09:42 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 22:10:01 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:10:02 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:10:03 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-07 22:10:04 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-02-07 22:10:04 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-02-07 22:10:04 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-02-07 22:10:04 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-02-07 22:10:04 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-02-07 22:10:04 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4e6bd1c7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@130f2e96, org.springframework.security.web.context.SecurityContextHolderFilter@3f29d1e0, org.springframework.security.web.header.HeaderWriterFilter@62237fd1, org.springframework.web.filter.CorsFilter@276f3c7f, org.springframework.security.web.authentication.logout.LogoutFilter@1dde0a2d, uz.pdp.config.filtr.MyFilter@332fa1c, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@5ab88be, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@48182b35, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3f13a21b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@57482f1e, org.springframework.security.web.access.ExceptionTranslationFilter@77da8920, org.springframework.security.web.access.intercept.AuthorizationFilter@2afa3ac4]
2025-02-07 22:10:05 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-02-07 22:10:05 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 31.707 seconds (process running for 31.983)
2025-02-07 22:10:05 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:10:06 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-02-07 22:10:06 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:10:07 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:10:07 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:10:08 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:10:08 [main] DEBUG org.hibernate.SQL - select count(*) from furniture_doors fd1_0
2025-02-07 22:10:09 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:10:09 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23502
2025-02-07 22:10:09 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: null value in column "quantity" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (175.5, null, null, 2, null, null, Advanced security meets elegant design - Your door's bodyguard! ..., null, null, 73x193x26, LOCK, Smart Alloy, SmartLock Small Rubber Chair, 10).
2025-02-07 22:10:09 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 22:10:09 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.dao.DataIntegrityViolationException: could not execute statement [ERROR: null value in column "quantity" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (175.5, null, null, 2, null, null, Advanced security meets elegant design - Your door's bodyguard! ..., null, null, 73x193x26, LOCK, Smart Alloy, SmartLock Small Rubber Chair, 10).] [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)]; SQL [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)]; constraint [quantity" of relation "furniture_doors]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:290)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy213.saveAll(Unknown Source)
	at uz.pdp.config.DataInitializer.initializeSampleFurnitureDoors(DataInitializer.java:563)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:234)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement [ERROR: null value in column "quantity" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (175.5, null, null, 2, null, null, Advanced security meets elegant design - Your door's bodyguard! ..., null, null, 73x193x26, LOCK, Smart Alloy, SmartLock Small Rubber Chair, 10).] [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:97)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:758)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy2/jdk.proxy2.$Proxy210.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.saveAll(SimpleJpaRepository.java:644)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.saveAll(SimpleJpaRepository.java:1)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 29 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: null value in column "quantity" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (175.5, null, null, 2, null, null, Advanced security meets elegant design - Your door's bodyguard! ..., null, null, 73x193x26, LOCK, Smart Alloy, SmartLock Small Rubber Chair, 10).
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:152)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 81 common frames omitted
2025-02-07 22:10:09 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:10:09 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:10:11 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:10:37 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 497109 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:10:37 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:10:37 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:10:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:10:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:10:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 75 ms. Found 13 JPA repository interfaces.
2025-02-07 22:10:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:10:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:10:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-02-07 22:10:38 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:10:39 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:10:39 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:10:39 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:10:39 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:10:39 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1400 ms
2025-02-07 22:10:39 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:10:39 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:10:39 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:10:39 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:10:39 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:10:42 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5ce03a9d
2025-02-07 22:10:42 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:10:42 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:10:43 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:10:44 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@77d5395a] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:10:44 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 22:10:45 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 22:11:04 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:11:05 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:11:06 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-07 22:11:06 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-02-07 22:11:07 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-02-07 22:11:07 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-02-07 22:11:07 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-02-07 22:11:07 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-02-07 22:11:07 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@52681909, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@f5c9316, org.springframework.security.web.context.SecurityContextHolderFilter@6d60cb5d, org.springframework.security.web.header.HeaderWriterFilter@6384c81e, org.springframework.web.filter.CorsFilter@47bd62db, org.springframework.security.web.authentication.logout.LogoutFilter@578d481b, uz.pdp.config.filtr.MyFilter@1d0f7bcf, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@5fd1a6aa, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1d3c99c3, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@521a00fb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4083443e, org.springframework.security.web.access.ExceptionTranslationFilter@5ad7c4c7, org.springframework.security.web.access.intercept.AuthorizationFilter@71afd576]
2025-02-07 22:11:08 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-02-07 22:11:08 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 30.63 seconds (process running for 30.878)
2025-02-07 22:11:08 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:11:08 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-02-07 22:11:09 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:11:09 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:11:10 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:11:10 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:11:11 [main] DEBUG org.hibernate.SQL - select count(*) from furniture_doors fd1_0
2025-02-07 22:11:11 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:11:12 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23502
2025-02-07 22:11:12 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: null value in column "quantity" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (169.66, null, null, 3, null, null, Advanced security meets elegant design - Your door's bodyguard! ..., null, null, 93x158x30, LOCK, Brass, SafeGuard Rustic Bronze Watch, 10).
2025-02-07 22:11:12 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 22:11:12 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.dao.DataIntegrityViolationException: could not execute statement [ERROR: null value in column "quantity" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (169.66, null, null, 3, null, null, Advanced security meets elegant design - Your door's bodyguard! ..., null, null, 93x158x30, LOCK, Brass, SafeGuard Rustic Bronze Watch, 10).] [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)]; SQL [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)]; constraint [quantity" of relation "furniture_doors]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:290)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy213.saveAll(Unknown Source)
	at uz.pdp.config.DataInitializer.initializeSampleFurnitureDoors(DataInitializer.java:563)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:234)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement [ERROR: null value in column "quantity" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (169.66, null, null, 3, null, null, Advanced security meets elegant design - Your door's bodyguard! ..., null, null, 93x158x30, LOCK, Brass, SafeGuard Rustic Bronze Watch, 10).] [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:97)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:758)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy2/jdk.proxy2.$Proxy210.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.saveAll(SimpleJpaRepository.java:644)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.saveAll(SimpleJpaRepository.java:1)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 29 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: null value in column "quantity" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (169.66, null, null, 3, null, null, Advanced security meets elegant design - Your door's bodyguard! ..., null, null, 93x158x30, LOCK, Brass, SafeGuard Rustic Bronze Watch, 10).
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:152)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 81 common frames omitted
2025-02-07 22:11:12 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:11:12 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:11:13 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:11:16 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 500332 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:11:16 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:11:16 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:11:16 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:11:16 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:11:16 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 84 ms. Found 13 JPA repository interfaces.
2025-02-07 22:11:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:11:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:11:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-02-07 22:11:17 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:11:17 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:11:17 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:11:17 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:11:17 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:11:17 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1400 ms
2025-02-07 22:11:18 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:11:18 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:11:18 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:11:18 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:11:18 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:11:20 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@60e5b3a8
2025-02-07 22:11:20 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:11:21 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:11:22 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:11:22 [main] DEBUG org.hibernate.SQL - alter table if exists address_social_links drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-02-07 22:11:22 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@2b8502e7] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:11:22 [main] DEBUG org.hibernate.SQL - alter table if exists addresses drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-02-07 22:11:23 [main] DEBUG org.hibernate.SQL - alter table if exists addresses drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-02-07 22:11:23 [main] DEBUG org.hibernate.SQL - alter table if exists basket_items drop constraint if exists FKnx44qatthch57p2bgo873qfxu
2025-02-07 22:11:23 [main] DEBUG org.hibernate.SQL - alter table if exists baskets drop constraint if exists FK87s17cinc4wkx0taas5nh0s8h
2025-02-07 22:11:23 [main] DEBUG org.hibernate.SQL - alter table if exists company drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-02-07 22:11:24 [main] DEBUG org.hibernate.SQL - alter table if exists company_socials_list drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-02-07 22:11:24 [main] DEBUG org.hibernate.SQL - alter table if exists custom_enum_values drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-02-07 22:11:24 [main] DEBUG org.hibernate.SQL - alter table if exists door_available_colors drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-02-07 22:11:24 [main] DEBUG org.hibernate.SQL - alter table if exists door_history drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-02-07 22:11:24 [main] DEBUG org.hibernate.SQL - alter table if exists door_history drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-02-07 22:11:25 [main] DEBUG org.hibernate.SQL - alter table if exists door_images drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-02-07 22:11:25 [main] DEBUG org.hibernate.SQL - alter table if exists doors drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-02-07 22:11:25 [main] DEBUG org.hibernate.SQL - alter table if exists doors drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-02-07 22:11:25 [main] DEBUG org.hibernate.SQL - alter table if exists email_verifications drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-02-07 22:11:26 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_door_images drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-02-07 22:11:26 [main] DEBUG org.hibernate.SQL - alter table if exists moulding_images drop constraint if exists FKll33f306u5605rgv2rc840un3
2025-02-07 22:11:26 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings drop constraint if exists FK36rcxe5tvln9tgb3gyneemqfv
2025-02-07 22:11:26 [main] DEBUG org.hibernate.SQL - alter table if exists orders drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-02-07 22:11:27 [main] DEBUG org.hibernate.SQL - alter table if exists orders drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-02-07 22:11:27 [main] DEBUG org.hibernate.SQL - drop table if exists address_social_links cascade
2025-02-07 22:11:27 [main] DEBUG org.hibernate.SQL - drop table if exists addresses cascade
2025-02-07 22:11:27 [main] DEBUG org.hibernate.SQL - drop table if exists basket_items cascade
2025-02-07 22:11:28 [main] DEBUG org.hibernate.SQL - drop table if exists baskets cascade
2025-02-07 22:11:28 [main] DEBUG org.hibernate.SQL - drop table if exists categories cascade
2025-02-07 22:11:28 [main] DEBUG org.hibernate.SQL - drop table if exists company cascade
2025-02-07 22:11:28 [main] DEBUG org.hibernate.SQL - drop table if exists company_socials_list cascade
2025-02-07 22:11:29 [main] DEBUG org.hibernate.SQL - drop table if exists custom_enum_values cascade
2025-02-07 22:11:29 [main] DEBUG org.hibernate.SQL - drop table if exists door_available_colors cascade
2025-02-07 22:11:29 [main] DEBUG org.hibernate.SQL - drop table if exists door_history cascade
2025-02-07 22:11:29 [main] DEBUG org.hibernate.SQL - drop table if exists door_images cascade
2025-02-07 22:11:29 [main] DEBUG org.hibernate.SQL - drop table if exists doors cascade
2025-02-07 22:11:30 [main] DEBUG org.hibernate.SQL - drop table if exists email_verifications cascade
2025-02-07 22:11:30 [main] DEBUG org.hibernate.SQL - drop table if exists furniture_door_images cascade
2025-02-07 22:11:30 [main] DEBUG org.hibernate.SQL - drop table if exists furniture_doors cascade
2025-02-07 22:11:30 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-02-07 22:11:30 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - drop cascades to constraint fkdtbcw79m1p7p4udhmodp84qdl on table orders
2025-02-07 22:11:30 [main] DEBUG org.hibernate.SQL - drop table if exists locations cascade
2025-02-07 22:11:31 [main] DEBUG org.hibernate.SQL - drop table if exists moulding_images cascade
2025-02-07 22:11:31 [main] DEBUG org.hibernate.SQL - drop table if exists mouldings cascade
2025-02-07 22:11:31 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-02-07 22:11:31 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - drop cascades to constraint fkj4glj9kver8c09vmx4ggxcvgd on table orders
2025-02-07 22:11:31 [main] DEBUG org.hibernate.SQL - drop table if exists orders cascade
2025-02-07 22:11:31 [main] DEBUG org.hibernate.SQL - drop table if exists ticket cascade
2025-02-07 22:11:32 [main] DEBUG org.hibernate.SQL - drop table if exists users cascade
2025-02-07 22:11:32 [main] DEBUG org.hibernate.SQL - create table address_social_links (address_id bigint not null, link varchar(255), social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')), primary key (address_id, social_type))
2025-02-07 22:11:32 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@1cb3de26] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:11:32 [main] DEBUG org.hibernate.SQL - create table addresses (is_default boolean not null, id bigserial not null, location_id bigint unique, user_id bigint, city varchar(255), email varchar(255), name varchar(255), phone_number varchar(255), street varchar(255), working_hours varchar(255), primary key (id))
2025-02-07 22:11:32 [main] DEBUG org.hibernate.SQL - create table basket_items (price float(53) not null, quantity integer not null, basket_id bigint, id bigserial not null, item_id bigint, version bigint not null, image varchar(255), name varchar(255), type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING')), primary key (id))
2025-02-07 22:11:33 [main] DEBUG org.hibernate.SQL - create table baskets (id bigserial not null, user_id bigint unique, primary key (id))
2025-02-07 22:11:33 [main] DEBUG org.hibernate.SQL - create table categories (active boolean not null, id bigserial not null, name varchar(255) not null unique, primary key (id))
2025-02-07 22:11:33 [main] DEBUG org.hibernate.SQL - create table company (work_time date, address_id bigint unique, id bigserial not null, email varchar(255), name varchar(255), phone varchar(255), primary key (id))
2025-02-07 22:11:33 [main] DEBUG org.hibernate.SQL - create table company_socials_list (company_id bigint not null, socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')))
2025-02-07 22:11:34 [main] DEBUG org.hibernate.SQL - create table custom_enum_values (is_active boolean not null, created_at timestamp(6), created_by bigint, id bigserial not null, display_name varchar(255) not null, enum_type varchar(255) not null, name varchar(255) not null unique, primary key (id))
2025-02-07 22:11:34 [main] DEBUG org.hibernate.SQL - create table door_available_colors (door_id bigint not null, available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')))
2025-02-07 22:11:34 [main] DEBUG org.hibernate.SQL - create table door_history (accessed_at timestamp(6), door_id bigint not null, id bigserial not null, user_id bigint not null, primary key (id))
2025-02-07 22:11:34 [main] DEBUG org.hibernate.SQL - create table door_images (door_id bigint not null, images varchar(255))
2025-02-07 22:11:35 [main] DEBUG org.hibernate.SQL - create table doors (active boolean not null, custom_height float(53), custom_width float(53), final_price float(53), is_base_model boolean, is_custom_color boolean, price float(53), warranty_years integer, base_model_id bigint, category_id bigint, id bigserial not null, seller_id bigint, color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')), custom_color_code varchar(255), description varchar(255), door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')), frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')), hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')), manufacturer varchar(255), material varchar(255), name varchar(255), size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')), status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')), primary key (id))
2025-02-07 22:11:35 [main] DEBUG org.hibernate.SQL - create table email_verifications (verified boolean not null, created_at timestamp(6), expiry_time timestamp(6) not null, id bigserial not null, updated_at timestamp(6), user_id bigint not null, type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')), verification_code varchar(255) not null, primary key (id))
2025-02-07 22:11:35 [main] DEBUG org.hibernate.SQL - create table furniture_door_images (furniture_door_id bigint not null, image_url varchar(255))
2025-02-07 22:11:35 [main] DEBUG org.hibernate.SQL - create table furniture_doors (price float(53) not null, stock_quantity integer not null, id bigserial not null, description varchar(255), dimensions varchar(255), furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')), material varchar(255) not null, name varchar(255) not null, primary key (id))
2025-02-07 22:11:35 [main] DEBUG org.hibernate.SQL - create table locations (latitude float(53), longitude float(53), id bigserial not null, marker_title varchar(255), primary key (id))
2025-02-07 22:11:36 [main] DEBUG org.hibernate.SQL - create table moulding_images (moulding_id bigint not null, image_url varchar(255))
2025-02-07 22:11:36 [main] DEBUG org.hibernate.SQL - create table mouldings (price DECIMAL(10,2) not null, price_overall DECIMAL(10,2), quantity integer not null, id bigserial not null, user_id bigint not null, title varchar(100) not null, description varchar(1000), article varchar(255) not null unique, size varchar(255) not null, primary key (id))
2025-02-07 22:11:36 [main] DEBUG org.hibernate.SQL - create table orders (door_id bigint not null, id bigserial not null, order_date timestamp(6) with time zone not null, preferred_delivery_time timestamp(6) with time zone, user_id bigint not null, comment varchar(1000), delivery_notes varchar(1000), installation_notes varchar(1000), contact_phone varchar(255) not null, customer_name varchar(255) not null, delivery_address varchar(255) not null, email varchar(255) not null, order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')), status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')), primary key (id))
2025-02-07 22:11:36 [main] DEBUG org.hibernate.SQL - create table ticket (id bigserial not null, user_id bigint, primary key (id))
2025-02-07 22:11:37 [main] DEBUG org.hibernate.SQL - create table users (active boolean not null, seller_request_pending boolean not null, id bigserial not null, email varchar(255) unique, lastname varchar(255), name varchar(255), password varchar(255), phone varchar(255) not null, role varchar(255) not null check (role in ('USER','SELLER','ADMIN')), primary key (id))
2025-02-07 22:11:37 [main] DEBUG org.hibernate.SQL - create index idx_address_user on addresses (user_id)
2025-02-07 22:11:37 [main] DEBUG org.hibernate.SQL - create index idx_address_city on addresses (city)
2025-02-07 22:11:37 [main] DEBUG org.hibernate.SQL - create index idx_address_default on addresses (is_default)
2025-02-07 22:11:38 [main] DEBUG org.hibernate.SQL - create index idx_address_phone on addresses (phone_number)
2025-02-07 22:11:38 [main] DEBUG org.hibernate.SQL - create index idx_basketitem_basket on basket_items (basket_id)
2025-02-07 22:11:38 [main] DEBUG org.hibernate.SQL - create index idx_basketitem_item on basket_items (item_id, type)
2025-02-07 22:11:38 [main] DEBUG org.hibernate.SQL - create index idx_basketitem_name on basket_items (name)
2025-02-07 22:11:39 [main] DEBUG org.hibernate.SQL - create index idx_category_name on categories (name)
2025-02-07 22:11:39 [main] DEBUG org.hibernate.SQL - create index idx_category_active on categories (active)
2025-02-07 22:11:39 [main] DEBUG org.hibernate.SQL - create index idx_door_material on doors (material)
2025-02-07 22:11:39 [main] DEBUG org.hibernate.SQL - create index idx_door_manufacturer on doors (manufacturer)
2025-02-07 22:11:40 [main] DEBUG org.hibernate.SQL - create index idx_door_price on doors (price)
2025-02-07 22:11:40 [main] DEBUG org.hibernate.SQL - create index idx_door_name on doors (name)
2025-02-07 22:11:40 [main] DEBUG org.hibernate.SQL - create index idx_door_active_status on doors (active, status)
2025-02-07 22:11:40 [main] DEBUG org.hibernate.SQL - create index idx_door_color on doors (color)
2025-02-07 22:11:41 [main] DEBUG org.hibernate.SQL - create index idx_door_size on doors (size)
2025-02-07 22:11:41 [main] DEBUG org.hibernate.SQL - create index idx_door_seller on doors (seller_id)
2025-02-07 22:11:41 [main] DEBUG org.hibernate.SQL - create index idx_door_category on doors (category_id)
2025-02-07 22:11:41 [main] DEBUG org.hibernate.SQL - create index idx_door_location on doors (door_location)
2025-02-07 22:11:42 [main] DEBUG org.hibernate.SQL - create index idx_door_frame_type on doors (frame_type)
2025-02-07 22:11:42 [main] DEBUG org.hibernate.SQL - create index idx_furniture_type on furniture_doors (furniture_type)
2025-02-07 22:11:42 [main] DEBUG org.hibernate.SQL - create index idx_furniture_material on furniture_doors (material)
2025-02-07 22:11:42 [main] DEBUG org.hibernate.SQL - create index idx_furniture_price on furniture_doors (price)
2025-02-07 22:11:43 [main] DEBUG org.hibernate.SQL - create index idx_furniture_stock on furniture_doors (stock_quantity)
2025-02-07 22:11:43 [main] DEBUG org.hibernate.SQL - create index idx_furniture_name on furniture_doors (name)
2025-02-07 22:11:43 [main] DEBUG org.hibernate.SQL - create index idx_location_coords on locations (latitude, longitude)
2025-02-07 22:11:43 [main] DEBUG org.hibernate.SQL - create index idx_location_title on locations (marker_title)
2025-02-07 22:11:44 [main] DEBUG org.hibernate.SQL - create index idx_moulding_title on mouldings (title)
2025-02-07 22:11:44 [main] DEBUG org.hibernate.SQL - create index idx_moulding_price on mouldings (price)
2025-02-07 22:11:44 [main] DEBUG org.hibernate.SQL - create index idx_moulding_size on mouldings (size)
2025-02-07 22:11:44 [main] DEBUG org.hibernate.SQL - create index idx_moulding_user on mouldings (user_id)
2025-02-07 22:11:45 [main] DEBUG org.hibernate.SQL - create index idx_moulding_quantity on mouldings (quantity)
2025-02-07 22:11:45 [main] DEBUG org.hibernate.SQL - create index idx_order_user on orders (user_id)
2025-02-07 22:11:45 [main] DEBUG org.hibernate.SQL - create index idx_order_door on orders (door_id)
2025-02-07 22:11:45 [main] DEBUG org.hibernate.SQL - create index idx_order_status_date on orders (status, order_date)
2025-02-07 22:11:46 [main] DEBUG org.hibernate.SQL - create index idx_order_type_date on orders (order_type, order_date)
2025-02-07 22:11:46 [main] DEBUG org.hibernate.SQL - create index idx_user_name on users (name)
2025-02-07 22:11:46 [main] DEBUG org.hibernate.SQL - create index idx_user_phone on users (phone)
2025-02-07 22:11:46 [main] DEBUG org.hibernate.SQL - create index idx_user_role_active on users (role, active)
2025-02-07 22:11:47 [main] DEBUG org.hibernate.SQL - alter table if exists address_social_links add constraint FKf8co3916tiiox4iohci7ybiyg foreign key (address_id) references addresses
2025-02-07 22:11:47 [main] DEBUG org.hibernate.SQL - alter table if exists addresses add constraint FK7wf86ejdl44syummkme09y06f foreign key (location_id) references locations
2025-02-07 22:11:47 [main] DEBUG org.hibernate.SQL - alter table if exists addresses add constraint FK1fa36y2oqhao3wgg2rw1pi459 foreign key (user_id) references users
2025-02-07 22:11:47 [main] DEBUG org.hibernate.SQL - alter table if exists basket_items add constraint FKnx44qatthch57p2bgo873qfxu foreign key (basket_id) references baskets
2025-02-07 22:11:47 [main] DEBUG org.hibernate.SQL - alter table if exists baskets add constraint FK87s17cinc4wkx0taas5nh0s8h foreign key (user_id) references users
2025-02-07 22:11:48 [main] DEBUG org.hibernate.SQL - alter table if exists company add constraint FKlgeojgfhu94pbgyev43gtwdyq foreign key (address_id) references addresses
2025-02-07 22:11:48 [main] DEBUG org.hibernate.SQL - alter table if exists company_socials_list add constraint FKt90ivcl5f3phabfuqw6k3t9ow foreign key (company_id) references company
2025-02-07 22:11:48 [main] DEBUG org.hibernate.SQL - alter table if exists custom_enum_values add constraint FKbmmwc1jeq02ocr0c6mgv45yiy foreign key (created_by) references users
2025-02-07 22:11:48 [main] DEBUG org.hibernate.SQL - alter table if exists door_available_colors add constraint FKd2g3blkiuq2wj2trx3wnjk5me foreign key (door_id) references doors
2025-02-07 22:11:49 [main] DEBUG org.hibernate.SQL - alter table if exists door_history add constraint FKlskx5ehjqd7u0dmumo4bhuliu foreign key (door_id) references doors
2025-02-07 22:11:49 [main] DEBUG org.hibernate.SQL - alter table if exists door_history add constraint FKajibco0vlgy0ngsyg33k0wb0u foreign key (user_id) references users
2025-02-07 22:11:49 [main] DEBUG org.hibernate.SQL - alter table if exists door_images add constraint FK33nbb6c7curx5h7rp8479q7ea foreign key (door_id) references doors
2025-02-07 22:11:49 [main] DEBUG org.hibernate.SQL - alter table if exists doors add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 foreign key (category_id) references categories
2025-02-07 22:11:50 [main] DEBUG org.hibernate.SQL - alter table if exists doors add constraint FKgbgrx2rwc3wskrr30uptj4tmy foreign key (seller_id) references users
2025-02-07 22:11:50 [main] DEBUG org.hibernate.SQL - alter table if exists email_verifications add constraint FKou1xuy3rdeao75p2x1v4v3xs foreign key (user_id) references users
2025-02-07 22:11:50 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_door_images add constraint FKtncfqos5bn3jhhxs9m55tsgjk foreign key (furniture_door_id) references furniture_doors
2025-02-07 22:11:50 [main] DEBUG org.hibernate.SQL - alter table if exists moulding_images add constraint FKll33f306u5605rgv2rc840un3 foreign key (moulding_id) references mouldings
2025-02-07 22:11:51 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings add constraint FK36rcxe5tvln9tgb3gyneemqfv foreign key (user_id) references users
2025-02-07 22:11:51 [main] DEBUG org.hibernate.SQL - alter table if exists orders add constraint FKf50k9uqc2hstd0yl9uujhoq74 foreign key (door_id) references doors
2025-02-07 22:11:51 [main] DEBUG org.hibernate.SQL - alter table if exists orders add constraint FK32ql8ubntj5uh44ph9659tiih foreign key (user_id) references users
2025-02-07 22:11:51 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:11:52 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:11:53 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-07 22:11:54 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-02-07 22:11:54 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-02-07 22:11:54 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-02-07 22:11:54 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-02-07 22:11:54 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-02-07 22:11:54 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@74cc8642, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@49401c88, org.springframework.security.web.context.SecurityContextHolderFilter@4d320bb8, org.springframework.security.web.header.HeaderWriterFilter@7322fbb3, org.springframework.web.filter.CorsFilter@1c7aa844, org.springframework.security.web.authentication.logout.LogoutFilter@20054016, uz.pdp.config.filtr.MyFilter@6c737fdb, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@35eaad5f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@575604ff, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4dd02f41, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1221611f, org.springframework.security.web.access.ExceptionTranslationFilter@4777a6e3, org.springframework.security.web.access.intercept.AuthorizationFilter@4ecd2968]
2025-02-07 22:11:55 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-02-07 22:11:55 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 39.258 seconds (process running for 39.554)
2025-02-07 22:11:55 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:11:56 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:11:56 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-02-07 22:11:57 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-02-07 22:11:57 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-02-07 22:11:58 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:11:58 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:11:58 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:11:58 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:11:59 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:11:59 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:11:59 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:12:00 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:12:00 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:12:00 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:12:01 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:12:01 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:12:02 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:12:02 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:12:03 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.role=?
2025-02-07 22:12:03 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-02-07 22:12:04 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:04 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:04 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:04 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:05 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:05 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:05 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:05 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:06 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:06 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:06 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:06 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:08 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:12:09 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:12:09 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-02-07 22:12:09 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:12:10 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:12:11 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:11 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:12 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:13 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:12:13 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:12:13 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:12:14 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:14 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:14 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:14 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:12:15 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:16 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:16 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:17 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:18 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:18 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:12:19 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:12:19 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:12:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:19 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:12:20 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:20 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:20 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:20 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:21 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:21 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:22 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:12:22 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:12:23 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:12:23 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:23 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:23 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:23 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:12:24 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:24 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:24 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:24 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:24 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:24 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:25 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:26 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:27 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:12:27 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:12:27 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:12:27 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:27 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:27 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:27 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:28 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:28 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:12:29 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:30 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:30 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:31 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:32 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:12:32 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:12:32 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:12:32 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:32 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:32 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:32 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:33 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:12:33 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:34 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:34 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:35 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:36 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:12:36 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:12:36 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:12:36 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:36 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:36 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:37 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:37 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:12:38 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:39 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:39 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:39 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:39 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:39 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:39 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:39 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:39 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:39 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:40 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:41 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:12:41 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:12:41 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:12:41 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:41 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:41 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:41 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:42 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:12:42 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:43 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:43 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:43 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:43 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:43 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:43 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:43 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:43 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:43 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:44 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:45 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:45 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:45 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:12:45 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:12:46 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:12:46 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:46 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:46 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:46 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:47 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:47 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:47 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:47 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:47 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:12:48 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:49 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:49 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:50 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:50 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:51 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:12:51 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:12:51 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:12:52 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:52 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:52 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:52 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:52 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:12:53 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:53 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:54 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:55 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:55 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:55 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:12:56 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:12:56 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:12:56 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:56 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:56 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:56 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:12:57 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:12:57 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:57 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:57 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:57 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:58 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:58 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:59 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:12:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:12:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:00 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:13:00 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:13:00 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:13:01 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:13:01 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:13:01 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:13:01 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:13:01 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:13:02 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:02 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:03 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:04 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:04 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:04 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:04 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:04 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:04 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:13:05 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:13:05 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:13:05 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:13:05 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:13:05 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:13:05 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:13:06 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:13:06 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:07 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:07 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:08 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:13:09 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:13:09 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:13:09 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:13:10 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:13:10 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:13:10 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:13:10 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:13:10 [main] DEBUG org.hibernate.SQL - select count(*) from furniture_doors fd1_0
2025-02-07 22:13:10 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:11 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:11 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:11 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:11 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:12 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:12 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:12 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:12 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:13 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:13 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:13 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:13 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity) values (?,?,?,?,?,?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:14 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:13:15 [main] DEBUG org.hibernate.SQL - select count(*) from mouldings m1_0
2025-02-07 22:13:15 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:15 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:16 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:16 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:16 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:16 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:17 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:17 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:17 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:17 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:17 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:18 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:18 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:18 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:18 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:19 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:13:20 [main] DEBUG org.hibernate.SQL - select count(*) from addresses a1_0
2025-02-07 22:13:20 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:13:20 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:21 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:21 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:21 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:13:22 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:22 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:22 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:22 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:13:23 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:23 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:23 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:23 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:13:24 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:24 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:24 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:24 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:13:24 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:25 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:25 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:25 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:13:25 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:26 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:26 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:26 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:13:26 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:27 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:27 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:27 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:13:27 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:27 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:27 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:28 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:13:28 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:28 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:28 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:29 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:13:29 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:13:29 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:29 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:13:30 [RMI TCP Connection(3)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-02-07 22:13:30 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-02-07 22:13:30 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-02-07 22:13:39 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 813 ms
2025-02-07 22:13:50 [http-nio-8080-exec-4] INFO  uz.pdp.controller.AuthController - Processing login request for user: etadoor
2025-02-07 22:13:50 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:13:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:17:12 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:17:12 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:17:13 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:19:12 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 541001 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:19:12 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:19:12 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:19:13 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:19:13 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:19:13 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 190 ms. Found 13 JPA repository interfaces.
2025-02-07 22:19:14 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:19:14 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:19:14 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-02-07 22:19:14 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:19:15 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:19:15 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:19:15 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:19:15 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:19:15 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2468 ms
2025-02-07 22:19:15 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:19:15 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:19:15 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:19:15 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:19:15 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:19:18 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3b0d9da
2025-02-07 22:19:18 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:19:18 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:19:19 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:19:20 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@4476ac12] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:19:20 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_doors add column user_id bigint not null
2025-02-07 22:19:21 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "alter table if exists furniture_doors add column user_id bigint not null" via JDBC [ERROR: column "user_id" of relation "furniture_doors" contains null values]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "alter table if exists furniture_doors add column user_id bigint not null" via JDBC [ERROR: column "user_id" of relation "furniture_doors" contains null values]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1421)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: org.postgresql.util.PSQLException: ERROR: column "user_id" of relation "furniture_doors" contains null values
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 38 common frames omitted
2025-02-07 22:19:21 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 22:19:21 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 22:19:22 [main] DEBUG org.hibernate.SQL - alter table if exists baskets drop constraint if exists idx_basket_user
2025-02-07 22:19:22 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-02-07 22:19:22 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_basket_user" of relation "baskets" does not exist, skipping
2025-02-07 22:19:22 [main] DEBUG org.hibernate.SQL - alter table if exists baskets add constraint idx_basket_user unique (user_id)
2025-02-07 22:19:23 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings drop constraint if exists idx_moulding_article
2025-02-07 22:19:24 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-02-07 22:19:24 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_moulding_article" of relation "mouldings" does not exist, skipping
2025-02-07 22:19:24 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings add constraint idx_moulding_article unique (article)
2025-02-07 22:19:24 [main] DEBUG org.hibernate.SQL - alter table if exists users drop constraint if exists idx_user_email
2025-02-07 22:19:25 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-02-07 22:19:25 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_user_email" of relation "users" does not exist, skipping
2025-02-07 22:19:25 [main] DEBUG org.hibernate.SQL - alter table if exists users add constraint idx_user_email unique (email)
2025-02-07 22:19:38 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_doors add constraint FKqugkvtmsh0m4je7d91r9rry26 foreign key (user_id) references users
2025-02-07 22:19:38 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "alter table if exists furniture_doors add constraint FKqugkvtmsh0m4je7d91r9rry26 foreign key (user_id) references users" via JDBC [ERROR: column "user_id" referenced in foreign key constraint does not exist]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "alter table if exists furniture_doors add constraint FKqugkvtmsh0m4je7d91r9rry26 foreign key (user_id) references users" via JDBC [ERROR: column "user_id" referenced in foreign key constraint does not exist]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applyForeignKeys(AbstractSchemaMigrator.java:446)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:268)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1421)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: org.postgresql.util.PSQLException: ERROR: column "user_id" referenced in foreign key constraint does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 37 common frames omitted
2025-02-07 22:19:41 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:19:42 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:19:43 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-07 22:19:44 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-02-07 22:19:44 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-02-07 22:19:44 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-02-07 22:19:44 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-02-07 22:19:44 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-02-07 22:19:44 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5fb84818, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6569268a, org.springframework.security.web.context.SecurityContextHolderFilter@6c336b5, org.springframework.security.web.header.HeaderWriterFilter@7a206aa, org.springframework.web.filter.CorsFilter@5ce0e93d, org.springframework.security.web.authentication.logout.LogoutFilter@6fc36160, uz.pdp.config.filtr.MyFilter@5af641d3, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@1c3d1a7f, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@62a8e11d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@20da2b11, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@51bb94c3, org.springframework.security.web.access.ExceptionTranslationFilter@589b9cb2, org.springframework.security.web.access.intercept.AuthorizationFilter@2376fb56]
2025-02-07 22:19:45 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-02-07 22:19:45 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 33.434 seconds (process running for 37.206)
2025-02-07 22:19:45 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:19:46 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-02-07 22:19:46 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:19:47 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:19:47 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:19:47 [main] WARN  c.zaxxer.hikari.pool.ProxyConnection - HikariPool-1 - Connection org.postgresql.jdbc.PgConnection@3b0d9da marked as broken because of SQLSTATE(08006), ErrorCode(0)
org.postgresql.util.PSQLException: An I/O error occurred while sending to the backend.
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:395)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.executeQuery(PgPreparedStatement.java:134)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:203)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:359)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:300)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:564)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.count(SimpleJpaRepository.java:603)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy224.count(Unknown Source)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:209)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: java.net.SocketException: Socket closed
	at java.base/sun.nio.ch.NioSocketImpl.endRead(NioSocketImpl.java:253)
	at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:332)
	at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:355)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:808)
	at java.base/java.net.Socket$SocketInputStream.read(Socket.java:966)
	at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:484)
	at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:478)
	at java.base/sun.security.ssl.SSLSocketInputRecord.bytesInCompletePacket(SSLSocketInputRecord.java:70)
	at java.base/sun.security.ssl.SSLSocketImpl.readApplicationRecord(SSLSocketImpl.java:1465)
	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1069)
	at org.postgresql.core.VisibleBufferedInputStream.readMore(VisibleBufferedInputStream.java:161)
	at org.postgresql.core.VisibleBufferedInputStream.ensureBytes(VisibleBufferedInputStream.java:128)
	at org.postgresql.core.VisibleBufferedInputStream.ensureBytes(VisibleBufferedInputStream.java:113)
	at org.postgresql.core.VisibleBufferedInputStream.read(VisibleBufferedInputStream.java:73)
	at org.postgresql.core.PGStream.receiveChar(PGStream.java:465)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2155)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	... 75 common frames omitted
2025-02-07 22:19:47 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 08006
2025-02-07 22:19:47 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - An I/O error occurred while sending to the backend.
2025-02-07 22:19:47 [main] ERROR o.s.t.i.TransactionInterceptor - Application exception overridden by rollback exception
org.hibernate.exception.JDBCConnectionException: JDBC exception executing SQL [select count(*) from doors d1_0] [An I/O error occurred while sending to the backend.] [n/a]
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:100)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:94)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:265)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:203)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:359)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:300)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:564)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.count(SimpleJpaRepository.java:603)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy224.count(Unknown Source)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:209)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: org.postgresql.util.PSQLException: An I/O error occurred while sending to the backend.
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:395)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.executeQuery(PgPreparedStatement.java:134)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	... 68 common frames omitted
Caused by: java.net.SocketException: Socket closed
	at java.base/sun.nio.ch.NioSocketImpl.endRead(NioSocketImpl.java:253)
	at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:332)
	at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:355)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:808)
	at java.base/java.net.Socket$SocketInputStream.read(Socket.java:966)
	at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:484)
	at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:478)
	at java.base/sun.security.ssl.SSLSocketInputRecord.bytesInCompletePacket(SSLSocketInputRecord.java:70)
	at java.base/sun.security.ssl.SSLSocketImpl.readApplicationRecord(SSLSocketImpl.java:1465)
	at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1069)
	at org.postgresql.core.VisibleBufferedInputStream.readMore(VisibleBufferedInputStream.java:161)
	at org.postgresql.core.VisibleBufferedInputStream.ensureBytes(VisibleBufferedInputStream.java:128)
	at org.postgresql.core.VisibleBufferedInputStream.ensureBytes(VisibleBufferedInputStream.java:113)
	at org.postgresql.core.VisibleBufferedInputStream.read(VisibleBufferedInputStream.java:73)
	at org.postgresql.core.PGStream.receiveChar(PGStream.java:465)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2155)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	... 75 common frames omitted
2025-02-07 22:19:47 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 22:19:47 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'connectionFactory': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:220)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory$1.orderedStream(DefaultListableBeanFactory.java:473)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.detectPersistenceExceptionTranslators(PersistenceExceptionTranslationInterceptor.java:167)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:149)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy224.count(Unknown Source)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:209)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
2025-02-07 22:19:48 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:19:51 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 544632 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:19:51 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:19:51 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:19:51 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:19:51 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:19:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 86 ms. Found 13 JPA repository interfaces.
2025-02-07 22:19:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:19:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:19:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-02-07 22:19:52 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:19:52 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:19:52 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:19:52 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:19:52 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:19:52 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1535 ms
2025-02-07 22:19:53 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:19:53 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:19:53 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:19:53 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:19:53 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:19:55 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@349686e8
2025-02-07 22:19:55 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:19:56 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:19:57 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:19:57 [main] DEBUG org.hibernate.SQL - alter table if exists address_social_links drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-02-07 22:19:57 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@f500481] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:19:58 [main] DEBUG org.hibernate.SQL - alter table if exists addresses drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-02-07 22:19:58 [main] DEBUG org.hibernate.SQL - alter table if exists addresses drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-02-07 22:19:58 [main] DEBUG org.hibernate.SQL - alter table if exists basket_items drop constraint if exists FKnx44qatthch57p2bgo873qfxu
2025-02-07 22:19:58 [main] DEBUG org.hibernate.SQL - alter table if exists baskets drop constraint if exists FK87s17cinc4wkx0taas5nh0s8h
2025-02-07 22:19:59 [main] DEBUG org.hibernate.SQL - alter table if exists company drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-02-07 22:19:59 [main] DEBUG org.hibernate.SQL - alter table if exists company_socials_list drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-02-07 22:19:59 [main] DEBUG org.hibernate.SQL - alter table if exists custom_enum_values drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-02-07 22:19:59 [main] DEBUG org.hibernate.SQL - alter table if exists door_available_colors drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-02-07 22:20:00 [main] DEBUG org.hibernate.SQL - alter table if exists door_history drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-02-07 22:20:00 [main] DEBUG org.hibernate.SQL - alter table if exists door_history drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-02-07 22:20:00 [main] DEBUG org.hibernate.SQL - alter table if exists door_images drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-02-07 22:20:00 [main] DEBUG org.hibernate.SQL - alter table if exists doors drop constraint if exists FKkw5etuyedlsnyrr9wcbjeuyp4
2025-02-07 22:20:00 [main] DEBUG org.hibernate.SQL - alter table if exists doors drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-02-07 22:20:01 [main] DEBUG org.hibernate.SQL - alter table if exists email_verifications drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-02-07 22:20:01 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_door_images drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-02-07 22:20:01 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_doors drop constraint if exists FKqugkvtmsh0m4je7d91r9rry26
2025-02-07 22:20:01 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-02-07 22:20:01 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "fkqugkvtmsh0m4je7d91r9rry26" of relation "furniture_doors" does not exist, skipping
2025-02-07 22:20:01 [main] DEBUG org.hibernate.SQL - alter table if exists moulding_images drop constraint if exists FKll33f306u5605rgv2rc840un3
2025-02-07 22:20:02 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings drop constraint if exists FK36rcxe5tvln9tgb3gyneemqfv
2025-02-07 22:20:02 [main] DEBUG org.hibernate.SQL - alter table if exists orders drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-02-07 22:20:02 [main] DEBUG org.hibernate.SQL - alter table if exists orders drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-02-07 22:20:02 [main] DEBUG org.hibernate.SQL - drop table if exists address_social_links cascade
2025-02-07 22:20:03 [main] DEBUG org.hibernate.SQL - drop table if exists addresses cascade
2025-02-07 22:20:03 [main] DEBUG org.hibernate.SQL - drop table if exists basket_items cascade
2025-02-07 22:20:03 [main] DEBUG org.hibernate.SQL - drop table if exists baskets cascade
2025-02-07 22:20:03 [main] DEBUG org.hibernate.SQL - drop table if exists categories cascade
2025-02-07 22:20:04 [main] DEBUG org.hibernate.SQL - drop table if exists company cascade
2025-02-07 22:20:04 [main] DEBUG org.hibernate.SQL - drop table if exists company_socials_list cascade
2025-02-07 22:20:04 [main] DEBUG org.hibernate.SQL - drop table if exists custom_enum_values cascade
2025-02-07 22:20:04 [main] DEBUG org.hibernate.SQL - drop table if exists door_available_colors cascade
2025-02-07 22:20:04 [main] DEBUG org.hibernate.SQL - drop table if exists door_history cascade
2025-02-07 22:20:05 [main] DEBUG org.hibernate.SQL - drop table if exists door_images cascade
2025-02-07 22:20:05 [main] DEBUG org.hibernate.SQL - drop table if exists doors cascade
2025-02-07 22:20:05 [main] DEBUG org.hibernate.SQL - drop table if exists email_verifications cascade
2025-02-07 22:20:05 [main] DEBUG org.hibernate.SQL - drop table if exists furniture_door_images cascade
2025-02-07 22:20:06 [main] DEBUG org.hibernate.SQL - drop table if exists furniture_doors cascade
2025-02-07 22:20:06 [main] DEBUG org.hibernate.SQL - drop table if exists locations cascade
2025-02-07 22:20:06 [main] DEBUG org.hibernate.SQL - drop table if exists moulding_images cascade
2025-02-07 22:20:06 [main] DEBUG org.hibernate.SQL - drop table if exists mouldings cascade
2025-02-07 22:20:07 [main] DEBUG org.hibernate.SQL - drop table if exists orders cascade
2025-02-07 22:20:07 [main] DEBUG org.hibernate.SQL - drop table if exists ticket cascade
2025-02-07 22:20:07 [main] DEBUG org.hibernate.SQL - drop table if exists users cascade
2025-02-07 22:20:07 [main] DEBUG org.hibernate.SQL - create table address_social_links (address_id bigint not null, link varchar(255), social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')), primary key (address_id, social_type))
2025-02-07 22:20:07 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@1054864f] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:20:08 [main] DEBUG org.hibernate.SQL - create table addresses (is_default boolean not null, id bigserial not null, location_id bigint unique, user_id bigint, city varchar(255), email varchar(255), name varchar(255), phone_number varchar(255), street varchar(255), working_hours varchar(255), primary key (id))
2025-02-07 22:20:08 [main] DEBUG org.hibernate.SQL - create table basket_items (price float(53) not null, quantity integer not null, basket_id bigint, id bigserial not null, item_id bigint, version bigint not null, image varchar(255), name varchar(255), type varchar(255) check (type in ('DOOR','ACCESSORY','MOULDING','FURNITURE_DOOR')), primary key (id))
2025-02-07 22:20:08 [main] DEBUG org.hibernate.SQL - create table baskets (id bigserial not null, user_id bigint unique, primary key (id))
2025-02-07 22:20:08 [main] DEBUG org.hibernate.SQL - create table categories (active boolean not null, id bigserial not null, name varchar(255) not null unique, primary key (id))
2025-02-07 22:20:09 [main] DEBUG org.hibernate.SQL - create table company (work_time date, address_id bigint unique, id bigserial not null, email varchar(255), name varchar(255), phone varchar(255), primary key (id))
2025-02-07 22:20:09 [main] DEBUG org.hibernate.SQL - create table company_socials_list (company_id bigint not null, socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')))
2025-02-07 22:20:09 [main] DEBUG org.hibernate.SQL - create table custom_enum_values (is_active boolean not null, created_at timestamp(6), created_by bigint, id bigserial not null, display_name varchar(255) not null, enum_type varchar(255) not null, name varchar(255) not null unique, primary key (id))
2025-02-07 22:20:09 [main] DEBUG org.hibernate.SQL - create table door_available_colors (door_id bigint not null, available_colors varchar(255) check (available_colors in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')))
2025-02-07 22:20:10 [main] DEBUG org.hibernate.SQL - create table door_history (accessed_at timestamp(6), door_id bigint not null, id bigserial not null, user_id bigint not null, primary key (id))
2025-02-07 22:20:10 [main] DEBUG org.hibernate.SQL - create table door_images (door_id bigint not null, images varchar(255))
2025-02-07 22:20:10 [main] DEBUG org.hibernate.SQL - create table doors (active boolean not null, custom_height float(53), custom_width float(53), final_price float(53), is_base_model boolean, is_custom_color boolean, price float(53), warranty_years integer, base_model_id bigint, category_id bigint, id bigserial not null, seller_id bigint, color varchar(255) check (color in ('WHITE','OFF_WHITE','CREAM','IVORY','LIGHT_OAK','GOLDEN_OAK','DARK_OAK','WALNUT','MAHOGANY','TEAK','CHERRY','ESPRESSO','LIGHT_GRAY','GRAY','CHARCOAL','BLACK','BEIGE','TAN','BROWN','BRONZE','NAVY','FOREST_GREEN','WINE_RED','BURGUNDY','GUNMETAL','BRUSHED_STEEL','ANTIQUE_BRASS','CUSTOM')), custom_color_code varchar(255), description varchar(255), door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')), frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')), hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')), manufacturer varchar(255), material varchar(255), name varchar(255), size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')), status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')), primary key (id))
2025-02-07 22:20:10 [main] DEBUG org.hibernate.SQL - create table email_verifications (verified boolean not null, created_at timestamp(6), expiry_time timestamp(6) not null, id bigserial not null, updated_at timestamp(6), user_id bigint not null, type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')), verification_code varchar(255) not null, primary key (id))
2025-02-07 22:20:11 [main] DEBUG org.hibernate.SQL - create table furniture_door_images (furniture_door_id bigint not null, image_url varchar(255))
2025-02-07 22:20:11 [main] DEBUG org.hibernate.SQL - create table furniture_doors (price float(53) not null, stock_quantity integer not null, id bigserial not null, user_id bigint not null, description varchar(255), dimensions varchar(255), furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')), material varchar(255) not null, name varchar(255) not null, primary key (id))
2025-02-07 22:20:11 [main] DEBUG org.hibernate.SQL - create table locations (latitude float(53), longitude float(53), id bigserial not null, marker_title varchar(255), primary key (id))
2025-02-07 22:20:11 [main] DEBUG org.hibernate.SQL - create table moulding_images (moulding_id bigint not null, image_url varchar(255))
2025-02-07 22:20:12 [main] DEBUG org.hibernate.SQL - create table mouldings (price DECIMAL(10,2) not null, price_overall DECIMAL(10,2), quantity integer not null, id bigserial not null, user_id bigint not null, title varchar(100) not null, description varchar(1000), article varchar(255) not null unique, size varchar(255) not null, primary key (id))
2025-02-07 22:20:12 [main] DEBUG org.hibernate.SQL - create table orders (door_id bigint not null, id bigserial not null, order_date timestamp(6) with time zone not null, preferred_delivery_time timestamp(6) with time zone, user_id bigint not null, comment varchar(1000), delivery_notes varchar(1000), installation_notes varchar(1000), contact_phone varchar(255) not null, customer_name varchar(255) not null, delivery_address varchar(255) not null, email varchar(255) not null, order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')), status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')), primary key (id))
2025-02-07 22:20:12 [main] DEBUG org.hibernate.SQL - create table ticket (id bigserial not null, user_id bigint, primary key (id))
2025-02-07 22:20:12 [main] DEBUG org.hibernate.SQL - create table users (active boolean not null, seller_request_pending boolean not null, id bigserial not null, email varchar(255) unique, lastname varchar(255), name varchar(255), password varchar(255), phone varchar(255) not null, role varchar(255) not null check (role in ('USER','SELLER','ADMIN')), primary key (id))
2025-02-07 22:20:12 [main] DEBUG org.hibernate.SQL - create index idx_address_user on addresses (user_id)
2025-02-07 22:20:13 [main] DEBUG org.hibernate.SQL - create index idx_address_city on addresses (city)
2025-02-07 22:20:13 [main] DEBUG org.hibernate.SQL - create index idx_address_default on addresses (is_default)
2025-02-07 22:20:13 [main] DEBUG org.hibernate.SQL - create index idx_address_phone on addresses (phone_number)
2025-02-07 22:20:13 [main] DEBUG org.hibernate.SQL - create index idx_basketitem_basket on basket_items (basket_id)
2025-02-07 22:20:14 [main] DEBUG org.hibernate.SQL - create index idx_basketitem_item on basket_items (item_id, type)
2025-02-07 22:20:14 [main] DEBUG org.hibernate.SQL - create index idx_basketitem_name on basket_items (name)
2025-02-07 22:20:15 [main] DEBUG org.hibernate.SQL - create index idx_category_name on categories (name)
2025-02-07 22:20:15 [main] DEBUG org.hibernate.SQL - create index idx_category_active on categories (active)
2025-02-07 22:20:15 [main] DEBUG org.hibernate.SQL - create index idx_door_material on doors (material)
2025-02-07 22:20:15 [main] DEBUG org.hibernate.SQL - create index idx_door_manufacturer on doors (manufacturer)
2025-02-07 22:20:16 [main] DEBUG org.hibernate.SQL - create index idx_door_price on doors (price)
2025-02-07 22:20:16 [main] DEBUG org.hibernate.SQL - create index idx_door_name on doors (name)
2025-02-07 22:20:16 [main] DEBUG org.hibernate.SQL - create index idx_door_active_status on doors (active, status)
2025-02-07 22:20:16 [main] DEBUG org.hibernate.SQL - create index idx_door_color on doors (color)
2025-02-07 22:20:17 [main] DEBUG org.hibernate.SQL - create index idx_door_size on doors (size)
2025-02-07 22:20:17 [main] DEBUG org.hibernate.SQL - create index idx_door_seller on doors (seller_id)
2025-02-07 22:20:17 [main] DEBUG org.hibernate.SQL - create index idx_door_category on doors (category_id)
2025-02-07 22:20:17 [main] DEBUG org.hibernate.SQL - create index idx_door_location on doors (door_location)
2025-02-07 22:20:18 [main] DEBUG org.hibernate.SQL - create index idx_door_frame_type on doors (frame_type)
2025-02-07 22:20:18 [main] DEBUG org.hibernate.SQL - create index idx_furniture_type on furniture_doors (furniture_type)
2025-02-07 22:20:18 [main] DEBUG org.hibernate.SQL - create index idx_furniture_material on furniture_doors (material)
2025-02-07 22:20:18 [main] DEBUG org.hibernate.SQL - create index idx_furniture_price on furniture_doors (price)
2025-02-07 22:20:18 [main] DEBUG org.hibernate.SQL - create index idx_furniture_stock on furniture_doors (stock_quantity)
2025-02-07 22:20:19 [main] DEBUG org.hibernate.SQL - create index idx_furniture_name on furniture_doors (name)
2025-02-07 22:20:19 [main] DEBUG org.hibernate.SQL - create index idx_location_coords on locations (latitude, longitude)
2025-02-07 22:20:19 [main] DEBUG org.hibernate.SQL - create index idx_location_title on locations (marker_title)
2025-02-07 22:20:20 [main] DEBUG org.hibernate.SQL - create index idx_moulding_title on mouldings (title)
2025-02-07 22:20:20 [main] DEBUG org.hibernate.SQL - create index idx_moulding_price on mouldings (price)
2025-02-07 22:20:20 [main] DEBUG org.hibernate.SQL - create index idx_moulding_size on mouldings (size)
2025-02-07 22:20:20 [main] DEBUG org.hibernate.SQL - create index idx_moulding_user on mouldings (user_id)
2025-02-07 22:20:20 [main] DEBUG org.hibernate.SQL - create index idx_moulding_quantity on mouldings (quantity)
2025-02-07 22:20:21 [main] DEBUG org.hibernate.SQL - create index idx_order_user on orders (user_id)
2025-02-07 22:20:21 [main] DEBUG org.hibernate.SQL - create index idx_order_door on orders (door_id)
2025-02-07 22:20:21 [main] DEBUG org.hibernate.SQL - create index idx_order_status_date on orders (status, order_date)
2025-02-07 22:20:21 [main] DEBUG org.hibernate.SQL - create index idx_order_type_date on orders (order_type, order_date)
2025-02-07 22:20:22 [main] DEBUG org.hibernate.SQL - create index idx_user_name on users (name)
2025-02-07 22:20:22 [main] DEBUG org.hibernate.SQL - create index idx_user_phone on users (phone)
2025-02-07 22:20:22 [main] DEBUG org.hibernate.SQL - create index idx_user_role_active on users (role, active)
2025-02-07 22:20:22 [main] DEBUG org.hibernate.SQL - alter table if exists address_social_links add constraint FKf8co3916tiiox4iohci7ybiyg foreign key (address_id) references addresses
2025-02-07 22:20:23 [main] DEBUG org.hibernate.SQL - alter table if exists addresses add constraint FK7wf86ejdl44syummkme09y06f foreign key (location_id) references locations
2025-02-07 22:20:23 [main] DEBUG org.hibernate.SQL - alter table if exists addresses add constraint FK1fa36y2oqhao3wgg2rw1pi459 foreign key (user_id) references users
2025-02-07 22:20:23 [main] DEBUG org.hibernate.SQL - alter table if exists basket_items add constraint FKnx44qatthch57p2bgo873qfxu foreign key (basket_id) references baskets
2025-02-07 22:20:23 [main] DEBUG org.hibernate.SQL - alter table if exists baskets add constraint FK87s17cinc4wkx0taas5nh0s8h foreign key (user_id) references users
2025-02-07 22:20:24 [main] DEBUG org.hibernate.SQL - alter table if exists company add constraint FKlgeojgfhu94pbgyev43gtwdyq foreign key (address_id) references addresses
2025-02-07 22:20:24 [main] DEBUG org.hibernate.SQL - alter table if exists company_socials_list add constraint FKt90ivcl5f3phabfuqw6k3t9ow foreign key (company_id) references company
2025-02-07 22:20:24 [main] DEBUG org.hibernate.SQL - alter table if exists custom_enum_values add constraint FKbmmwc1jeq02ocr0c6mgv45yiy foreign key (created_by) references users
2025-02-07 22:20:24 [main] DEBUG org.hibernate.SQL - alter table if exists door_available_colors add constraint FKd2g3blkiuq2wj2trx3wnjk5me foreign key (door_id) references doors
2025-02-07 22:20:24 [main] DEBUG org.hibernate.SQL - alter table if exists door_history add constraint FKlskx5ehjqd7u0dmumo4bhuliu foreign key (door_id) references doors
2025-02-07 22:20:25 [main] DEBUG org.hibernate.SQL - alter table if exists door_history add constraint FKajibco0vlgy0ngsyg33k0wb0u foreign key (user_id) references users
2025-02-07 22:20:25 [main] DEBUG org.hibernate.SQL - alter table if exists door_images add constraint FK33nbb6c7curx5h7rp8479q7ea foreign key (door_id) references doors
2025-02-07 22:20:25 [main] DEBUG org.hibernate.SQL - alter table if exists doors add constraint FKkw5etuyedlsnyrr9wcbjeuyp4 foreign key (category_id) references categories
2025-02-07 22:20:25 [main] DEBUG org.hibernate.SQL - alter table if exists doors add constraint FKgbgrx2rwc3wskrr30uptj4tmy foreign key (seller_id) references users
2025-02-07 22:20:26 [main] DEBUG org.hibernate.SQL - alter table if exists email_verifications add constraint FKou1xuy3rdeao75p2x1v4v3xs foreign key (user_id) references users
2025-02-07 22:20:26 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_door_images add constraint FKtncfqos5bn3jhhxs9m55tsgjk foreign key (furniture_door_id) references furniture_doors
2025-02-07 22:20:26 [main] DEBUG org.hibernate.SQL - alter table if exists furniture_doors add constraint FKqugkvtmsh0m4je7d91r9rry26 foreign key (user_id) references users
2025-02-07 22:20:26 [main] DEBUG org.hibernate.SQL - alter table if exists moulding_images add constraint FKll33f306u5605rgv2rc840un3 foreign key (moulding_id) references mouldings
2025-02-07 22:20:27 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings add constraint FK36rcxe5tvln9tgb3gyneemqfv foreign key (user_id) references users
2025-02-07 22:20:27 [main] DEBUG org.hibernate.SQL - alter table if exists orders add constraint FKf50k9uqc2hstd0yl9uujhoq74 foreign key (door_id) references doors
2025-02-07 22:20:27 [main] DEBUG org.hibernate.SQL - alter table if exists orders add constraint FK32ql8ubntj5uh44ph9659tiih foreign key (user_id) references users
2025-02-07 22:20:27 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:20:28 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:20:29 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-07 22:20:30 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-02-07 22:20:30 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-02-07 22:20:30 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-02-07 22:20:30 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-02-07 22:20:30 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-02-07 22:20:30 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@48ddd315, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1254be3a, org.springframework.security.web.context.SecurityContextHolderFilter@41afd8e0, org.springframework.security.web.header.HeaderWriterFilter@521a00fb, org.springframework.web.filter.CorsFilter@498a7b0b, org.springframework.security.web.authentication.logout.LogoutFilter@e11b648, uz.pdp.config.filtr.MyFilter@332fa1c, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@404f05ec, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5afc655b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2bbdcb8f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@c0a337d, org.springframework.security.web.access.ExceptionTranslationFilter@6d60cb5d, org.springframework.security.web.access.intercept.AuthorizationFilter@15995647]
2025-02-07 22:20:31 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-02-07 22:20:31 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 40.91 seconds (process running for 41.276)
2025-02-07 22:20:31 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:20:32 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:20:33 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-02-07 22:20:33 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-02-07 22:20:34 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-02-07 22:20:34 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:20:34 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:20:35 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:20:35 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:20:35 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:20:35 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:20:35 [main] DEBUG org.hibernate.SQL - insert into categories (active,name) values (?,?)
2025-02-07 22:20:36 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:20:36 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:20:37 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:20:37 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:20:38 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:20:38 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:20:39 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0 where c1_0.name=?
2025-02-07 22:20:39 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.role=?
2025-02-07 22:20:40 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-02-07 22:20:40 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:40 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:41 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:41 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:41 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:41 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:41 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:42 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:42 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:42 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:42 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:43 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:43 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:43 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:43 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:44 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:20:45 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:20:45 [main] DEBUG org.hibernate.SQL - insert into users (active,email,lastname,name,password,phone,role,seller_request_pending) values (?,?,?,?,?,?,?,?)
2025-02-07 22:20:46 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:20:47 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:20:47 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:47 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:47 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:47 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:47 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:48 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:48 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:48 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:49 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:49 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:50 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:20:50 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:20:50 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:20:50 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:20:50 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:20:50 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:20:50 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:20:51 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:20:52 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:52 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:52 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:52 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:52 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:52 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:52 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:52 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:52 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:53 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:53 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:54 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:54 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:54 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:20:55 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:20:55 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:20:55 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:20:55 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:20:55 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:20:55 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:20:56 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:20:56 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:56 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:56 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:56 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:57 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:57 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:57 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:57 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:57 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:57 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:58 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:58 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:20:58 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:20:59 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:20:59 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:20:59 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:20:59 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:20:59 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:20:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:20:59 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:00 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:21:00 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:01 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:01 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:02 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:02 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:02 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:03 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:03 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:21:03 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:21:04 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:21:04 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:04 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:04 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:04 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:04 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:05 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:05 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:05 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:05 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:21:05 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:06 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:06 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:07 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:07 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:08 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:08 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:08 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:21:08 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:21:09 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:21:09 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:09 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:09 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:09 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:09 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:21:10 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:10 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:10 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:10 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:10 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:11 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:11 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:11 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:12 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:12 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:13 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:13 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:13 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:13 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:13 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:21:13 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:21:14 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:21:14 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:14 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:14 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:14 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:14 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:14 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:21:15 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:15 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:16 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:16 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:16 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:17 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:17 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:18 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:18 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:18 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:21:18 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:21:19 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:21:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:19 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:19 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:21:20 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:20 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:20 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:20 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:21 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:21 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:21 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:22 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:22 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:23 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:21:23 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:21:23 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:21:23 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:23 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:23 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:23 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:24 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:21:24 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:24 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:24 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:24 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:24 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:25 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:25 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:26 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:26 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:26 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:27 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:27 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:21:27 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:21:27 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:21:28 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:28 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:28 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:28 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:28 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:28 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:29 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:21:29 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:29 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:30 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:30 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:31 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:31 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:31 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:32 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:32 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:21:32 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:21:32 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:21:33 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:33 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:33 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:33 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:33 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:33 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:33 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:33 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:33 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:34 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:21:34 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:35 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:35 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:36 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:36 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:36 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:37 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:37 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:21:37 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:21:38 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:21:38 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:38 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:38 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:38 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:38 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:38 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:39 [main] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.active,c1_0.name from categories c1_0
2025-02-07 22:21:39 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:40 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:40 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:41 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:41 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:41 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:41 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:41 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:41 [main] DEBUG org.hibernate.SQL - insert into doors (active,base_model_id,category_id,color,custom_color_code,custom_height,custom_width,description,door_location,final_price,frame_type,hardware,is_base_model,is_custom_color,manufacturer,material,name,price,seller_id,size,status,warranty_years) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-02-07 22:21:42 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:42 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:42 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:42 [main] DEBUG org.hibernate.SQL - insert into door_images (door_id,images) values (?,?)
2025-02-07 22:21:42 [main] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:21:42 [main] DEBUG org.hibernate.SQL - select ac1_0.door_id,ac1_0.available_colors from door_available_colors ac1_0 where ac1_0.door_id=?
2025-02-07 22:21:43 [main] DEBUG org.hibernate.SQL - select i1_0.door_id,i1_0.images from door_images i1_0 where i1_0.door_id=?
2025-02-07 22:21:43 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:43 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:43 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:43 [main] DEBUG org.hibernate.SQL - insert into door_available_colors (door_id,available_colors) values (?,?)
2025-02-07 22:21:43 [main] DEBUG org.hibernate.SQL - select count(*) from furniture_doors fd1_0
2025-02-07 22:21:44 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:21:44 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23502
2025-02-07 22:21:44 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: null value in column "user_id" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (275.09, 10, 1, null, Advanced security meets elegant design - Your door's bodyguard! ..., 80x175x30, LOCK, Hardened Steel, SafeGuard Mediocre Steel Bag).
2025-02-07 22:21:44 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 22:21:44 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.dao.DataIntegrityViolationException: could not execute statement [ERROR: null value in column "user_id" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (275.09, 10, 1, null, Advanced security meets elegant design - Your door's bodyguard! ..., 80x175x30, LOCK, Hardened Steel, SafeGuard Mediocre Steel Bag).] [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)]; SQL [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)]; constraint [user_id" of relation "furniture_doors]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:290)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy213.saveAll(Unknown Source)
	at uz.pdp.config.DataInitializer.initializeSampleFurnitureDoors(DataInitializer.java:563)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:234)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement [ERROR: null value in column "user_id" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (275.09, 10, 1, null, Advanced security meets elegant design - Your door's bodyguard! ..., 80x175x30, LOCK, Hardened Steel, SafeGuard Mediocre Steel Bag).] [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:97)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:758)
	at jdk.internal.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy2/jdk.proxy2.$Proxy210.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.saveAll(SimpleJpaRepository.java:644)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.saveAll(SimpleJpaRepository.java:1)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 29 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: null value in column "user_id" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (275.09, 10, 1, null, Advanced security meets elegant design - Your door's bodyguard! ..., 80x175x30, LOCK, Hardened Steel, SafeGuard Mediocre Steel Bag).
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:152)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 80 common frames omitted
2025-02-07 22:21:44 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:21:44 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:21:46 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:21:57 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 555636 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:21:57 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:21:57 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:21:57 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:21:57 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:21:57 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 114 ms. Found 13 JPA repository interfaces.
2025-02-07 22:21:58 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:21:58 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:21:58 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-02-07 22:21:58 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:21:58 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:21:58 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:21:58 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:21:58 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:21:58 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1605 ms
2025-02-07 22:21:59 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:21:59 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:21:59 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:21:59 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:21:59 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:22:02 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@48b744fd
2025-02-07 22:22:02 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:22:02 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:22:04 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:22:04 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@46bc9802] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:22:05 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 22:22:05 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 22:22:06 [main] DEBUG org.hibernate.SQL - alter table if exists baskets drop constraint if exists idx_basket_user
2025-02-07 22:22:06 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-02-07 22:22:06 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_basket_user" of relation "baskets" does not exist, skipping
2025-02-07 22:22:06 [main] DEBUG org.hibernate.SQL - alter table if exists baskets add constraint idx_basket_user unique (user_id)
2025-02-07 22:22:08 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings drop constraint if exists idx_moulding_article
2025-02-07 22:22:08 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-02-07 22:22:08 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_moulding_article" of relation "mouldings" does not exist, skipping
2025-02-07 22:22:08 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings add constraint idx_moulding_article unique (article)
2025-02-07 22:22:09 [main] DEBUG org.hibernate.SQL - alter table if exists users drop constraint if exists idx_user_email
2025-02-07 22:22:09 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-02-07 22:22:09 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_user_email" of relation "users" does not exist, skipping
2025-02-07 22:22:09 [main] DEBUG org.hibernate.SQL - alter table if exists users add constraint idx_user_email unique (email)
2025-02-07 22:22:25 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:22:26 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:22:27 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-07 22:22:28 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-02-07 22:22:28 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-02-07 22:22:28 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-02-07 22:22:28 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-02-07 22:22:28 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-02-07 22:22:28 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7c8f429, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@50d25909, org.springframework.security.web.context.SecurityContextHolderFilter@10b2d14e, org.springframework.security.web.header.HeaderWriterFilter@3a0e530d, org.springframework.web.filter.CorsFilter@60a8459b, org.springframework.security.web.authentication.logout.LogoutFilter@7a8cbff1, uz.pdp.config.filtr.MyFilter@443ac5b8, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@5710e7a3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@51f95ca, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7ae70f17, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@77da8920, org.springframework.security.web.access.ExceptionTranslationFilter@61254a73, org.springframework.security.web.access.intercept.AuthorizationFilter@b6b960e]
2025-02-07 22:22:29 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-02-07 22:22:29 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 33.004 seconds (process running for 33.444)
2025-02-07 22:22:29 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:22:30 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-02-07 22:22:30 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:22:31 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:22:31 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:22:32 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:22:32 [main] DEBUG org.hibernate.SQL - select count(*) from furniture_doors fd1_0
2025-02-07 22:22:33 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:22:33 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23502
2025-02-07 22:22:33 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: null value in column "user_id" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (395.51, 10, 2, null, Advanced security meets elegant design - Your door's bodyguard! ..., 73x144x28, LOCK, Smart Alloy, SafeGuard Practical Bronze Bench).
2025-02-07 22:22:34 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-02-07 22:22:34 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.dao.DataIntegrityViolationException: could not execute statement [ERROR: null value in column "user_id" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (395.51, 10, 2, null, Advanced security meets elegant design - Your door's bodyguard! ..., 73x144x28, LOCK, Smart Alloy, SafeGuard Practical Bronze Bench).] [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)]; SQL [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)]; constraint [user_id" of relation "furniture_doors]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:290)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy233.saveAll(Unknown Source)
	at uz.pdp.config.DataInitializer.initializeSampleFurnitureDoors(DataInitializer.java:563)
	at uz.pdp.config.DataInitializer.run(DataInitializer.java:234)
	at org.springframework.boot.SpringApplication.lambda$callRunner$5(SpringApplication.java:790)
	at org.springframework.util.function.ThrowingConsumer$1.acceptWithException(ThrowingConsumer.java:83)
	at org.springframework.util.function.ThrowingConsumer.accept(ThrowingConsumer.java:60)
	at org.springframework.util.function.ThrowingConsumer$1.accept(ThrowingConsumer.java:88)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:789)
	at org.springframework.boot.SpringApplication.lambda$callRunners$3(SpringApplication.java:774)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:774)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:341)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:51)
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement [ERROR: null value in column "user_id" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (395.51, 10, 2, null, Advanced security meets elegant design - Your door's bodyguard! ..., 73x144x28, LOCK, Smart Alloy, SafeGuard Practical Bronze Bench).] [insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:97)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:758)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy2/jdk.proxy2.$Proxy205.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.saveAll(SimpleJpaRepository.java:644)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 29 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: null value in column "user_id" of relation "furniture_doors" violates not-null constraint
  Detail: Failing row contains (395.51, 10, 2, null, Advanced security meets elegant design - Your door's bodyguard! ..., 73x144x28, LOCK, Smart Alloy, SafeGuard Practical Bronze Bench).
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:190)
	at org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:152)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 80 common frames omitted
2025-02-07 22:22:34 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:22:34 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-02-07 22:22:35 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-02-07 22:23:52 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 565345 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-02-07 22:23:52 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-02-07 22:23:52 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-02-07 22:23:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:23:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-07 22:23:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 81 ms. Found 13 JPA repository interfaces.
2025-02-07 22:23:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-07 22:23:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-07 22:23:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-02-07 22:23:53 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-02-07 22:23:53 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-02-07 22:23:53 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-07 22:23:53 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-02-07 22:23:53 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-07 22:23:53 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1387 ms
2025-02-07 22:23:53 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-07 22:23:53 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-02-07 22:23:53 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-07 22:23:53 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-07 22:23:53 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-02-07 22:23:56 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7baf7e2c
2025-02-07 22:23:56 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-02-07 22:23:56 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-07 22:23:58 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-07 22:23:58 [main] INFO  o.hibernate.orm.connections.access - HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@7cc742d] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
2025-02-07 22:23:59 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price set data type DECIMAL(10,2)
2025-02-07 22:23:59 [main] DEBUG org.hibernate.SQL - alter table if exists mouldings alter column price_overall set data type DECIMAL(10,2)
2025-02-07 22:24:18 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-07 22:24:19 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-02-07 22:24:20 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-07 22:24:21 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-02-07 22:24:21 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[id, street, city, country, zipCode, location], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAllMapPoints=AddressGraphQLController#getAllMapPoints[0 args], Query.getAddress=AddressGraphQLController#getAddress[1 args], Query.findNearestAddress=AddressGraphQLController#findNearestAddress[2 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.searchAddressesByCity=AddressGraphQLController#searchAddressesByCity[1 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args]}
	Skipped types: []
2025-02-07 22:24:21 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-02-07 22:24:21 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-02-07 22:24:21 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-02-07 22:24:21 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@74ac2dab, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6a3c63d2, org.springframework.security.web.context.SecurityContextHolderFilter@6538ca02, org.springframework.security.web.header.HeaderWriterFilter@14a00933, org.springframework.web.filter.CorsFilter@7741acb2, org.springframework.security.web.authentication.logout.LogoutFilter@7bd13e1d, uz.pdp.config.filtr.MyFilter@760c777d, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@6f0d9606, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@152a4d6c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@71367037, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@72f97666, org.springframework.security.web.access.ExceptionTranslationFilter@5a7ffa4c, org.springframework.security.web.access.intercept.AuthorizationFilter@50fa35ab]
2025-02-07 22:24:22 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-02-07 22:24:22 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 30.657 seconds (process running for 30.901)
2025-02-07 22:24:22 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:24:23 [main] DEBUG org.hibernate.SQL - select count(*) from categories c1_0
2025-02-07 22:24:23 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:24:24 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:24:24 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:24:25 [main] DEBUG org.hibernate.SQL - select count(*) from doors d1_0
2025-02-07 22:24:25 [main] DEBUG org.hibernate.SQL - select count(*) from furniture_doors fd1_0
2025-02-07 22:24:26 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:24:26 [main] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.email=? and u1_0.active=true
2025-02-07 22:24:27 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:27 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:27 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:27 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:28 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:28 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:28 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:28 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:29 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:29 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:29 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:29 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:29 [main] DEBUG org.hibernate.SQL - insert into furniture_doors (description,dimensions,furniture_type,material,name,price,stock_quantity,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - insert into furniture_door_images (furniture_door_id,image_url) values (?,?)
2025-02-07 22:24:30 [main] DEBUG org.hibernate.SQL - select count(*) from mouldings m1_0
2025-02-07 22:24:31 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:31 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:31 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:32 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:32 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:32 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:32 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:33 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:33 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:33 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:33 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:33 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:34 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:34 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:34 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:34 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into mouldings (article,description,price,price_overall,quantity,size,title,user_id) values (?,?,?,?,?,?,?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:35 [main] DEBUG org.hibernate.SQL - insert into moulding_images (moulding_id,image_url) values (?,?)
2025-02-07 22:24:36 [main] DEBUG org.hibernate.SQL - select count(*) from addresses a1_0
2025-02-07 22:24:37 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:24:37 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:24:37 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:37 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:38 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:24:38 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:24:38 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:38 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:39 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:24:39 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:24:39 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:39 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:40 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:24:40 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:24:40 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:40 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:41 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:24:41 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:24:41 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:41 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:42 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:24:42 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:24:42 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:42 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:43 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:24:43 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:24:43 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:43 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:43 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:24:44 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:24:44 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:44 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:44 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:24:45 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:24:45 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:45 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:45 [main] DEBUG org.hibernate.SQL - insert into locations (latitude,longitude,marker_title) values (?,?,?)
2025-02-07 22:24:46 [main] DEBUG org.hibernate.SQL - insert into addresses (city,email,is_default,location_id,name,phone_number,street,user_id,working_hours) values (?,?,?,?,?,?,?,?,?)
2025-02-07 22:24:46 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:46 [main] DEBUG org.hibernate.SQL - insert into address_social_links (address_id,social_type,link) values (?,?,?)
2025-02-07 22:24:47 [RMI TCP Connection(1)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-02-07 22:24:47 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-02-07 22:24:47 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-02-07 22:24:56 [http-nio-8080-exec-8] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 657 ms
2025-02-07 22:25:06 [http-nio-8080-exec-2] INFO  uz.pdp.controller.AuthController - Processing login request for user: etadoor
2025-02-07 22:25:06 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:25:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:25:23 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:25:24 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:25:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:25:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:25:31 [http-nio-8080-exec-8] ERROR u.p.exception.GlobalExceptionHandler - Validation exception occurred: email: Please provide a valid email address
2025-02-07 22:25:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:25:46 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:25:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - select fd1_0.id,fd1_0.description,fd1_0.dimensions,fd1_0.furniture_type,fd1_0.material,fd1_0.name,fd1_0.price,fd1_0.stock_quantity,fd1_0.user_id from furniture_doors fd1_0 where fd1_0.id=?
2025-02-07 22:25:47 [http-nio-8080-exec-9] ERROR u.p.exception.GlobalExceptionHandler - Invalid argument: Door accessory not found
2025-02-07 22:26:02 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:26:02 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:26:03 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select d1_0.id,d1_0.active,d1_0.base_model_id,d1_0.category_id,d1_0.color,d1_0.custom_color_code,d1_0.custom_height,d1_0.custom_width,d1_0.description,d1_0.door_location,d1_0.final_price,d1_0.frame_type,d1_0.hardware,d1_0.is_base_model,d1_0.is_custom_color,d1_0.manufacturer,d1_0.material,d1_0.name,d1_0.price,d1_0.seller_id,d1_0.size,d1_0.status,d1_0.warranty_years from doors d1_0 where d1_0.id=?
2025-02-07 22:26:03 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.id=?
2025-02-07 22:26:03 [http-nio-8080-exec-10] INFO  uz.pdp.service.EmailService - Sending HTML email to: seller@doors.com
2025-02-07 22:26:05 [http-nio-8080-exec-10] INFO  uz.pdp.service.EmailService - HTML email sent successfully to: seller@doors.com
2025-02-07 22:26:05 [http-nio-8080-exec-10] INFO  uz.pdp.service.EmailService - Sending HTML email to: fixlgae2007@gmail.com
2025-02-07 22:26:07 [http-nio-8080-exec-10] INFO  uz.pdp.service.EmailService - HTML email sent successfully to: fixlgae2007@gmail.com
2025-02-07 22:26:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:26:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:26:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select m1_0.id,m1_0.article,m1_0.description,m1_0.price,m1_0.price_overall,m1_0.quantity,m1_0.size,m1_0.title,m1_0.user_id from mouldings m1_0 where m1_0.id=?
2025-02-07 22:26:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.id=?
2025-02-07 22:26:31 [http-nio-8080-exec-1] INFO  uz.pdp.service.EmailService - Sending HTML email to: doormaster@example.com
2025-02-07 22:26:33 [http-nio-8080-exec-1] INFO  uz.pdp.service.EmailService - HTML email sent successfully to: doormaster@example.com
2025-02-07 22:26:33 [http-nio-8080-exec-1] INFO  uz.pdp.service.EmailService - Sending HTML email to: fixlgae2007@gmail.com
2025-02-07 22:26:34 [http-nio-8080-exec-1] INFO  uz.pdp.service.EmailService - HTML email sent successfully to: fixlgae2007@gmail.com
2025-02-07 22:28:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:28:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:28:20 [http-nio-8080-exec-4] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/door-accessories
2025-02-07 22:28:20 [http-nio-8080-exec-4] ERROR u.p.exception.GlobalExceptionHandler - Unexpected error occurred
org.springframework.web.servlet.NoHandlerFoundException: No endpoint GET /api/door-accessories.
	at org.springframework.web.servlet.DispatcherServlet.noHandlerFound(DispatcherServlet.java:1304)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:181)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-02-07 22:28:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:28:23 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:28:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select fd1_0.id,fd1_0.description,fd1_0.dimensions,fd1_0.furniture_type,fd1_0.material,fd1_0.name,fd1_0.price,fd1_0.stock_quantity,fd1_0.user_id from furniture_doors fd1_0 offset ? rows fetch first ? rows only
2025-02-07 22:28:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select i1_0.furniture_door_id,i1_0.image_url from furniture_door_images i1_0 where i1_0.furniture_door_id = any (?)
2025-02-07 22:28:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:28:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.active,u1_0.email,u1_0.lastname,u1_0.name,u1_0.password,u1_0.phone,u1_0.role,u1_0.seller_request_pending from users u1_0 where u1_0.name=? and u1_0.active=true
2025-02-07 22:28:36 [http-nio-8080-exec-8] WARN  o.s.web.servlet.PageNotFound - No mapping for POST /api/reinitialize
2025-02-07 22:28:36 [http-nio-8080-exec-8] ERROR u.p.exception.GlobalExceptionHandler - Unexpected error occurred
org.springframework.web.servlet.NoHandlerFoundException: No endpoint POST /api/reinitialize.
	at org.springframework.web.servlet.DispatcherServlet.noHandlerFound(DispatcherServlet.java:1304)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:181)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
